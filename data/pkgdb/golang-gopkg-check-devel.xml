<?xml version='1.0' encoding='ASCII'?>
<project ipprefix="" commit="commit" nvr="golang-gopkg-check-0-6.fc24">
  <packages>
    <package importpath="launchpad.net/gocheck">
      <types>
        <type name="CommentInterface" type="interface">
          <method name="CheckCommentString">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type name="Checker" type="interface">
          <method name="Info">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="CheckerInfo"/>
              </type>
            </resultsList>
          </method>
          <method name="Check">
            <paramsList>
              <type type="slice">
                <elmtype type="interface"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="string"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="CheckerInfo">
          <field type="ident" def="string" name="Name"/>
          <field type="slice" name="Params">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="C">
          <field type="pointer" name="method">
            <type type="ident" def="methodType"/>
          </field>
          <field type="ident" def="funcKind" name="kind"/>
          <field type="ident" def="string" name="testName"/>
          <field type="ident" def="funcStatus" name="status"/>
          <field type="pointer" name="logb">
            <type type="ident" def="logger"/>
          </field>
          <field type="selector" name="logw">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="channel" dir="3" name="done">
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </field>
          <field type="ident" def="string" name="reason"/>
          <field type="ident" def="bool" name="mustFail"/>
          <field type="pointer" name="tempDir">
            <type type="ident" def="tempDir"/>
          </field>
          <field type="ident" def="bool" name="benchMem"/>
          <field type="selector" name="startTime">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="timer" name=""/>
        </type>
        <type type="struct" name="Result">
          <field type="ident" def="int" name="Succeeded"/>
          <field type="ident" def="int" name="Failed"/>
          <field type="ident" def="int" name="Skipped"/>
          <field type="ident" def="int" name="Panicked"/>
          <field type="ident" def="int" name="FixturePanicked"/>
          <field type="ident" def="int" name="ExpectedFailures"/>
          <field type="ident" def="int" name="Missed"/>
          <field type="ident" def="error" name="RunError"/>
          <field type="ident" def="string" name="WorkDir"/>
        </type>
        <type type="struct" name="RunConf">
          <field type="selector" name="Output">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="ident" def="bool" name="Stream"/>
          <field type="ident" def="bool" name="Verbose"/>
          <field type="ident" def="string" name="Filter"/>
          <field type="ident" def="bool" name="Benchmark"/>
          <field type="selector" name="BenchmarkTime">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="bool" name="BenchmarkMem"/>
          <field type="ident" def="bool" name="KeepWorkDir"/>
        </type>
      </types>
      <functions>
        <function name="Suite">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="TestingT">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="testing"/>
                <item value="T"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RunAll">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="RunConf"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="pointer">
              <type type="ident" def="RunConf"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </resultsList>
        </function>
        <function name="ListAll">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="RunConf"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="List">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="pointer">
              <type type="ident" def="RunConf"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Passed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Visit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="linePrinter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Visitor"/>
            </type>
          </resultsList>
        </function>
        <function name="TestName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Failed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Fail">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="FailNow">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Succeed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SucceedNow">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ExpectFailure">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Skip">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetTestLog">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Log">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Logf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Output">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Errorf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatalf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="ident" def="Checker"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Assert">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="ident" def="Checker"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Commentf">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="CommentInterface"/>
          </resultsList>
        </function>
        <function name="CheckCommentString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="comment"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Info">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CheckerInfo"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CheckerInfo"/>
            </type>
          </resultsList>
        </function>
        <function name="Not">
          <recvList/>
          <paramsList>
            <type type="ident" def="Checker"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Checker"/>
          </resultsList>
        </function>
        <function name="Info">
          <recvList>
            <type type="pointer">
              <type type="ident" def="notChecker"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CheckerInfo"/>
            </type>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="notChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="isNilChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="notNilChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="equalsChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="deepEqualsChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="hasLenChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="ident" def="errorMatchesChecker"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="matchesChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="panicsChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="panicMatchesChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fitsTypeChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="implementsChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="PC">
          <recvList>
            <type type="pointer">
              <type type="ident" def="methodType"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uintptr"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="methodType"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteTo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="logger"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MkDir">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="outputWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteCallStarted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="outputWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="WriteCallProblem">
          <recvList>
            <type type="pointer">
              <type type="ident" def="outputWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="WriteCallSuccess">
          <recvList>
            <type type="pointer">
              <type type="ident" def="outputWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="StartTimer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="StopTimer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ResetTimer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetBytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int64"/>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="IsNil"/>
        <name value="NotNil"/>
        <name value="Equals"/>
        <name value="DeepEquals"/>
        <name value="HasLen"/>
        <name value="ErrorMatches"/>
        <name value="Matches"/>
        <name value="Panics"/>
        <name value="PanicMatches"/>
        <name value="FitsTypeOf"/>
        <name value="Implements"/>
      </names>
    </package>
    <package importpath="gopkg.in/check.v1">
      <types>
        <type name="CommentInterface" type="interface">
          <method name="CheckCommentString">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type name="Checker" type="interface">
          <method name="Info">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="CheckerInfo"/>
              </type>
            </resultsList>
          </method>
          <method name="Check">
            <paramsList>
              <type type="slice">
                <elmtype type="interface"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="string"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="CheckerInfo">
          <field type="ident" def="string" name="Name"/>
          <field type="slice" name="Params">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="C">
          <field type="pointer" name="method">
            <type type="ident" def="methodType"/>
          </field>
          <field type="ident" def="funcKind" name="kind"/>
          <field type="ident" def="string" name="testName"/>
          <field type="ident" def="funcStatus" name="status"/>
          <field type="pointer" name="logb">
            <type type="ident" def="logger"/>
          </field>
          <field type="selector" name="logw">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="channel" dir="3" name="done">
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </field>
          <field type="ident" def="string" name="reason"/>
          <field type="ident" def="bool" name="mustFail"/>
          <field type="pointer" name="tempDir">
            <type type="ident" def="tempDir"/>
          </field>
          <field type="ident" def="bool" name="benchMem"/>
          <field type="selector" name="startTime">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="timer" name=""/>
        </type>
        <type type="struct" name="Result">
          <field type="ident" def="int" name="Succeeded"/>
          <field type="ident" def="int" name="Failed"/>
          <field type="ident" def="int" name="Skipped"/>
          <field type="ident" def="int" name="Panicked"/>
          <field type="ident" def="int" name="FixturePanicked"/>
          <field type="ident" def="int" name="ExpectedFailures"/>
          <field type="ident" def="int" name="Missed"/>
          <field type="ident" def="error" name="RunError"/>
          <field type="ident" def="string" name="WorkDir"/>
        </type>
        <type type="struct" name="RunConf">
          <field type="selector" name="Output">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="ident" def="bool" name="Stream"/>
          <field type="ident" def="bool" name="Verbose"/>
          <field type="ident" def="string" name="Filter"/>
          <field type="ident" def="bool" name="Benchmark"/>
          <field type="selector" name="BenchmarkTime">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="bool" name="BenchmarkMem"/>
          <field type="ident" def="bool" name="KeepWorkDir"/>
        </type>
      </types>
      <functions>
        <function name="Suite">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="TestingT">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="testing"/>
                <item value="T"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RunAll">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="RunConf"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="pointer">
              <type type="ident" def="RunConf"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </resultsList>
        </function>
        <function name="ListAll">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="RunConf"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="List">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="pointer">
              <type type="ident" def="RunConf"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Passed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Visit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="linePrinter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Visitor"/>
            </type>
          </resultsList>
        </function>
        <function name="TestName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Failed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Fail">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="FailNow">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Succeed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SucceedNow">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ExpectFailure">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Skip">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetTestLog">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Log">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Logf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Output">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Errorf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatalf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="ident" def="Checker"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Assert">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="ident" def="Checker"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Commentf">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="CommentInterface"/>
          </resultsList>
        </function>
        <function name="CheckCommentString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="comment"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Info">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CheckerInfo"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CheckerInfo"/>
            </type>
          </resultsList>
        </function>
        <function name="Not">
          <recvList/>
          <paramsList>
            <type type="ident" def="Checker"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Checker"/>
          </resultsList>
        </function>
        <function name="Info">
          <recvList>
            <type type="pointer">
              <type type="ident" def="notChecker"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CheckerInfo"/>
            </type>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="notChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="isNilChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="notNilChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="equalsChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="deepEqualsChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="hasLenChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="ident" def="errorMatchesChecker"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="matchesChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="panicsChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="panicMatchesChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fitsTypeChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="implementsChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="PC">
          <recvList>
            <type type="pointer">
              <type type="ident" def="methodType"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uintptr"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="methodType"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteTo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="logger"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MkDir">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="outputWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteCallStarted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="outputWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="WriteCallProblem">
          <recvList>
            <type type="pointer">
              <type type="ident" def="outputWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="WriteCallSuccess">
          <recvList>
            <type type="pointer">
              <type type="ident" def="outputWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="StartTimer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="StopTimer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ResetTimer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetBytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int64"/>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="IsNil"/>
        <name value="NotNil"/>
        <name value="Equals"/>
        <name value="DeepEquals"/>
        <name value="HasLen"/>
        <name value="ErrorMatches"/>
        <name value="Matches"/>
        <name value="Panics"/>
        <name value="PanicMatches"/>
        <name value="FitsTypeOf"/>
        <name value="Implements"/>
      </names>
    </package>
    <package importpath="github.com/motain/gocheck">
      <types>
        <type type="struct" name="C">
          <field type="pointer" name="method">
            <type type="ident" def="methodType"/>
          </field>
          <field type="ident" def="funcKind" name="kind"/>
          <field type="ident" def="funcStatus" name="status"/>
          <field type="pointer" name="logb">
            <type type="ident" def="logger"/>
          </field>
          <field type="selector" name="logw">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="channel" dir="3" name="done">
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </field>
          <field type="ident" def="string" name="reason"/>
          <field type="ident" def="bool" name="mustFail"/>
          <field type="pointer" name="tempDir">
            <type type="ident" def="tempDir"/>
          </field>
          <field type="ident" def="timer" name=""/>
        </type>
        <type type="struct" name="Result">
          <field type="ident" def="int" name="Succeeded"/>
          <field type="ident" def="int" name="Failed"/>
          <field type="ident" def="int" name="Skipped"/>
          <field type="ident" def="int" name="Panicked"/>
          <field type="ident" def="int" name="FixturePanicked"/>
          <field type="ident" def="int" name="ExpectedFailures"/>
          <field type="ident" def="int" name="Missed"/>
          <field type="ident" def="error" name="RunError"/>
        </type>
        <type type="struct" name="RunConf">
          <field type="selector" name="Output">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="ident" def="bool" name="Stream"/>
          <field type="ident" def="bool" name="Verbose"/>
          <field type="ident" def="string" name="Filter"/>
          <field type="ident" def="bool" name="Benchmark"/>
          <field type="selector" name="BenchmarkTime">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
        </type>
        <type name="CommentInterface" type="interface">
          <method name="CheckCommentString">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type name="Checker" type="interface">
          <method name="Info">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="CheckerInfo"/>
              </type>
            </resultsList>
          </method>
          <method name="Check">
            <paramsList>
              <type type="slice">
                <elmtype type="interface"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="string"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="CheckerInfo">
          <field type="ident" def="string" name="Name"/>
          <field type="slice" name="Params">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Suite">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="TestingT">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="testing"/>
                <item value="T"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RunAll">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="RunConf"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="pointer">
              <type type="ident" def="RunConf"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </resultsList>
        </function>
        <function name="ListAll">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="RunConf"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="List">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="pointer">
              <type type="ident" def="RunConf"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Passed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Visit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="linePrinter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Node"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="ast"/>
              <item value="Visitor"/>
            </type>
          </resultsList>
        </function>
        <function name="Failed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Fail">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="FailNow">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Succeed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SucceedNow">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ExpectFailure">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Skip">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetTestLog">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Log">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Logf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Output">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Errorf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatalf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="ident" def="Checker"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Assert">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="ident" def="Checker"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PC">
          <recvList>
            <type type="pointer">
              <type type="ident" def="methodType"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uintptr"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="methodType"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteTo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="logger"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MkDir">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="outputWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteCallStarted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="outputWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="WriteCallProblem">
          <recvList>
            <type type="pointer">
              <type type="ident" def="outputWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="WriteCallSuccess">
          <recvList>
            <type type="pointer">
              <type type="ident" def="outputWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Commentf">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="CommentInterface"/>
          </resultsList>
        </function>
        <function name="CheckCommentString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="comment"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Info">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CheckerInfo"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CheckerInfo"/>
            </type>
          </resultsList>
        </function>
        <function name="Not">
          <recvList/>
          <paramsList>
            <type type="ident" def="Checker"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Checker"/>
          </resultsList>
        </function>
        <function name="Info">
          <recvList>
            <type type="pointer">
              <type type="ident" def="notChecker"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CheckerInfo"/>
            </type>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="notChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="isNilChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="notNilChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="equalsChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="deepEqualsChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="hasLenChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="ident" def="errorMatchesChecker"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="matchesChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="panicsChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="panicMatchesChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fitsTypeChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Check">
          <recvList>
            <type type="pointer">
              <type type="ident" def="implementsChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="StartTimer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="StopTimer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ResetTimer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetBytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="C"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int64"/>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="IsNil"/>
        <name value="NotNil"/>
        <name value="Equals"/>
        <name value="DeepEquals"/>
        <name value="HasLen"/>
        <name value="ErrorMatches"/>
        <name value="Matches"/>
        <name value="Panics"/>
        <name value="PanicMatches"/>
        <name value="FitsTypeOf"/>
        <name value="Implements"/>
      </names>
    </package>
  </packages>
  <imports>
    <import path="bufio"/>
    <import path="flag"/>
    <import path="fmt"/>
    <import path="os"/>
    <import path="testing"/>
    <import path="time"/>
    <import path="bytes"/>
    <import path="go/ast"/>
    <import path="go/parser"/>
    <import path="go/printer"/>
    <import path="go/token"/>
    <import path="strings"/>
    <import path="reflect"/>
    <import path="regexp"/>
    <import path="errors"/>
    <import path="io"/>
    <import path="math/rand"/>
    <import path="path"/>
    <import path="path/filepath"/>
    <import path="runtime"/>
    <import path="strconv"/>
    <import path="sync"/>
  </imports>
</project>
