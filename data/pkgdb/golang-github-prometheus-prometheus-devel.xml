<?xml version='1.0' encoding='ASCII'?>
<project ipprefix="" commit="commit" nvr="golang-github-prometheus-prometheus-0.15.0-1.fc24">
  <packages>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/Sirupsen/logrus/hooks/bugsnag">
      <types>
        <type type="struct" name="ErrBugsnagSendFailed">
          <field type="ident" def="error" name="err"/>
        </type>
      </types>
      <functions>
        <function name="Error">
          <recvList>
            <type type="ident" def="ErrBugsnagSendFailed"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewBugsnagHook">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="bugsnagHook"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Fire">
          <recvList>
            <type type="pointer">
              <type type="ident" def="bugsnagHook"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="logrus"/>
                <item value="Entry"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Levels">
          <recvList>
            <type type="pointer">
              <type type="ident" def="bugsnagHook"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="logrus"/>
                <item value="Level"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ErrBugsnagUnconfigured"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/web">
      <types>
        <type type="struct" name="Handler">
          <field type="pointer" name="ruleManager">
            <type type="selector">
              <prefix value="rules"/>
              <item value="Manager"/>
            </type>
          </field>
          <field type="pointer" name="queryEngine">
            <type type="selector">
              <prefix value="promql"/>
              <item value="Engine"/>
            </type>
          </field>
          <field type="pointer" name="apiV1">
            <type type="selector">
              <prefix value="v1"/>
              <item value="API"/>
            </type>
          </field>
          <field type="pointer" name="apiLegacy">
            <type type="selector">
              <prefix value="legacy"/>
              <item value="API"/>
            </type>
          </field>
          <field type="pointer" name="federation">
            <type type="ident" def="Federation"/>
          </field>
          <field type="pointer" name="router">
            <type type="selector">
              <prefix value="route"/>
              <item value="Router"/>
            </type>
          </field>
          <field type="channel" dir="3" name="quitCh">
            <type type="struct" name=""/>
          </field>
          <field type="pointer" name="options">
            <type type="ident" def="Options"/>
          </field>
          <field type="pointer" name="statusInfo">
            <type type="ident" def="PrometheusStatus"/>
          </field>
          <field type="selector" name="muAlerts">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
        </type>
        <type type="struct" name="PrometheusStatus">
          <field type="selector" name="Birth">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="map" name="Flags">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
          <field type="ident" def="string" name="Config"/>
          <field type="func" name="TargetPools">
            <paramsList/>
            <resultsList>
              <type type="map">
                <keytype type="ident" def="string"/>
                <valtype type="slice">
                  <elmtype type="pointer">
                    <type type="selector">
                      <prefix value="retrieval"/>
                      <item value="Target"/>
                    </type>
                  </elmtype>
                </valtype>
              </type>
            </resultsList>
          </field>
          <field type="func" name="Rules">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="selector">
                  <prefix value="rules"/>
                  <item value="Rule"/>
                </elmtype>
              </type>
            </resultsList>
          </field>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
        </type>
        <type type="struct" name="Options">
          <field type="ident" def="string" name="ListenAddress"/>
          <field type="pointer" name="ExternalURL">
            <type type="selector">
              <prefix value="url"/>
              <item value="URL"/>
            </type>
          </field>
          <field type="ident" def="string" name="MetricsPath"/>
          <field type="ident" def="bool" name="UseLocalAssets"/>
          <field type="ident" def="string" name="UserAssetsPath"/>
          <field type="ident" def="string" name="ConsoleTemplatesPath"/>
          <field type="ident" def="string" name="ConsoleLibrariesPath"/>
          <field type="ident" def="bool" name="EnableQuit"/>
        </type>
        <type type="struct" name="AlertStatus">
          <field type="slice" name="AlertingRules">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="rules"/>
                <item value="AlertingRule"/>
              </type>
            </elmtype>
          </field>
          <field type="map" name="AlertStateToRowClass">
            <keytype type="selector">
              <prefix value="rules"/>
              <item value="AlertState"/>
            </keytype>
            <valtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="Federation">
          <field type="selector" name="Storage">
            <prefix value="local"/>
            <item value="Storage"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="ApplyConfig">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PrometheusStatus"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="config"/>
                <item value="Config"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="local"/>
              <item value="Storage"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="promql"/>
                <item value="Engine"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="rules"/>
                <item value="Manager"/>
              </type>
            </type>
            <type type="pointer">
              <type type="ident" def="PrometheusStatus"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Handler"/>
            </type>
          </resultsList>
        </function>
        <function name="Quit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Handler"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="channel" dir="2">
              <type type="struct" name=""/>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Handler"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="byAlertStateSorter"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byAlertStateSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byAlertStateSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ServeHTTP">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Federation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/Sirupsen/logrus/hooks/syslog">
      <types>
        <type type="struct" name="SyslogHook">
          <field type="pointer" name="Writer">
            <type type="selector">
              <prefix value="syslog"/>
              <item value="Writer"/>
            </type>
          </field>
          <field type="ident" def="string" name="SyslogNetwork"/>
          <field type="ident" def="string" name="SyslogRaddr"/>
        </type>
      </types>
      <functions>
        <function name="NewSyslogHook">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="syslog"/>
              <item value="Priority"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="SyslogHook"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Fire">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SyslogHook"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="logrus"/>
                <item value="Entry"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Levels">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SyslogHook"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="logrus"/>
                <item value="Level"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/util/flock">
      <types>
        <type name="Releaser" type="interface">
          <method name="Release">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="windowsLock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="unixLock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="unixLock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="plan9Lock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Releaser"/>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/bitbucket.org/ww/goautoneg">
      <types>
        <type type="struct" name="Accept">
          <field type="ident" def="string" name="Type"/>
          <field type="ident" def="string" name="SubType"/>
          <field type="ident" def="float64" name="Q"/>
          <field type="map" name="Params">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Len">
          <recvList>
            <type type="ident" def="accept_slice"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="accept_slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="accept_slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ParseAccept">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Accept"/>
            </type>
          </resultsList>
        </function>
        <function name="Negotiate">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/util/testutil">
      <types>
        <type name="Closer" type="interface">
          <method name="Close">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type name="TemporaryDirectory" type="interface">
          <method name="Path">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type name="T" type="interface">
          <method name="Fatal">
            <paramsList>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Fatalf">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
      </types>
      <functions>
        <function name="ErrorEqual">
          <recvList/>
          <paramsList>
            <type type="ident" def="error"/>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="nilCloser"/>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="callbackCloser"/>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="NewCallbackCloser">
          <recvList/>
          <paramsList>
            <type type="func">
              <paramsList/>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="callbackCloser"/>
            </type>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="temporaryDirectory"/>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Path">
          <recvList>
            <type type="ident" def="temporaryDirectory"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewTemporaryDirectory">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="T"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="TemporaryDirectory"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="NilCloser"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/samuel/go-zookeeper/zk">
      <types>
        <type type="struct" name="ACL">
          <field type="ident" def="int32" name="Perms"/>
          <field type="ident" def="string" name="Scheme"/>
          <field type="ident" def="string" name="ID"/>
        </type>
        <type type="struct" name="Stat">
          <field type="ident" def="int64" name="Czxid"/>
          <field type="ident" def="int64" name="Mzxid"/>
          <field type="ident" def="int64" name="Ctime"/>
          <field type="ident" def="int64" name="Mtime"/>
          <field type="ident" def="int32" name="Version"/>
          <field type="ident" def="int32" name="Cversion"/>
          <field type="ident" def="int32" name="Aversion"/>
          <field type="ident" def="int64" name="EphemeralOwner"/>
          <field type="ident" def="int32" name="DataLength"/>
          <field type="ident" def="int32" name="NumChildren"/>
          <field type="ident" def="int64" name="Pzxid"/>
        </type>
        <type type="struct" name="ServerClient">
          <field type="ident" def="int64" name="Queued"/>
          <field type="ident" def="int64" name="Received"/>
          <field type="ident" def="int64" name="Sent"/>
          <field type="ident" def="int64" name="SessionID"/>
          <field type="ident" def="int64" name="Lcxid"/>
          <field type="ident" def="int64" name="Lzxid"/>
          <field type="ident" def="int32" name="Timeout"/>
          <field type="ident" def="int32" name="LastLatency"/>
          <field type="ident" def="int32" name="MinLatency"/>
          <field type="ident" def="int32" name="AvgLatency"/>
          <field type="ident" def="int32" name="MaxLatency"/>
          <field type="selector" name="Established">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="selector" name="LastResponse">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="string" name="Addr"/>
          <field type="ident" def="string" name="LastOperation"/>
          <field type="ident" def="error" name="Error"/>
        </type>
        <type type="struct" name="ServerClients">
          <field type="slice" name="Clients">
            <elmtype type="pointer">
              <type type="ident" def="ServerClient"/>
            </elmtype>
          </field>
          <field type="ident" def="error" name="Error"/>
        </type>
        <type type="struct" name="ServerStats">
          <field type="ident" def="int64" name="Sent"/>
          <field type="ident" def="int64" name="Received"/>
          <field type="ident" def="int64" name="NodeCount"/>
          <field type="ident" def="int64" name="MinLatency"/>
          <field type="ident" def="int64" name="AvgLatency"/>
          <field type="ident" def="int64" name="MaxLatency"/>
          <field type="ident" def="int64" name="Connections"/>
          <field type="ident" def="int64" name="Outstanding"/>
          <field type="ident" def="int32" name="Epoch"/>
          <field type="ident" def="int32" name="Counter"/>
          <field type="selector" name="BuildTime">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="Mode" name="Mode"/>
          <field type="ident" def="string" name="Version"/>
          <field type="ident" def="error" name="Error"/>
        </type>
        <type type="struct" name="PathVersionRequest">
          <field type="ident" def="string" name="Path"/>
          <field type="ident" def="int32" name="Version"/>
        </type>
        <type name="CheckVersionRequest" type="ident">
          <type type="ident" def="PathVersionRequest"/>
        </type>
        <type type="struct" name="CreateRequest">
          <field type="ident" def="string" name="Path"/>
          <field type="slice" name="Data">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="Acl">
            <elmtype type="ident" def="ACL"/>
          </field>
          <field type="ident" def="int32" name="Flags"/>
        </type>
        <type name="DeleteRequest" type="ident">
          <type type="ident" def="PathVersionRequest"/>
        </type>
        <type type="struct" name="SetDataRequest">
          <field type="ident" def="string" name="Path"/>
          <field type="slice" name="Data">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="int32" name="Version"/>
        </type>
        <type name="ErrMissingServerConfigField" type="ident">
          <type type="ident" def="string"/>
        </type>
        <type type="struct" name="ServerConfigServer">
          <field type="ident" def="int" name="ID"/>
          <field type="ident" def="string" name="Host"/>
          <field type="ident" def="int" name="PeerPort"/>
          <field type="ident" def="int" name="LeaderElectionPort"/>
        </type>
        <type type="struct" name="ServerConfig">
          <field type="ident" def="int" name="TickTime"/>
          <field type="ident" def="int" name="InitLimit"/>
          <field type="ident" def="int" name="SyncLimit"/>
          <field type="ident" def="string" name="DataDir"/>
          <field type="ident" def="int" name="ClientPort"/>
          <field type="ident" def="int" name="AutoPurgeSnapRetainCount"/>
          <field type="ident" def="int" name="AutoPurgePurgeInterval"/>
          <field type="slice" name="Servers">
            <elmtype type="ident" def="ServerConfigServer"/>
          </field>
        </type>
        <type type="struct" name="Server">
          <field type="ident" def="string" name="JarPath"/>
          <field type="ident" def="string" name="ConfigPath"/>
          <field type="selector" name="Stdout">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="selector" name="Stderr">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="pointer" name="cmd">
            <type type="selector">
              <prefix value="exec"/>
              <item value="Cmd"/>
            </type>
          </field>
        </type>
        <type type="struct" name="TestServer">
          <field type="ident" def="int" name="Port"/>
          <field type="ident" def="string" name="Path"/>
          <field type="pointer" name="Srv">
            <type type="ident" def="Server"/>
          </field>
        </type>
        <type type="struct" name="TestCluster">
          <field type="ident" def="string" name="Path"/>
          <field type="slice" name="Servers">
            <elmtype type="ident" def="TestServer"/>
          </field>
        </type>
        <type type="struct" name="Lock">
          <field type="pointer" name="c">
            <type type="ident" def="Conn"/>
          </field>
          <field type="ident" def="string" name="path"/>
          <field type="slice" name="acl">
            <elmtype type="ident" def="ACL"/>
          </field>
          <field type="ident" def="string" name="lockPath"/>
          <field type="ident" def="int" name="seq"/>
        </type>
        <type name="State" type="ident">
          <type type="ident" def="int32"/>
        </type>
        <type name="ErrCode" type="ident">
          <type type="ident" def="int32"/>
        </type>
        <type name="EventType" type="ident">
          <type type="ident" def="int32"/>
        </type>
        <type name="Mode" type="ident">
          <type type="ident" def="uint8"/>
        </type>
        <type name="Dialer" type="func">
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Conn"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </type>
        <type name="Logger" type="interface">
          <method name="Printf">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="Conn">
          <field type="ident" def="int64" name="lastZxid"/>
          <field type="ident" def="int64" name="sessionID"/>
          <field type="ident" def="State" name="state"/>
          <field type="ident" def="uint32" name="xid"/>
          <field type="ident" def="int32" name="timeout"/>
          <field type="slice" name="passwd">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="Dialer" name="dialer"/>
          <field type="slice" name="servers">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="int" name="serverIndex"/>
          <field type="ident" def="int" name="lastServerIndex"/>
          <field type="selector" name="conn">
            <prefix value="net"/>
            <item value="Conn"/>
          </field>
          <field type="channel" dir="3" name="eventChan">
            <type type="ident" def="Event"/>
          </field>
          <field type="channel" dir="3" name="shouldQuit">
            <type type="struct" name=""/>
          </field>
          <field type="selector" name="pingInterval">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="recvTimeout">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="connectTimeout">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="channel" dir="3" name="sendChan">
            <type type="pointer">
              <type type="ident" def="request"/>
            </type>
          </field>
          <field type="map" name="requests">
            <keytype type="ident" def="int32"/>
            <valtype type="pointer">
              <type type="ident" def="request"/>
            </valtype>
          </field>
          <field type="selector" name="requestsLock">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="map" name="watchers">
            <keytype type="ident" def="watchPathType"/>
            <valtype type="slice">
              <elmtype type="channel" dir="3">
                <type type="ident" def="Event"/>
              </elmtype>
            </valtype>
          </field>
          <field type="selector" name="watchersLock">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="selector" name="reconnectDelay">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="Logger" name="logger"/>
        </type>
        <type type="struct" name="Event">
          <field type="ident" def="EventType" name="Type"/>
          <field type="ident" def="State" name="State"/>
          <field type="ident" def="string" name="Path"/>
          <field type="ident" def="error" name="Err"/>
          <field type="ident" def="string" name="Server"/>
        </type>
        <type type="struct" name="MultiResponse">
          <field type="pointer" name="Stat">
            <type type="ident" def="Stat"/>
          </field>
          <field type="ident" def="string" name="String"/>
        </type>
      </types>
      <functions>
        <function name="AuthACL">
          <recvList/>
          <paramsList>
            <type type="ident" def="int32"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="ACL"/>
            </type>
          </resultsList>
        </function>
        <function name="WorldACL">
          <recvList/>
          <paramsList>
            <type type="ident" def="int32"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="ACL"/>
            </type>
          </resultsList>
        </function>
        <function name="DigestACL">
          <recvList/>
          <paramsList>
            <type type="ident" def="int32"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="ACL"/>
            </type>
          </resultsList>
        </function>
        <function name="FormatServers">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="StartTracer">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Printf">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Encode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="multiRequest"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Decode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="multiRequest"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Decode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="multiResponse"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="ErrMissingServerConfigField"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Marshall">
          <recvList>
            <type type="ident" def="ServerConfig"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Start">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="StartTestCluster">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="TestCluster"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Connect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TestCluster"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ConnectAll">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TestCluster"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
            <type type="channel" dir="2">
              <type type="ident" def="Event"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ConnectAllTimeout">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TestCluster"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
            <type type="channel" dir="2">
              <type type="ident" def="Event"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TestCluster"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewLock">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="ACL"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Lock"/>
            </type>
          </resultsList>
        </function>
        <function name="Lock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Lock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Unlock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Lock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FLWSrvr">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="ServerStats"/>
              </elmtype>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="FLWRuok">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="FLWCons">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="ServerClients"/>
              </elmtype>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="State"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="EventType"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Mode"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Connect">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
            <type type="channel" dir="2">
              <type type="ident" def="Event"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ConnectWithDialer">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="ident" def="Dialer"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
            <type type="channel" dir="2">
              <type type="ident" def="Event"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="State">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="State"/>
          </resultsList>
        </function>
        <function name="SetLogger">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Logger"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AddAuth">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Children">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Stat"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ChildrenW">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Stat"/>
            </type>
            <type type="channel" dir="2">
              <type type="ident" def="Event"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Stat"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetW">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Stat"/>
            </type>
            <type type="channel" dir="2">
              <type type="ident" def="Event"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Set">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="int32"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Stat"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Create">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="int32"/>
            <type type="slice">
              <elmtype type="ident" def="ACL"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CreateProtectedEphemeralSequential">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="ACL"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="int32"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Exists">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="pointer">
              <type type="ident" def="Stat"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ExistsW">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="pointer">
              <type type="ident" def="Stat"/>
            </type>
            <type type="channel" dir="2">
              <type type="ident" def="Event"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetACL">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="ACL"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Stat"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetACL">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="ACL"/>
            </type>
            <type type="ident" def="int32"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Stat"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sync">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Multi">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="MultiResponse"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ErrUnhandledFieldType"/>
        <name value="ErrPtrExpected"/>
        <name value="ErrShortBuffer"/>
        <name value="DefaultServerTickTime"/>
        <name value="DefaultServerInitLimit"/>
        <name value="DefaultServerSyncLimit"/>
        <name value="DefaultServerAutoPurgeSnapRetainCount"/>
        <name value="DefaultPeerPort"/>
        <name value="DefaultLeaderElectionPort"/>
        <name value="ErrDeadlock"/>
        <name value="ErrNotLocked"/>
        <name value="DefaultPort"/>
        <name value="EventNodeCreated"/>
        <name value="EventNodeDeleted"/>
        <name value="EventNodeDataChanged"/>
        <name value="EventNodeChildrenChanged"/>
        <name value="EventSession"/>
        <name value="EventNotWatching"/>
        <name value="StateUnknown"/>
        <name value="StateDisconnected"/>
        <name value="StateConnecting"/>
        <name value="StateSyncConnected"/>
        <name value="StateAuthFailed"/>
        <name value="StateConnectedReadOnly"/>
        <name value="StateSaslAuthenticated"/>
        <name value="StateExpired"/>
        <name value="StateConnected"/>
        <name value="StateHasSession"/>
        <name value="FlagEphemeral"/>
        <name value="FlagSequence"/>
        <name value="ErrConnectionClosed"/>
        <name value="ErrUnknown"/>
        <name value="ErrAPIError"/>
        <name value="ErrNoNode"/>
        <name value="ErrNoAuth"/>
        <name value="ErrBadVersion"/>
        <name value="ErrNoChildrenForEphemerals"/>
        <name value="ErrNodeExists"/>
        <name value="ErrNotEmpty"/>
        <name value="ErrSessionExpired"/>
        <name value="ErrInvalidACL"/>
        <name value="ErrAuthFailed"/>
        <name value="ErrClosing"/>
        <name value="ErrNothing"/>
        <name value="ErrSessionMoved"/>
        <name value="PermRead"/>
        <name value="PermWrite"/>
        <name value="PermCreate"/>
        <name value="PermDelete"/>
        <name value="PermAdmin"/>
        <name value="PermAll"/>
        <name value="ModeUnknown"/>
        <name value="ModeLeader"/>
        <name value="ModeFollower"/>
        <name value="ModeStandalone"/>
        <name value="ErrNoServer"/>
        <name value="ErrInvalidPath"/>
        <name value="DefaultLogger"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/syndtr/goleveldb/leveldb">
      <types>
        <type type="struct" name="ErrManifestCorrupted">
          <field type="ident" def="string" name="Field"/>
          <field type="ident" def="string" name="Reason"/>
        </type>
        <type type="struct" name="ErrIkeyCorrupted">
          <field type="slice" name="Ikey">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="string" name="Reason"/>
        </type>
        <type name="Reader" type="interface">
          <method name="Get">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="pointer">
                <type type="selector">
                  <prefix value="opt"/>
                  <item value="ReadOptions"/>
                </type>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="NewIterator">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="util"/>
                  <item value="Range"/>
                </type>
              </type>
              <type type="pointer">
                <type type="selector">
                  <prefix value="opt"/>
                  <item value="ReadOptions"/>
                </type>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="iterator"/>
                <item value="Iterator"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="Sizes" type="slice">
          <elmtype type="ident" def="uint64"/>
        </type>
        <type type="struct" name="Snapshot">
          <field type="pointer" name="db">
            <type type="ident" def="DB"/>
          </field>
          <field type="pointer" name="elem">
            <type type="ident" def="snapshotElement"/>
          </field>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="ident" def="bool" name="released"/>
        </type>
        <type type="struct" name="DB">
          <field type="ident" def="uint64" name="seq"/>
          <field type="pointer" name="s">
            <type type="ident" def="session"/>
          </field>
          <field type="selector" name="memMu">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="channel" dir="3" name="memPool">
            <type type="pointer">
              <type type="selector">
                <prefix value="memdb"/>
                <item value="DB"/>
              </type>
            </type>
          </field>
          <field type="pointer" name="mem">
            <type type="ident" def="memDB"/>
          </field>
          <field type="pointer" name="frozenMem">
            <type type="ident" def="memDB"/>
          </field>
          <field type="pointer" name="journal">
            <type type="selector">
              <prefix value="journal"/>
              <item value="Writer"/>
            </type>
          </field>
          <field type="selector" name="journalWriter">
            <prefix value="storage"/>
            <item value="Writer"/>
          </field>
          <field type="selector" name="journalFile">
            <prefix value="storage"/>
            <item value="File"/>
          </field>
          <field type="selector" name="frozenJournalFile">
            <prefix value="storage"/>
            <item value="File"/>
          </field>
          <field type="ident" def="uint64" name="frozenSeq"/>
          <field type="selector" name="snapsMu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="pointer" name="snapsList">
            <type type="selector">
              <prefix value="list"/>
              <item value="List"/>
            </type>
          </field>
          <field type="ident" def="int32" name="aliveSnaps"/>
          <field type="ident" def="int32" name="aliveIters"/>
          <field type="channel" dir="3" name="writeC">
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </field>
          <field type="channel" dir="3" name="writeMergedC">
            <type type="ident" def="bool"/>
          </field>
          <field type="channel" dir="3" name="writeLockC">
            <type type="struct" name=""/>
          </field>
          <field type="channel" dir="3" name="writeAckC">
            <type type="ident" def="error"/>
          </field>
          <field type="selector" name="writeDelay">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="int" name="writeDelayN"/>
          <field type="channel" dir="3" name="journalC">
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </field>
          <field type="channel" dir="3" name="journalAckC">
            <type type="ident" def="error"/>
          </field>
          <field type="channel" dir="3" name="tcompCmdC">
            <type type="ident" def="cCmd"/>
          </field>
          <field type="channel" dir="3" name="tcompPauseC">
            <type type="channel" dir="1">
              <type type="struct" name=""/>
            </type>
          </field>
          <field type="channel" dir="3" name="mcompCmdC">
            <type type="ident" def="cCmd"/>
          </field>
          <field type="channel" dir="3" name="compErrC">
            <type type="ident" def="error"/>
          </field>
          <field type="channel" dir="3" name="compPerErrC">
            <type type="ident" def="error"/>
          </field>
          <field type="channel" dir="3" name="compErrSetC">
            <type type="ident" def="error"/>
          </field>
          <field type="ident" def="bool" name="compWriteLocking"/>
          <field type="slice" name="compStats">
            <elmtype type="ident" def="cStats"/>
          </field>
          <field type="selector" name="closeW">
            <prefix value="sync"/>
            <item value="WaitGroup"/>
          </field>
          <field type="channel" dir="3" name="closeC">
            <type type="struct" name=""/>
          </field>
          <field type="ident" def="uint32" name="closed"/>
          <field type="selector" name="closer">
            <prefix value="io"/>
            <item value="Closer"/>
          </field>
        </type>
        <type type="struct" name="ErrBatchCorrupted">
          <field type="ident" def="string" name="Reason"/>
        </type>
        <type name="BatchReplay" type="interface">
          <method name="Put">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Delete">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="Batch">
          <field type="slice" name="data">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="int" name="rLen"/>
          <field type="ident" def="int" name="bLen"/>
          <field type="ident" def="uint64" name="seq"/>
          <field type="ident" def="bool" name="sync"/>
        </type>
      </types>
      <functions>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="versionReleaser"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="files"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="files"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="files"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="tFiles"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="tFiles"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Search">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tFilesArrayIndexer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tFilesArrayIndexer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="iterator"/>
              <item value="Iterator"/>
            </type>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tFilesSortByKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tFilesSortByNum"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Drop">
          <recvList>
            <type type="ident" def="dropper"/>
          </recvList>
          <paramsList>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ErrManifestCorrupted"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetCompactionExpandLimit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="cachedOptions"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionGPOverlaps">
          <recvList>
            <type type="pointer">
              <type type="ident" def="cachedOptions"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionSourceLimit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="cachedOptions"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionTableSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="cachedOptions"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionTotalSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="cachedOptions"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ErrIkeyCorrupted"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="kType"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="iKey"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Contains">
          <recvList>
            <type type="ident" def="iFilter"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewGenerator">
          <recvList>
            <type type="ident" def="iFilter"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="filter"/>
              <item value="FilterGenerator"/>
            </type>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="ident" def="iFilterGenerator"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="WriteOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="WriteOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="WriteOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CompactRange">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="util"/>
              <item value="Range"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetReadOnly">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sum">
          <recvList>
            <type type="ident" def="Sizes"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Snapshot"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Snapshot"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Has">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Snapshot"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewIterator">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Snapshot"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="util"/>
                <item value="Range"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="iterator"/>
              <item value="Iterator"/>
            </type>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Snapshot"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memdbReleaser"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="First">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Last">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetReleaser">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="util"/>
              <item value="Releaser"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Open">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="Storage"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="Options"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="OpenFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="Options"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Recover">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="Storage"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="Options"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RecoverFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="Options"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Has">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewIterator">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="util"/>
                <item value="Range"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="iterator"/>
              <item value="Iterator"/>
            </type>
          </resultsList>
        </function>
        <function name="GetSnapshot">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Snapshot"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetProperty">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SizeOf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="util"/>
                <item value="Range"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Sizes"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="pointer">
              <type type="ident" def="iComparer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Compare">
          <recvList>
            <type type="pointer">
              <type type="ident" def="iComparer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Separator">
          <recvList>
            <type type="pointer">
              <type type="ident" def="iComparer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Successor">
          <recvList>
            <type type="pointer">
              <type type="ident" def="iComparer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ErrBatchCorrupted"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Dump">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Load">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Replay">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="BatchReplay"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="ErrNotFound"/>
        <name value="ErrReadOnly"/>
        <name value="ErrSnapshotReleased"/>
        <name value="ErrIterReleased"/>
        <name value="ErrClosed"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/retrieval/discovery">
      <types>
        <type type="struct" name="ZookeeperLogger"/>
        <type type="struct" name="ServersetDiscovery">
          <field type="pointer" name="conf">
            <type type="selector">
              <prefix value="config"/>
              <item value="ServersetSDConfig"/>
            </type>
          </field>
          <field type="pointer" name="conn">
            <type type="selector">
              <prefix value="zk"/>
              <item value="Conn"/>
            </type>
          </field>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="map" name="sources">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="selector">
                <prefix value="config"/>
                <item value="TargetGroup"/>
              </type>
            </valtype>
          </field>
          <field type="pointer" name="sdUpdates">
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="selector">
                  <prefix value="config"/>
                  <item value="TargetGroup"/>
                </type>
              </type>
            </type>
          </field>
          <field type="channel" dir="3" name="updates">
            <type type="ident" def="zookeeperTreeCacheEvent"/>
          </field>
          <field type="channel" dir="3" name="runDone">
            <type type="struct" name=""/>
          </field>
          <field type="pointer" name="treeCache">
            <type type="ident" def="zookeeperTreeCache"/>
          </field>
        </type>
        <type type="struct" name="FileDiscovery">
          <field type="slice" name="paths">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="pointer" name="watcher">
            <type type="selector">
              <prefix value="fsnotify"/>
              <item value="Watcher"/>
            </type>
          </field>
          <field type="selector" name="interval">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="channel" dir="3" name="done">
            <type type="struct" name=""/>
          </field>
          <field type="map" name="lastRefresh">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="int"/>
          </field>
        </type>
        <type type="struct" name="DNSDiscovery">
          <field type="slice" name="names">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="channel" dir="3" name="done">
            <type type="struct" name=""/>
          </field>
          <field type="pointer" name="ticker">
            <type type="selector">
              <prefix value="time"/>
              <item value="Ticker"/>
            </type>
          </field>
          <field type="selector" name="m">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
        </type>
        <type type="struct" name="ConsulDiscovery">
          <field type="pointer" name="client">
            <type type="selector">
              <prefix value="consul"/>
              <item value="Client"/>
            </type>
          </field>
          <field type="pointer" name="clientConf">
            <type type="selector">
              <prefix value="consul"/>
              <item value="Config"/>
            </type>
          </field>
          <field type="ident" def="string" name="tagSeparator"/>
          <field type="map" name="scrapedServices">
            <keytype type="ident" def="string"/>
            <valtype type="struct" name=""/>
          </field>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="map" name="services">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="consulService"/>
            </valtype>
          </field>
          <field type="channel" dir="3" name="runDone">
            <type type="struct" name=""/>
          </field>
          <field type="channel" dir="3" name="srvsDone">
            <type type="struct" name=""/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Printf">
          <recvList>
            <type type="ident" def="ZookeeperLogger"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewServersetDiscovery">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="config"/>
                <item value="ServersetSDConfig"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="ServersetDiscovery"/>
            </type>
          </resultsList>
        </function>
        <function name="Sources">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ServersetDiscovery"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ServersetDiscovery"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="selector">
                  <prefix value="config"/>
                  <item value="TargetGroup"/>
                </type>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ServersetDiscovery"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="NewZookeeperTreeCache">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="zk"/>
                <item value="Conn"/>
              </type>
            </type>
            <type type="ident" def="string"/>
            <type type="channel" dir="3">
              <type type="ident" def="zookeeperTreeCacheEvent"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="zookeeperTreeCache"/>
            </type>
          </resultsList>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="zookeeperTreeCache"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="NewFileDiscovery">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="config"/>
                <item value="FileSDConfig"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="FileDiscovery"/>
            </type>
          </resultsList>
        </function>
        <function name="Sources">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FileDiscovery"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FileDiscovery"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="selector">
                  <prefix value="config"/>
                  <item value="TargetGroup"/>
                </type>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FileDiscovery"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="NewDNSDiscovery">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="config"/>
                <item value="DNSSDConfig"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="DNSDiscovery"/>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DNSDiscovery"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="selector">
                  <prefix value="config"/>
                  <item value="TargetGroup"/>
                </type>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DNSDiscovery"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Sources">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DNSDiscovery"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="NewConsulDiscovery">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="config"/>
                <item value="ConsulSDConfig"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="ConsulDiscovery"/>
            </type>
          </resultsList>
        </function>
        <function name="Sources">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ConsulDiscovery"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ConsulDiscovery"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="selector">
                  <prefix value="config"/>
                  <item value="TargetGroup"/>
                </type>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ConsulDiscovery"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="FileSDFilepathLabel"/>
        <name value="DNSNameLabel"/>
        <name value="ConsulAddressLabel"/>
        <name value="ConsulNodeLabel"/>
        <name value="ConsulTagsLabel"/>
        <name value="ConsulServiceLabel"/>
        <name value="ConsulServiceAddressLabel"/>
        <name value="ConsulServicePortLabel"/>
        <name value="ConsulDCLabel"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/golang/protobuf/proto/proto3_proto">
      <types>
        <type name="Message_Humour" type="ident">
          <type type="ident" def="int32"/>
        </type>
        <type type="struct" name="Message">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="Message_Humour" name="Hilarity"/>
          <field type="ident" def="uint32" name="HeightInCm"/>
          <field type="slice" name="Data">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="int64" name="ResultCount"/>
          <field type="ident" def="bool" name="TrueScotsman"/>
          <field type="ident" def="float32" name="Score"/>
          <field type="slice" name="Key">
            <elmtype type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="Nested">
            <type type="ident" def="Nested"/>
          </field>
          <field type="map" name="Terrain">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="Nested"/>
            </valtype>
          </field>
          <field type="pointer" name="Proto2Field">
            <type type="selector">
              <prefix value="testdata"/>
              <item value="SubDefaults"/>
            </type>
          </field>
          <field type="map" name="Proto2Value">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="selector">
                <prefix value="testdata"/>
                <item value="SubDefaults"/>
              </type>
            </valtype>
          </field>
        </type>
        <type type="struct" name="Nested">
          <field type="ident" def="string" name="Bunny"/>
        </type>
        <type type="struct" name="MessageWithMap">
          <field type="map" name="ByteMapping">
            <keytype type="ident" def="bool"/>
            <valtype type="slice">
              <elmtype type="ident" def="byte"/>
            </valtype>
          </field>
        </type>
      </types>
      <functions>
        <function name="String">
          <recvList>
            <type type="ident" def="Message_Humour"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Message"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Message"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetNested">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Message"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Nested"/>
            </type>
          </resultsList>
        </function>
        <function name="GetTerrain">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Message"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="pointer">
                <type type="ident" def="Nested"/>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="GetProto2Field">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Message"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="testdata"/>
                <item value="SubDefaults"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="GetProto2Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Message"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="pointer">
                <type type="selector">
                  <prefix value="testdata"/>
                  <item value="SubDefaults"/>
                </type>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Nested"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Nested"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageWithMap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageWithMap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetByteMapping">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageWithMap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="bool"/>
              <valtype type="slice">
                <elmtype type="ident" def="byte"/>
              </valtype>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Message_UNKNOWN"/>
        <name value="Message_PUNS"/>
        <name value="Message_SLAPSTICK"/>
        <name value="Message_BILL_BAILEY"/>
        <name value="Message_Humour_name"/>
        <name value="Message_Humour_value"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/miekg/dns/idn">
      <types/>
      <functions>
        <function name="ToPunycode">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="FromPunycode">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/storage/remote">
      <types>
        <type type="struct" name="Storage">
          <field type="slice" name="queues">
            <elmtype type="pointer">
              <type type="ident" def="StorageQueueManager"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="Options">
          <field type="selector" name="StorageTimeout">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="string" name="InfluxdbURL"/>
          <field type="ident" def="string" name="InfluxdbRetentionPolicy"/>
          <field type="ident" def="string" name="InfluxdbDatabase"/>
          <field type="ident" def="string" name="OpentsdbURL"/>
        </type>
        <type name="StorageClient" type="interface">
          <method name="Store">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Samples"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Name">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="StorageQueueManager">
          <field type="ident" def="StorageClient" name="tsdb"/>
          <field type="channel" dir="3" name="queue">
            <type type="pointer">
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Sample"/>
              </type>
            </type>
          </field>
          <field type="selector" name="pendingSamples">
            <prefix value="clientmodel"/>
            <item value="Samples"/>
          </field>
          <field type="channel" dir="3" name="sendSemaphore">
            <type type="ident" def="bool"/>
          </field>
          <field type="channel" dir="3" name="drained">
            <type type="ident" def="bool"/>
          </field>
          <field type="pointer" name="samplesCount">
            <type type="selector">
              <prefix value="prometheus"/>
              <item value="CounterVec"/>
            </type>
          </field>
          <field type="selector" name="sendLatency">
            <prefix value="prometheus"/>
            <item value="Summary"/>
          </field>
          <field type="selector" name="sendErrors">
            <prefix value="prometheus"/>
            <item value="Counter"/>
          </field>
          <field type="selector" name="queueLength">
            <prefix value="prometheus"/>
            <item value="Gauge"/>
          </field>
          <field type="selector" name="queueCapacity">
            <prefix value="prometheus"/>
            <item value="Metric"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Append">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Sample"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="selector">
                  <prefix value="prometheus"/>
                  <item value="Desc"/>
                </type>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="selector">
                <prefix value="prometheus"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewStorageQueueManager">
          <recvList/>
          <paramsList>
            <type type="ident" def="StorageClient"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="StorageQueueManager"/>
            </type>
          </resultsList>
        </function>
        <function name="Append">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StorageQueueManager"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Sample"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StorageQueueManager"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StorageQueueManager"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="selector">
                  <prefix value="prometheus"/>
                  <item value="Desc"/>
                </type>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StorageQueueManager"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="selector">
                <prefix value="prometheus"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StorageQueueManager"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/web/blob">
      <types>
        <type type="struct" name="Handler"/>
      </types>
      <functions>
        <function name="Name">
          <recvList>
            <type type="ident" def="bindataFileInfo"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Size">
          <recvList>
            <type type="ident" def="bindataFileInfo"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="Mode">
          <recvList>
            <type type="ident" def="bindataFileInfo"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="FileMode"/>
            </type>
          </resultsList>
        </function>
        <function name="ModTime">
          <recvList>
            <type type="ident" def="bindataFileInfo"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </resultsList>
        </function>
        <function name="IsDir">
          <recvList>
            <type type="ident" def="bindataFileInfo"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Sys">
          <recvList>
            <type type="ident" def="bindataFileInfo"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="Asset">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MustAsset">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="AssetInfo">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="FileInfo"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="AssetNames">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="AssetDir">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RestoreAsset">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RestoreAssets">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ServeHTTP">
          <recvList>
            <type type="ident" def="Handler"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="TemplateFiles"/>
        <name value="StaticFiles"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/golang.org/x/net/context">
      <types>
        <type name="Context" type="interface">
          <method name="Deadline">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="time"/>
                <item value="Time"/>
              </type>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Done">
            <paramsList/>
            <resultsList>
              <type type="channel" dir="2">
                <type type="struct" name=""/>
              </type>
            </resultsList>
          </method>
          <method name="Err">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Value">
            <paramsList>
              <type type="interface"/>
            </paramsList>
            <resultsList>
              <type type="interface"/>
            </resultsList>
          </method>
        </type>
        <type name="CancelFunc" type="func">
          <paramsList/>
          <resultsList/>
        </type>
      </types>
      <functions>
        <function name="Deadline">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Done">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="channel" dir="2">
              <type type="struct" name=""/>
            </type>
          </resultsList>
        </function>
        <function name="Err">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Value">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="emptyCtx"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Background">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Context"/>
          </resultsList>
        </function>
        <function name="TODO">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Context"/>
          </resultsList>
        </function>
        <function name="WithCancel">
          <recvList/>
          <paramsList>
            <type type="ident" def="Context"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Context"/>
            <type type="ident" def="CancelFunc"/>
          </resultsList>
        </function>
        <function name="Done">
          <recvList>
            <type type="pointer">
              <type type="ident" def="cancelCtx"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="channel" dir="2">
              <type type="struct" name=""/>
            </type>
          </resultsList>
        </function>
        <function name="Err">
          <recvList>
            <type type="pointer">
              <type type="ident" def="cancelCtx"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="cancelCtx"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="WithDeadline">
          <recvList/>
          <paramsList>
            <type type="ident" def="Context"/>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Context"/>
            <type type="ident" def="CancelFunc"/>
          </resultsList>
        </function>
        <function name="Deadline">
          <recvList>
            <type type="pointer">
              <type type="ident" def="timerCtx"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="timerCtx"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="WithTimeout">
          <recvList/>
          <paramsList>
            <type type="ident" def="Context"/>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Context"/>
            <type type="ident" def="CancelFunc"/>
          </resultsList>
        </function>
        <function name="WithValue">
          <recvList/>
          <paramsList>
            <type type="ident" def="Context"/>
            <type type="interface"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Context"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="valueCtx"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="valueCtx"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Canceled"/>
        <name value="DeadlineExceeded"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/storage">
      <types>
        <type name="SampleAppender" type="interface">
          <method name="Append">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="clientmodel"/>
                  <item value="Sample"/>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type name="Fanout" type="slice">
          <elmtype type="ident" def="SampleAppender"/>
        </type>
      </types>
      <functions>
        <function name="Append">
          <recvList>
            <type type="ident" def="Fanout"/>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Sample"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/hashicorp/consul/api">
      <types>
        <type type="struct" name="Status">
          <field type="pointer" name="c">
            <type type="ident" def="Client"/>
          </field>
        </type>
        <type type="struct" name="SessionEntry">
          <field type="ident" def="uint64" name="CreateIndex"/>
          <field type="ident" def="string" name="ID"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Node"/>
          <field type="slice" name="Checks">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="selector" name="LockDelay">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="string" name="Behavior"/>
          <field type="ident" def="string" name="TTL"/>
        </type>
        <type type="struct" name="Session">
          <field type="pointer" name="c">
            <type type="ident" def="Client"/>
          </field>
        </type>
        <type type="struct" name="Semaphore">
          <field type="pointer" name="c">
            <type type="ident" def="Client"/>
          </field>
          <field type="pointer" name="opts">
            <type type="ident" def="SemaphoreOptions"/>
          </field>
          <field type="ident" def="bool" name="isHeld"/>
          <field type="channel" dir="3" name="sessionRenew">
            <type type="struct" name=""/>
          </field>
          <field type="ident" def="string" name="lockSession"/>
          <field type="selector" name="l">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
        </type>
        <type type="struct" name="SemaphoreOptions">
          <field type="ident" def="string" name="Prefix"/>
          <field type="ident" def="int" name="Limit"/>
          <field type="slice" name="Value">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="string" name="Session"/>
          <field type="ident" def="string" name="SessionName"/>
          <field type="ident" def="string" name="SessionTTL"/>
        </type>
        <type type="struct" name="Raw">
          <field type="pointer" name="c">
            <type type="ident" def="Client"/>
          </field>
        </type>
        <type type="struct" name="Lock">
          <field type="pointer" name="c">
            <type type="ident" def="Client"/>
          </field>
          <field type="pointer" name="opts">
            <type type="ident" def="LockOptions"/>
          </field>
          <field type="ident" def="bool" name="isHeld"/>
          <field type="channel" dir="3" name="sessionRenew">
            <type type="struct" name=""/>
          </field>
          <field type="ident" def="string" name="lockSession"/>
          <field type="selector" name="l">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
        </type>
        <type type="struct" name="LockOptions">
          <field type="ident" def="string" name="Key"/>
          <field type="slice" name="Value">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="string" name="Session"/>
          <field type="ident" def="string" name="SessionName"/>
          <field type="ident" def="string" name="SessionTTL"/>
        </type>
        <type type="struct" name="KVPair">
          <field type="ident" def="string" name="Key"/>
          <field type="ident" def="uint64" name="CreateIndex"/>
          <field type="ident" def="uint64" name="ModifyIndex"/>
          <field type="ident" def="uint64" name="LockIndex"/>
          <field type="ident" def="uint64" name="Flags"/>
          <field type="slice" name="Value">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="string" name="Session"/>
        </type>
        <type name="KVPairs" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="KVPair"/>
          </elmtype>
        </type>
        <type type="struct" name="KV">
          <field type="pointer" name="c">
            <type type="ident" def="Client"/>
          </field>
        </type>
        <type type="struct" name="HealthCheck">
          <field type="ident" def="string" name="Node"/>
          <field type="ident" def="string" name="CheckID"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Status"/>
          <field type="ident" def="string" name="Notes"/>
          <field type="ident" def="string" name="Output"/>
          <field type="ident" def="string" name="ServiceID"/>
          <field type="ident" def="string" name="ServiceName"/>
        </type>
        <type type="struct" name="ServiceEntry">
          <field type="pointer" name="Node">
            <type type="ident" def="Node"/>
          </field>
          <field type="pointer" name="Service">
            <type type="ident" def="AgentService"/>
          </field>
          <field type="slice" name="Checks">
            <elmtype type="pointer">
              <type type="ident" def="HealthCheck"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="Health">
          <field type="pointer" name="c">
            <type type="ident" def="Client"/>
          </field>
        </type>
        <type type="struct" name="Event">
          <field type="pointer" name="c">
            <type type="ident" def="Client"/>
          </field>
        </type>
        <type type="struct" name="UserEvent">
          <field type="ident" def="string" name="ID"/>
          <field type="ident" def="string" name="Name"/>
          <field type="slice" name="Payload">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="string" name="NodeFilter"/>
          <field type="ident" def="string" name="ServiceFilter"/>
          <field type="ident" def="string" name="TagFilter"/>
          <field type="ident" def="int" name="Version"/>
          <field type="ident" def="uint64" name="LTime"/>
        </type>
        <type type="struct" name="Node">
          <field type="ident" def="string" name="Node"/>
          <field type="ident" def="string" name="Address"/>
        </type>
        <type type="struct" name="CatalogService">
          <field type="ident" def="string" name="Node"/>
          <field type="ident" def="string" name="Address"/>
          <field type="ident" def="string" name="ServiceID"/>
          <field type="ident" def="string" name="ServiceName"/>
          <field type="ident" def="string" name="ServiceAddress"/>
          <field type="slice" name="ServiceTags">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="int" name="ServicePort"/>
        </type>
        <type type="struct" name="CatalogNode">
          <field type="pointer" name="Node">
            <type type="ident" def="Node"/>
          </field>
          <field type="map" name="Services">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="AgentService"/>
            </valtype>
          </field>
        </type>
        <type type="struct" name="CatalogRegistration">
          <field type="ident" def="string" name="Node"/>
          <field type="ident" def="string" name="Address"/>
          <field type="ident" def="string" name="Datacenter"/>
          <field type="pointer" name="Service">
            <type type="ident" def="AgentService"/>
          </field>
          <field type="pointer" name="Check">
            <type type="ident" def="AgentCheck"/>
          </field>
        </type>
        <type type="struct" name="CatalogDeregistration">
          <field type="ident" def="string" name="Node"/>
          <field type="ident" def="string" name="Address"/>
          <field type="ident" def="string" name="Datacenter"/>
          <field type="ident" def="string" name="ServiceID"/>
          <field type="ident" def="string" name="CheckID"/>
        </type>
        <type type="struct" name="Catalog">
          <field type="pointer" name="c">
            <type type="ident" def="Client"/>
          </field>
        </type>
        <type type="struct" name="QueryOptions">
          <field type="ident" def="string" name="Datacenter"/>
          <field type="ident" def="bool" name="AllowStale"/>
          <field type="ident" def="bool" name="RequireConsistent"/>
          <field type="ident" def="uint64" name="WaitIndex"/>
          <field type="selector" name="WaitTime">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="string" name="Token"/>
        </type>
        <type type="struct" name="WriteOptions">
          <field type="ident" def="string" name="Datacenter"/>
          <field type="ident" def="string" name="Token"/>
        </type>
        <type type="struct" name="QueryMeta">
          <field type="ident" def="uint64" name="LastIndex"/>
          <field type="selector" name="LastContact">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="bool" name="KnownLeader"/>
          <field type="selector" name="RequestTime">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
        </type>
        <type type="struct" name="WriteMeta">
          <field type="selector" name="RequestTime">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
        </type>
        <type type="struct" name="HttpBasicAuth">
          <field type="ident" def="string" name="Username"/>
          <field type="ident" def="string" name="Password"/>
        </type>
        <type type="struct" name="Config">
          <field type="ident" def="string" name="Address"/>
          <field type="ident" def="string" name="Scheme"/>
          <field type="ident" def="string" name="Datacenter"/>
          <field type="pointer" name="HttpClient">
            <type type="selector">
              <prefix value="http"/>
              <item value="Client"/>
            </type>
          </field>
          <field type="pointer" name="HttpAuth">
            <type type="ident" def="HttpBasicAuth"/>
          </field>
          <field type="selector" name="WaitTime">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="string" name="Token"/>
        </type>
        <type type="struct" name="Client">
          <field type="ident" def="Config" name="config"/>
        </type>
        <type type="struct" name="AgentCheck">
          <field type="ident" def="string" name="Node"/>
          <field type="ident" def="string" name="CheckID"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Status"/>
          <field type="ident" def="string" name="Notes"/>
          <field type="ident" def="string" name="Output"/>
          <field type="ident" def="string" name="ServiceID"/>
          <field type="ident" def="string" name="ServiceName"/>
        </type>
        <type type="struct" name="AgentService">
          <field type="ident" def="string" name="ID"/>
          <field type="ident" def="string" name="Service"/>
          <field type="slice" name="Tags">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="int" name="Port"/>
          <field type="ident" def="string" name="Address"/>
        </type>
        <type type="struct" name="AgentMember">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Addr"/>
          <field type="ident" def="uint16" name="Port"/>
          <field type="map" name="Tags">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
          <field type="ident" def="int" name="Status"/>
          <field type="ident" def="uint8" name="ProtocolMin"/>
          <field type="ident" def="uint8" name="ProtocolMax"/>
          <field type="ident" def="uint8" name="ProtocolCur"/>
          <field type="ident" def="uint8" name="DelegateMin"/>
          <field type="ident" def="uint8" name="DelegateMax"/>
          <field type="ident" def="uint8" name="DelegateCur"/>
        </type>
        <type type="struct" name="AgentServiceRegistration">
          <field type="ident" def="string" name="ID"/>
          <field type="ident" def="string" name="Name"/>
          <field type="slice" name="Tags">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="int" name="Port"/>
          <field type="ident" def="string" name="Address"/>
          <field type="pointer" name="Check">
            <type type="ident" def="AgentServiceCheck"/>
          </field>
          <field type="ident" def="AgentServiceChecks" name="Checks"/>
        </type>
        <type type="struct" name="AgentCheckRegistration">
          <field type="ident" def="string" name="ID"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Notes"/>
          <field type="ident" def="string" name="ServiceID"/>
          <field type="ident" def="AgentServiceCheck" name=""/>
        </type>
        <type type="struct" name="AgentServiceCheck">
          <field type="ident" def="string" name="Script"/>
          <field type="ident" def="string" name="Interval"/>
          <field type="ident" def="string" name="Timeout"/>
          <field type="ident" def="string" name="TTL"/>
          <field type="ident" def="string" name="HTTP"/>
          <field type="ident" def="string" name="Status"/>
        </type>
        <type name="AgentServiceChecks" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="AgentServiceCheck"/>
          </elmtype>
        </type>
        <type type="struct" name="Agent">
          <field type="pointer" name="c">
            <type type="ident" def="Client"/>
          </field>
          <field type="ident" def="string" name="nodeName"/>
        </type>
        <type type="struct" name="ACLEntry">
          <field type="ident" def="uint64" name="CreateIndex"/>
          <field type="ident" def="uint64" name="ModifyIndex"/>
          <field type="ident" def="string" name="ID"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Type"/>
          <field type="ident" def="string" name="Rules"/>
        </type>
        <type type="struct" name="ACL">
          <field type="pointer" name="c">
            <type type="ident" def="Client"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Status">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Status"/>
            </type>
          </resultsList>
        </function>
        <function name="Leader">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Status"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Peers">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Status"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Session">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </resultsList>
        </function>
        <function name="CreateNoChecks">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="SessionEntry"/>
            </type>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Create">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="SessionEntry"/>
            </type>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Destroy">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Renew">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="SessionEntry"/>
            </type>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RenewPeriodic">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
            <type type="channel" dir="3">
              <type type="struct" name=""/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Info">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="SessionEntry"/>
            </type>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Node">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="SessionEntry"/>
              </elmtype>
            </type>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="List">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="SessionEntry"/>
              </elmtype>
            </type>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SemaphorePrefix">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Semaphore"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SemaphoreOpts">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="SemaphoreOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Semaphore"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Acquire">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Semaphore"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="2">
              <type type="struct" name=""/>
            </type>
          </paramsList>
          <resultsList>
            <type type="channel" dir="2">
              <type type="struct" name=""/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Semaphore"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Destroy">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Semaphore"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Raw">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Raw"/>
            </type>
          </resultsList>
        </function>
        <function name="Query">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Raw"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Raw"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
            <type type="interface"/>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="LockKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Lock"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="LockOpts">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="LockOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Lock"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Lock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Lock"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="2">
              <type type="struct" name=""/>
            </type>
          </paramsList>
          <resultsList>
            <type type="channel" dir="2">
              <type type="struct" name=""/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Unlock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Lock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Destroy">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Lock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="KV">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="KV"/>
            </type>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KV"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="KVPair"/>
            </type>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="List">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KV"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="KVPairs"/>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Keys">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KV"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KV"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="KVPair"/>
            </type>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CAS">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KV"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="KVPair"/>
            </type>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Acquire">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KV"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="KVPair"/>
            </type>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KV"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="KVPair"/>
            </type>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KV"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DeleteCAS">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KV"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="KVPair"/>
            </type>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DeleteTree">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KV"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Health">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Health"/>
            </type>
          </resultsList>
        </function>
        <function name="Node">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Health"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="HealthCheck"/>
              </elmtype>
            </type>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Checks">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Health"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="HealthCheck"/>
              </elmtype>
            </type>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Service">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Health"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="bool"/>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="ServiceEntry"/>
              </elmtype>
            </type>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="State">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Health"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="HealthCheck"/>
              </elmtype>
            </type>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Event">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Event"/>
            </type>
          </resultsList>
        </function>
        <function name="Fire">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Event"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="UserEvent"/>
            </type>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="List">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Event"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="UserEvent"/>
              </elmtype>
            </type>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="IDToIndex">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Event"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="Catalog">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Catalog"/>
            </type>
          </resultsList>
        </function>
        <function name="Register">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Catalog"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="CatalogRegistration"/>
            </type>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Deregister">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Catalog"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="CatalogDeregistration"/>
            </type>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Datacenters">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Catalog"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Nodes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Catalog"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Node"/>
              </elmtype>
            </type>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Services">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Catalog"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="slice">
                <elmtype type="ident" def="string"/>
              </valtype>
            </type>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Service">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Catalog"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="CatalogService"/>
              </elmtype>
            </type>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Node">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Catalog"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CatalogNode"/>
            </type>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DefaultConfig">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </resultsList>
        </function>
        <function name="NewClient">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Agent">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </resultsList>
        </function>
        <function name="Self">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="map">
                <keytype type="ident" def="string"/>
                <valtype type="interface"/>
              </valtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NodeName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Checks">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="pointer">
                <type type="ident" def="AgentCheck"/>
              </valtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Services">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="pointer">
                <type type="ident" def="AgentService"/>
              </valtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Members">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="AgentMember"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ServiceRegister">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="AgentServiceRegistration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ServiceDeregister">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PassTTL">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WarnTTL">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailTTL">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UpdateTTL">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CheckRegister">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="AgentCheckRegistration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CheckDeregister">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Join">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ForceLeave">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EnableServiceMaintenance">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DisableServiceMaintenance">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EnableNodeMaintenance">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DisableNodeMaintenance">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Agent"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ACL">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="ACL"/>
            </type>
          </resultsList>
        </function>
        <function name="Create">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ACL"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="ACLEntry"/>
            </type>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Update">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ACL"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="ACLEntry"/>
            </type>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Destroy">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ACL"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Clone">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ACL"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="WriteMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Info">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ACL"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="ACLEntry"/>
            </type>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="List">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ACL"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="QueryOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="ACLEntry"/>
              </elmtype>
            </type>
            <type type="pointer">
              <type type="ident" def="QueryMeta"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="SessionBehaviorRelease"/>
        <name value="SessionBehaviorDelete"/>
        <name value="DefaultSemaphoreSessionName"/>
        <name value="DefaultSemaphoreSessionTTL"/>
        <name value="DefaultSemaphoreWaitTime"/>
        <name value="DefaultSemaphoreKey"/>
        <name value="SemaphoreFlagValue"/>
        <name value="ErrSemaphoreHeld"/>
        <name value="ErrSemaphoreNotHeld"/>
        <name value="ErrSemaphoreInUse"/>
        <name value="ErrSemaphoreConflict"/>
        <name value="DefaultLockSessionName"/>
        <name value="DefaultLockSessionTTL"/>
        <name value="DefaultLockWaitTime"/>
        <name value="DefaultLockRetryTime"/>
        <name value="LockFlagValue"/>
        <name value="ErrLockHeld"/>
        <name value="ErrLockNotHeld"/>
        <name value="ErrLockInUse"/>
        <name value="ErrLockConflict"/>
        <name value="ACLClientType"/>
        <name value="ACLManagementType"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/storage/remote/influxdb">
      <types>
        <type type="struct" name="Client">
          <field type="ident" def="string" name="url"/>
          <field type="pointer" name="httpClient">
            <type type="selector">
              <prefix value="http"/>
              <item value="Client"/>
            </type>
          </field>
          <field type="ident" def="string" name="retentionPolicy"/>
          <field type="ident" def="string" name="database"/>
        </type>
        <type type="struct" name="StoreSamplesRequest">
          <field type="ident" def="string" name="Database"/>
          <field type="ident" def="string" name="RetentionPolicy"/>
          <field type="slice" name="Points">
            <elmtype type="ident" def="point"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewClient">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </resultsList>
        </function>
        <function name="Store">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Samples"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="Client"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/syndtr/goleveldb/leveldb/memdb">
      <types>
        <type type="struct" name="DB">
          <field type="selector" name="cmp">
            <prefix value="comparer"/>
            <item value="BasicComparer"/>
          </field>
          <field type="pointer" name="rnd">
            <type type="selector">
              <prefix value="rand"/>
              <item value="Rand"/>
            </type>
          </field>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="slice" name="kvData">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="nodeData">
            <elmtype type="ident" def="int"/>
          </field>
          <field type="array" name="prevNode">
            <elmtype type="ident" def="int"/>
          </field>
          <field type="ident" def="int" name="maxHeight"/>
          <field type="ident" def="int" name="n"/>
          <field type="ident" def="int" name="kvSize"/>
        </type>
      </types>
      <functions>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="First">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Last">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Contains">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Find">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewIterator">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="util"/>
                <item value="Range"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="iterator"/>
              <item value="Iterator"/>
            </type>
          </resultsList>
        </function>
        <function name="Capacity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Size">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Free">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="comparer"/>
              <item value="BasicComparer"/>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ErrNotFound"/>
        <name value="ErrIterReleased"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/syndtr/goleveldb/leveldb/comparer">
      <types>
        <type name="BasicComparer" type="interface">
          <method name="Compare">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
        </type>
        <type name="Comparer" type="interface">
          <method name="Name">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="Separator">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
          <method name="Successor">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="Compare">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Separator">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Successor">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="DefaultComparer"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/storage/local/codable">
      <types>
        <type name="Metric" type="selector">
          <prefix value="clientmodel"/>
          <item value="Metric"/>
        </type>
        <type name="Fingerprint" type="selector">
          <prefix value="clientmodel"/>
          <item value="Fingerprint"/>
        </type>
        <type name="FingerprintSet" type="map">
          <keytype type="selector">
            <prefix value="clientmodel"/>
            <item value="Fingerprint"/>
          </keytype>
          <valtype type="struct" name=""/>
        </type>
        <type name="Fingerprints" type="selector">
          <prefix value="clientmodel"/>
          <item value="Fingerprints"/>
        </type>
        <type name="LabelPair" type="selector">
          <prefix value="metric"/>
          <item value="LabelPair"/>
        </type>
        <type name="LabelName" type="selector">
          <prefix value="clientmodel"/>
          <item value="LabelName"/>
        </type>
        <type name="LabelValueSet" type="map">
          <keytype type="selector">
            <prefix value="clientmodel"/>
            <item value="LabelValue"/>
          </keytype>
          <valtype type="struct" name=""/>
        </type>
        <type name="LabelValues" type="selector">
          <prefix value="clientmodel"/>
          <item value="LabelValues"/>
        </type>
        <type type="struct" name="TimeRange">
          <field type="selector" name="First">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
          <field type="selector" name="Last">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="EncodeVarint">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="int64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EncodeUvarint">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EncodeUint64">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodeUint64">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="Metric"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalFromReader">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="byteReader"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="Fingerprint"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Fingerprint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="FingerprintSet"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FingerprintSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="Fingerprints"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Fingerprints"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="LabelPair"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="LabelName"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelName"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="LabelValueSet"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelValueSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="LabelValues"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelValues"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalBinary">
          <recvList>
            <type type="ident" def="TimeRange"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalBinary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TimeRange"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/web/api/v1">
      <types>
        <type type="struct" name="API">
          <field type="selector" name="Storage">
            <prefix value="local"/>
            <item value="Storage"/>
          </field>
          <field type="pointer" name="QueryEngine">
            <type type="selector">
              <prefix value="promql"/>
              <item value="Engine"/>
            </type>
          </field>
          <field type="func" name="context">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="http"/>
                  <item value="Request"/>
                </type>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="context"/>
                <item value="Context"/>
              </type>
            </resultsList>
          </field>
        </type>
      </types>
      <functions>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="apiError"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Register">
          <recvList>
            <type type="pointer">
              <type type="ident" def="API"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="route"/>
                <item value="Router"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/util/httputil">
      <types>
        <type type="struct" name="CompressionHandler">
          <field type="selector" name="Handler">
            <prefix value="http"/>
            <item value="Handler"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewDeadlineClient">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Client"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="compressedResponseWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="compressedResponseWriter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ServeHTTP">
          <recvList>
            <type type="ident" def="CompressionHandler"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/syndtr/goleveldb/leveldb/journal">
      <types>
        <type type="struct" name="ErrCorrupted">
          <field type="ident" def="int" name="Size"/>
          <field type="ident" def="string" name="Reason"/>
        </type>
        <type name="Dropper" type="interface">
          <method name="Drop">
            <paramsList>
              <type type="ident" def="error"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="Reader">
          <field type="selector" name="r">
            <prefix value="io"/>
            <item value="Reader"/>
          </field>
          <field type="ident" def="Dropper" name="dropper"/>
          <field type="ident" def="bool" name="strict"/>
          <field type="ident" def="bool" name="checksum"/>
          <field type="ident" def="int" name="seq"/>
          <field type="ident" def="int" name="i"/>
          <field type="ident" def="int" name="j"/>
          <field type="ident" def="int" name="n"/>
          <field type="ident" def="bool" name="last"/>
          <field type="ident" def="error" name="err"/>
          <field type="array" name="buf">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Writer">
          <field type="selector" name="w">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="ident" def="int" name="seq"/>
          <field type="ident" def="flusher" name="f"/>
          <field type="ident" def="int" name="i"/>
          <field type="ident" def="int" name="j"/>
          <field type="ident" def="int" name="written"/>
          <field type="ident" def="bool" name="first"/>
          <field type="ident" def="bool" name="pending"/>
          <field type="ident" def="error" name="err"/>
          <field type="array" name="buf">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ErrCorrupted"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewReader">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="Dropper"/>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="Dropper"/>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="singleReader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadByte">
          <recvList>
            <type type="pointer">
              <type type="ident" def="singleReader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="byte"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewWriter">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Flush">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="ident" def="singleWriter"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/web/api/legacy">
      <types>
        <type type="struct" name="API">
          <field type="func" name="Now">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Timestamp"/>
              </type>
            </resultsList>
          </field>
          <field type="selector" name="Storage">
            <prefix value="local"/>
            <item value="Storage"/>
          </field>
          <field type="pointer" name="QueryEngine">
            <type type="selector">
              <prefix value="promql"/>
              <item value="Engine"/>
            </type>
          </field>
        </type>
      </types>
      <functions>
        <function name="Query">
          <recvList>
            <type type="pointer">
              <type type="ident" def="API"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="ident" def="plainVec"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="ident" def="plainVec"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="promql"/>
              <item value="ExprType"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="plainVec"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="ident" def="plainScalar"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="promql"/>
              <item value="ExprType"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="ident" def="plainString"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="promql"/>
              <item value="ExprType"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="plainString"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="QueryRange">
          <recvList>
            <type type="pointer">
              <type type="ident" def="API"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Metrics">
          <recvList>
            <type type="pointer">
              <type type="ident" def="API"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Register">
          <recvList>
            <type type="pointer">
              <type type="ident" def="API"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="route"/>
                <item value="Router"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/Sirupsen/logrus/hooks/sentry">
      <types>
        <type type="struct" name="SentryHook">
          <field type="selector" name="Timeout">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="pointer" name="client">
            <type type="selector">
              <prefix value="raven"/>
              <item value="Client"/>
            </type>
          </field>
          <field type="slice" name="levels">
            <elmtype type="selector">
              <prefix value="logrus"/>
              <item value="Level"/>
            </elmtype>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewSentryHook">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="logrus"/>
                <item value="Level"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="SentryHook"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Fire">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SentryHook"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="logrus"/>
                <item value="Entry"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Levels">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SentryHook"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="logrus"/>
                <item value="Level"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/gopkg.in/fsnotify.v1">
      <types>
        <type type="struct" name="Watcher">
          <field type="channel" dir="3" name="Events">
            <type type="ident" def="Event"/>
          </field>
          <field type="channel" dir="3" name="Errors">
            <type type="ident" def="error"/>
          </field>
          <field type="ident" def="bool" name="isClosed"/>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="selector" name="port">
            <prefix value="syscall"/>
            <item value="Handle"/>
          </field>
          <field type="ident" def="watchMap" name="watches"/>
          <field type="channel" dir="3" name="input">
            <type type="pointer">
              <type type="ident" def="input"/>
            </type>
          </field>
          <field type="channel" dir="3" name="quit">
            <type type="channel" dir="1">
              <type type="ident" def="error"/>
            </type>
          </field>
        </type>
        <type type="struct" name="Watcher">
          <field type="channel" dir="3" name="Events">
            <type type="ident" def="Event"/>
          </field>
          <field type="channel" dir="3" name="Errors">
            <type type="ident" def="error"/>
          </field>
          <field type="channel" dir="3" name="done">
            <type type="ident" def="bool"/>
          </field>
          <field type="ident" def="int" name="kq"/>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="map" name="watches">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="int"/>
          </field>
          <field type="map" name="externalWatches">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="bool"/>
          </field>
          <field type="map" name="dirFlags">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="uint32"/>
          </field>
          <field type="map" name="paths">
            <keytype type="ident" def="int"/>
            <valtype type="ident" def="pathInfo"/>
          </field>
          <field type="map" name="fileExists">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="bool"/>
          </field>
          <field type="ident" def="bool" name="isClosed"/>
        </type>
        <type type="struct" name="Watcher">
          <field type="channel" dir="3" name="Events">
            <type type="ident" def="Event"/>
          </field>
          <field type="channel" dir="3" name="Errors">
            <type type="ident" def="error"/>
          </field>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="ident" def="int" name="fd"/>
          <field type="pointer" name="poller">
            <type type="ident" def="fdPoller"/>
          </field>
          <field type="map" name="watches">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="watch"/>
            </valtype>
          </field>
          <field type="map" name="paths">
            <keytype type="ident" def="int"/>
            <valtype type="ident" def="string"/>
          </field>
          <field type="channel" dir="3" name="done">
            <type type="struct" name=""/>
          </field>
          <field type="channel" dir="3" name="doneResp">
            <type type="struct" name=""/>
          </field>
        </type>
        <type type="struct" name="Event">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="Op" name="Op"/>
        </type>
        <type name="Op" type="ident">
          <type type="ident" def="uint32"/>
        </type>
      </types>
      <functions>
        <function name="NewWatcher">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Watcher"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Watcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Watcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Remove">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Watcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewWatcher">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Watcher"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Watcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Watcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Remove">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Watcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewWatcher">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Watcher"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Watcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Watcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Remove">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Watcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Event"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Create"/>
        <name value="Write"/>
        <name value="Remove"/>
        <name value="Rename"/>
        <name value="Chmod"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/rules">
      <types>
        <type type="struct" name="RecordingRule">
          <field type="ident" def="string" name="name"/>
          <field type="selector" name="vector">
            <prefix value="promql"/>
            <item value="Expr"/>
          </field>
          <field type="selector" name="labels">
            <prefix value="clientmodel"/>
            <item value="LabelSet"/>
          </field>
        </type>
        <type name="Rule" type="interface">
          <method name="Name">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="eval">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Timestamp"/>
              </type>
              <type type="pointer">
                <type type="selector">
                  <prefix value="promql"/>
                  <item value="Engine"/>
                </type>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="promql"/>
                <item value="Vector"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="HTMLSnippet">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="html_template"/>
                <item value="HTML"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Manager">
          <field type="selector" name="">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="slice" name="rules">
            <elmtype type="ident" def="Rule"/>
          </field>
          <field type="channel" dir="3" name="done">
            <type type="ident" def="bool"/>
          </field>
          <field type="selector" name="interval">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="pointer" name="queryEngine">
            <type type="selector">
              <prefix value="promql"/>
              <item value="Engine"/>
            </type>
          </field>
          <field type="selector" name="sampleAppender">
            <prefix value="storage"/>
            <item value="SampleAppender"/>
          </field>
          <field type="pointer" name="notificationHandler">
            <type type="selector">
              <prefix value="notification"/>
              <item value="NotificationHandler"/>
            </type>
          </field>
          <field type="pointer" name="externalURL">
            <type type="selector">
              <prefix value="url"/>
              <item value="URL"/>
            </type>
          </field>
          <field type="ident" def="string" name="baseDir"/>
        </type>
        <type type="struct" name="ManagerOptions">
          <field type="selector" name="EvaluationInterval">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="pointer" name="QueryEngine">
            <type type="selector">
              <prefix value="promql"/>
              <item value="Engine"/>
            </type>
          </field>
          <field type="pointer" name="NotificationHandler">
            <type type="selector">
              <prefix value="notification"/>
              <item value="NotificationHandler"/>
            </type>
          </field>
          <field type="selector" name="SampleAppender">
            <prefix value="storage"/>
            <item value="SampleAppender"/>
          </field>
          <field type="pointer" name="ExternalURL">
            <type type="selector">
              <prefix value="url"/>
              <item value="URL"/>
            </type>
          </field>
          <field type="ident" def="string" name="BaseDir"/>
        </type>
        <type name="AlertState" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="Alert">
          <field type="ident" def="string" name="Name"/>
          <field type="selector" name="Labels">
            <prefix value="clientmodel"/>
            <item value="LabelSet"/>
          </field>
          <field type="ident" def="AlertState" name="State"/>
          <field type="selector" name="ActiveSince">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
          <field type="selector" name="Value">
            <prefix value="clientmodel"/>
            <item value="SampleValue"/>
          </field>
        </type>
        <type type="struct" name="AlertingRule">
          <field type="ident" def="string" name="name"/>
          <field type="selector" name="vector">
            <prefix value="promql"/>
            <item value="Expr"/>
          </field>
          <field type="selector" name="holdDuration">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="labels">
            <prefix value="clientmodel"/>
            <item value="LabelSet"/>
          </field>
          <field type="ident" def="string" name="summary"/>
          <field type="ident" def="string" name="description"/>
          <field type="ident" def="string" name="runbook"/>
          <field type="selector" name="mutex">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="map" name="activeAlerts">
            <keytype type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </keytype>
            <valtype type="pointer">
              <type type="ident" def="Alert"/>
            </valtype>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewRecordingRule">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="promql"/>
              <item value="Expr"/>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelSet"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RecordingRule"/>
            </type>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="RecordingRule"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="RecordingRule"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="HTMLSnippet">
          <recvList>
            <type type="ident" def="RecordingRule"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="template"/>
              <item value="HTML"/>
            </type>
          </resultsList>
        </function>
        <function name="NewManager">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="ManagerOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Manager"/>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Manager"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Manager"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ApplyConfig">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Manager"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="config"/>
                <item value="Config"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Rules">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Manager"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Rule"/>
            </type>
          </resultsList>
        </function>
        <function name="AlertingRules">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Manager"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="AlertingRule"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="AlertState"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewAlertingRule">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="promql"/>
              <item value="Expr"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelSet"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="AlertingRule"/>
            </type>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AlertingRule"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AlertingRule"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="HTMLSnippet">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AlertingRule"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="template"/>
              <item value="HTML"/>
            </type>
          </resultsList>
        </function>
        <function name="State">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AlertingRule"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="AlertState"/>
          </resultsList>
        </function>
        <function name="ActiveAlerts">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AlertingRule"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Alert"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="StateInactive"/>
        <name value="StatePending"/>
        <name value="StateFiring"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/Sirupsen/logrus/formatters/logstash">
      <types>
        <type type="struct" name="LogstashFormatter">
          <field type="ident" def="string" name="Type"/>
          <field type="ident" def="string" name="TimestampFormat"/>
        </type>
      </types>
      <functions>
        <function name="Format">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LogstashFormatter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="logrus"/>
                <item value="Entry"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/util/route">
      <types>
        <type type="struct" name="Router">
          <field type="pointer" name="rtr">
            <type type="selector">
              <prefix value="httprouter"/>
              <item value="Router"/>
            </type>
          </field>
          <field type="ident" def="string" name="prefix"/>
        </type>
      </types>
      <functions>
        <function name="Context">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="context"/>
              <item value="Context"/>
            </type>
          </resultsList>
        </function>
        <function name="Param">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="context"/>
              <item value="Context"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="WithParam">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="context"/>
              <item value="Context"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="context"/>
              <item value="Context"/>
            </type>
          </resultsList>
        </function>
        <function name="New">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </resultsList>
        </function>
        <function name="WithPrefix">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Del">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Post">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ServeHTTP">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="FileServe">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/syndtr/goleveldb/leveldb/table">
      <types>
        <type type="struct" name="Writer">
          <field type="selector" name="writer">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="ident" def="error" name="err"/>
          <field type="selector" name="cmp">
            <prefix value="comparer"/>
            <item value="Comparer"/>
          </field>
          <field type="selector" name="filter">
            <prefix value="filter"/>
            <item value="Filter"/>
          </field>
          <field type="selector" name="compression">
            <prefix value="opt"/>
            <item value="Compression"/>
          </field>
          <field type="ident" def="int" name="blockSize"/>
          <field type="ident" def="blockWriter" name="dataBlock"/>
          <field type="ident" def="blockWriter" name="indexBlock"/>
          <field type="ident" def="filterWriter" name="filterBlock"/>
          <field type="ident" def="blockHandle" name="pendingBH"/>
          <field type="ident" def="uint64" name="offset"/>
          <field type="ident" def="int" name="nEntries"/>
          <field type="array" name="scratch">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="comparerScratch">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="compressionScratch">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="ErrCorrupted">
          <field type="ident" def="int64" name="Pos"/>
          <field type="ident" def="int64" name="Size"/>
          <field type="ident" def="string" name="Kind"/>
          <field type="ident" def="string" name="Reason"/>
        </type>
        <type type="struct" name="Reader">
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="pointer" name="fi">
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileInfo"/>
            </type>
          </field>
          <field type="selector" name="reader">
            <prefix value="io"/>
            <item value="ReaderAt"/>
          </field>
          <field type="pointer" name="cache">
            <type type="selector">
              <prefix value="cache"/>
              <item value="CacheGetter"/>
            </type>
          </field>
          <field type="ident" def="error" name="err"/>
          <field type="pointer" name="bpool">
            <type type="selector">
              <prefix value="util"/>
              <item value="BufferPool"/>
            </type>
          </field>
          <field type="pointer" name="o">
            <type type="selector">
              <prefix value="opt"/>
              <item value="Options"/>
            </type>
          </field>
          <field type="selector" name="cmp">
            <prefix value="comparer"/>
            <item value="Comparer"/>
          </field>
          <field type="selector" name="filter">
            <prefix value="filter"/>
            <item value="Filter"/>
          </field>
          <field type="ident" def="bool" name="verifyChecksum"/>
          <field type="ident" def="int64" name="dataEnd"/>
          <field type="ident" def="blockHandle" name="metaBH"/>
          <field type="ident" def="blockHandle" name="indexBH"/>
          <field type="ident" def="blockHandle" name="filterBH"/>
          <field type="pointer" name="indexBlock">
            <type type="ident" def="block"/>
          </field>
          <field type="pointer" name="filterBlock">
            <type type="ident" def="filterBlock"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Append">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="BlocksLen">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="EntriesLen">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="BytesLen">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewWriter">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="Options"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ErrCorrupted"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="block"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="First">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Last">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetReleaser">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="util"/>
              <item value="Releaser"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="filterBlock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="iterator"/>
              <item value="Iterator"/>
            </type>
          </resultsList>
        </function>
        <function name="NewIterator">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="util"/>
                <item value="Range"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="iterator"/>
              <item value="Iterator"/>
            </type>
          </resultsList>
        </function>
        <function name="Find">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FindKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="OffsetOf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="NewReader">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="ReaderAt"/>
            </type>
            <type type="ident" def="int64"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="storage"/>
                <item value="FileInfo"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="cache"/>
                <item value="CacheGetter"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="util"/>
                <item value="BufferPool"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="Options"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ErrNotFound"/>
        <name value="ErrReaderReleased"/>
        <name value="ErrIterReleased"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/golang/protobuf/proto/testdata">
      <types>
        <type name="FOO" type="ident">
          <type type="ident" def="int32"/>
        </type>
        <type name="GoTest_KIND" type="ident">
          <type type="ident" def="int32"/>
        </type>
        <type name="MyMessage_Color" type="ident">
          <type type="ident" def="int32"/>
        </type>
        <type name="Defaults_Color" type="ident">
          <type type="ident" def="int32"/>
        </type>
        <type name="RepeatedEnum_Color" type="ident">
          <type type="ident" def="int32"/>
        </type>
        <type type="struct" name="GoEnum">
          <field type="pointer" name="Foo">
            <type type="ident" def="FOO"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GoTestField">
          <field type="pointer" name="Label">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Type">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GoTest">
          <field type="pointer" name="Kind">
            <type type="ident" def="GoTest_KIND"/>
          </field>
          <field type="pointer" name="Table">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Param">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="RequiredField">
            <type type="ident" def="GoTestField"/>
          </field>
          <field type="slice" name="RepeatedField">
            <elmtype type="pointer">
              <type type="ident" def="GoTestField"/>
            </elmtype>
          </field>
          <field type="pointer" name="OptionalField">
            <type type="ident" def="GoTestField"/>
          </field>
          <field type="pointer" name="F_BoolRequired">
            <type type="ident" def="bool"/>
          </field>
          <field type="pointer" name="F_Int32Required">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="F_Int64Required">
            <type type="ident" def="int64"/>
          </field>
          <field type="pointer" name="F_Fixed32Required">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="F_Fixed64Required">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="F_Uint32Required">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="F_Uint64Required">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="F_FloatRequired">
            <type type="ident" def="float32"/>
          </field>
          <field type="pointer" name="F_DoubleRequired">
            <type type="ident" def="float64"/>
          </field>
          <field type="pointer" name="F_StringRequired">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="F_BytesRequired">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="pointer" name="F_Sint32Required">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="F_Sint64Required">
            <type type="ident" def="int64"/>
          </field>
          <field type="slice" name="F_BoolRepeated">
            <elmtype type="ident" def="bool"/>
          </field>
          <field type="slice" name="F_Int32Repeated">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="F_Int64Repeated">
            <elmtype type="ident" def="int64"/>
          </field>
          <field type="slice" name="F_Fixed32Repeated">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="slice" name="F_Fixed64Repeated">
            <elmtype type="ident" def="uint64"/>
          </field>
          <field type="slice" name="F_Uint32Repeated">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="slice" name="F_Uint64Repeated">
            <elmtype type="ident" def="uint64"/>
          </field>
          <field type="slice" name="F_FloatRepeated">
            <elmtype type="ident" def="float32"/>
          </field>
          <field type="slice" name="F_DoubleRepeated">
            <elmtype type="ident" def="float64"/>
          </field>
          <field type="slice" name="F_StringRepeated">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="F_BytesRepeated">
            <elmtype type="slice">
              <elmtype type="ident" def="byte"/>
            </elmtype>
          </field>
          <field type="slice" name="F_Sint32Repeated">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="F_Sint64Repeated">
            <elmtype type="ident" def="int64"/>
          </field>
          <field type="pointer" name="F_BoolOptional">
            <type type="ident" def="bool"/>
          </field>
          <field type="pointer" name="F_Int32Optional">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="F_Int64Optional">
            <type type="ident" def="int64"/>
          </field>
          <field type="pointer" name="F_Fixed32Optional">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="F_Fixed64Optional">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="F_Uint32Optional">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="F_Uint64Optional">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="F_FloatOptional">
            <type type="ident" def="float32"/>
          </field>
          <field type="pointer" name="F_DoubleOptional">
            <type type="ident" def="float64"/>
          </field>
          <field type="pointer" name="F_StringOptional">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="F_BytesOptional">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="pointer" name="F_Sint32Optional">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="F_Sint64Optional">
            <type type="ident" def="int64"/>
          </field>
          <field type="pointer" name="F_BoolDefaulted">
            <type type="ident" def="bool"/>
          </field>
          <field type="pointer" name="F_Int32Defaulted">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="F_Int64Defaulted">
            <type type="ident" def="int64"/>
          </field>
          <field type="pointer" name="F_Fixed32Defaulted">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="F_Fixed64Defaulted">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="F_Uint32Defaulted">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="F_Uint64Defaulted">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="F_FloatDefaulted">
            <type type="ident" def="float32"/>
          </field>
          <field type="pointer" name="F_DoubleDefaulted">
            <type type="ident" def="float64"/>
          </field>
          <field type="pointer" name="F_StringDefaulted">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="F_BytesDefaulted">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="pointer" name="F_Sint32Defaulted">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="F_Sint64Defaulted">
            <type type="ident" def="int64"/>
          </field>
          <field type="slice" name="F_BoolRepeatedPacked">
            <elmtype type="ident" def="bool"/>
          </field>
          <field type="slice" name="F_Int32RepeatedPacked">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="F_Int64RepeatedPacked">
            <elmtype type="ident" def="int64"/>
          </field>
          <field type="slice" name="F_Fixed32RepeatedPacked">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="slice" name="F_Fixed64RepeatedPacked">
            <elmtype type="ident" def="uint64"/>
          </field>
          <field type="slice" name="F_Uint32RepeatedPacked">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="slice" name="F_Uint64RepeatedPacked">
            <elmtype type="ident" def="uint64"/>
          </field>
          <field type="slice" name="F_FloatRepeatedPacked">
            <elmtype type="ident" def="float32"/>
          </field>
          <field type="slice" name="F_DoubleRepeatedPacked">
            <elmtype type="ident" def="float64"/>
          </field>
          <field type="slice" name="F_Sint32RepeatedPacked">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="F_Sint64RepeatedPacked">
            <elmtype type="ident" def="int64"/>
          </field>
          <field type="pointer" name="Requiredgroup">
            <type type="ident" def="GoTest_RequiredGroup"/>
          </field>
          <field type="slice" name="Repeatedgroup">
            <elmtype type="pointer">
              <type type="ident" def="GoTest_RepeatedGroup"/>
            </elmtype>
          </field>
          <field type="pointer" name="Optionalgroup">
            <type type="ident" def="GoTest_OptionalGroup"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GoTest_RequiredGroup">
          <field type="pointer" name="RequiredField">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GoTest_RepeatedGroup">
          <field type="pointer" name="RequiredField">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GoTest_OptionalGroup">
          <field type="pointer" name="RequiredField">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GoSkipTest">
          <field type="pointer" name="SkipInt32">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="SkipFixed32">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="SkipFixed64">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="SkipString">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Skipgroup">
            <type type="ident" def="GoSkipTest_SkipGroup"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GoSkipTest_SkipGroup">
          <field type="pointer" name="GroupInt32">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="GroupString">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="NonPackedTest">
          <field type="slice" name="A">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="PackedTest">
          <field type="slice" name="B">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MaxTag">
          <field type="pointer" name="LastField">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="OldMessage">
          <field type="pointer" name="Nested">
            <type type="ident" def="OldMessage_Nested"/>
          </field>
          <field type="pointer" name="Num">
            <type type="ident" def="int32"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="OldMessage_Nested">
          <field type="pointer" name="Name">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="NewMessage">
          <field type="pointer" name="Nested">
            <type type="ident" def="NewMessage_Nested"/>
          </field>
          <field type="pointer" name="Num">
            <type type="ident" def="int64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="NewMessage_Nested">
          <field type="pointer" name="Name">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="FoodGroup">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="InnerMessage">
          <field type="pointer" name="Host">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Port">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="Connected">
            <type type="ident" def="bool"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="OtherMessage">
          <field type="pointer" name="Key">
            <type type="ident" def="int64"/>
          </field>
          <field type="slice" name="Value">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="pointer" name="Weight">
            <type type="ident" def="float32"/>
          </field>
          <field type="pointer" name="Inner">
            <type type="ident" def="InnerMessage"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MyMessage">
          <field type="pointer" name="Count">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="Name">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Quote">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="Pet">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="pointer" name="Inner">
            <type type="ident" def="InnerMessage"/>
          </field>
          <field type="slice" name="Others">
            <elmtype type="pointer">
              <type type="ident" def="OtherMessage"/>
            </elmtype>
          </field>
          <field type="slice" name="RepInner">
            <elmtype type="pointer">
              <type type="ident" def="InnerMessage"/>
            </elmtype>
          </field>
          <field type="pointer" name="Bikeshed">
            <type type="ident" def="MyMessage_Color"/>
          </field>
          <field type="pointer" name="Somegroup">
            <type type="ident" def="MyMessage_SomeGroup"/>
          </field>
          <field type="slice" name="RepBytes">
            <elmtype type="slice">
              <elmtype type="ident" def="byte"/>
            </elmtype>
          </field>
          <field type="pointer" name="Bigfloat">
            <type type="ident" def="float64"/>
          </field>
          <field type="map" name="XXX_extensions">
            <keytype type="ident" def="int32"/>
            <valtype type="selector">
              <prefix value="proto"/>
              <item value="Extension"/>
            </valtype>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MyMessage_SomeGroup">
          <field type="pointer" name="GroupField">
            <type type="ident" def="int32"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Ext">
          <field type="pointer" name="Data">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MyMessageSet">
          <field type="map" name="XXX_extensions">
            <keytype type="ident" def="int32"/>
            <valtype type="selector">
              <prefix value="proto"/>
              <item value="Extension"/>
            </valtype>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Empty">
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MessageList">
          <field type="slice" name="Message">
            <elmtype type="pointer">
              <type type="ident" def="MessageList_Message"/>
            </elmtype>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MessageList_Message">
          <field type="pointer" name="Name">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Count">
            <type type="ident" def="int32"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Strings">
          <field type="pointer" name="StringField">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="BytesField">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Defaults">
          <field type="pointer" name="F_Bool">
            <type type="ident" def="bool"/>
          </field>
          <field type="pointer" name="F_Int32">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="F_Int64">
            <type type="ident" def="int64"/>
          </field>
          <field type="pointer" name="F_Fixed32">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="F_Fixed64">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="F_Uint32">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="F_Uint64">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="F_Float">
            <type type="ident" def="float32"/>
          </field>
          <field type="pointer" name="F_Double">
            <type type="ident" def="float64"/>
          </field>
          <field type="pointer" name="F_String">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="F_Bytes">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="pointer" name="F_Sint32">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="F_Sint64">
            <type type="ident" def="int64"/>
          </field>
          <field type="pointer" name="F_Enum">
            <type type="ident" def="Defaults_Color"/>
          </field>
          <field type="pointer" name="F_Pinf">
            <type type="ident" def="float32"/>
          </field>
          <field type="pointer" name="F_Ninf">
            <type type="ident" def="float32"/>
          </field>
          <field type="pointer" name="F_Nan">
            <type type="ident" def="float32"/>
          </field>
          <field type="pointer" name="Sub">
            <type type="ident" def="SubDefaults"/>
          </field>
          <field type="pointer" name="StrZero">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="SubDefaults">
          <field type="pointer" name="N">
            <type type="ident" def="int64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="RepeatedEnum">
          <field type="slice" name="Color">
            <elmtype type="ident" def="RepeatedEnum_Color"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MoreRepeated">
          <field type="slice" name="Bools">
            <elmtype type="ident" def="bool"/>
          </field>
          <field type="slice" name="BoolsPacked">
            <elmtype type="ident" def="bool"/>
          </field>
          <field type="slice" name="Ints">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="IntsPacked">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="Int64SPacked">
            <elmtype type="ident" def="int64"/>
          </field>
          <field type="slice" name="Strings">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="Fixeds">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GroupOld">
          <field type="pointer" name="G">
            <type type="ident" def="GroupOld_G"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GroupOld_G">
          <field type="pointer" name="X">
            <type type="ident" def="int32"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GroupNew">
          <field type="pointer" name="G">
            <type type="ident" def="GroupNew_G"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GroupNew_G">
          <field type="pointer" name="X">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="Y">
            <type type="ident" def="int32"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="FloatingPoint">
          <field type="pointer" name="F">
            <type type="ident" def="float64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MessageWithMap">
          <field type="map" name="NameMapping">
            <keytype type="ident" def="int32"/>
            <valtype type="ident" def="string"/>
          </field>
          <field type="map" name="MsgMapping">
            <keytype type="ident" def="int64"/>
            <valtype type="pointer">
              <type type="ident" def="FloatingPoint"/>
            </valtype>
          </field>
          <field type="map" name="ByteMapping">
            <keytype type="ident" def="bool"/>
            <valtype type="slice">
              <elmtype type="ident" def="byte"/>
            </valtype>
          </field>
          <field type="map" name="StrToStr">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Enum">
          <recvList>
            <type type="ident" def="FOO"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="FOO"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="FOO"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FOO"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Enum">
          <recvList>
            <type type="ident" def="GoTest_KIND"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GoTest_KIND"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="GoTest_KIND"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_KIND"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Enum">
          <recvList>
            <type type="ident" def="MyMessage_Color"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="MyMessage_Color"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="MyMessage_Color"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage_Color"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Enum">
          <recvList>
            <type type="ident" def="Defaults_Color"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Defaults_Color"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Defaults_Color"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults_Color"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Enum">
          <recvList>
            <type type="ident" def="RepeatedEnum_Color"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RepeatedEnum_Color"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="RepeatedEnum_Color"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RepeatedEnum_Color"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoEnum"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoEnum"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetFoo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoEnum"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="FOO"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTestField"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTestField"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetLabel">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTestField"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetType">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTestField"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetKind">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="GoTest_KIND"/>
          </resultsList>
        </function>
        <function name="GetTable">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetParam">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetRequiredField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GoTestField"/>
            </type>
          </resultsList>
        </function>
        <function name="GetRepeatedField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="GoTestField"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="GetOptionalField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GoTestField"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_BoolRequired">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetF_Int32Required">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetF_Int64Required">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetF_Fixed32Required">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetF_Fixed64Required">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetF_Uint32Required">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetF_Uint64Required">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetF_FloatRequired">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </function>
        <function name="GetF_DoubleRequired">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="GetF_StringRequired">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetF_BytesRequired">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Sint32Required">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetF_Sint64Required">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetF_BoolRepeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Int32Repeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Int64Repeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Fixed32Repeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Fixed64Repeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Uint32Repeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Uint64Repeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_FloatRepeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="float32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_DoubleRepeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="float64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_StringRepeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_BytesRepeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="slice">
                <elmtype type="ident" def="byte"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Sint32Repeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Sint64Repeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_BoolOptional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetF_Int32Optional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetF_Int64Optional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetF_Fixed32Optional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetF_Fixed64Optional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetF_Uint32Optional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetF_Uint64Optional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetF_FloatOptional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </function>
        <function name="GetF_DoubleOptional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="GetF_StringOptional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetF_BytesOptional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Sint32Optional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetF_Sint64Optional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetF_BoolDefaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetF_Int32Defaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetF_Int64Defaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetF_Fixed32Defaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetF_Fixed64Defaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetF_Uint32Defaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetF_Uint64Defaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetF_FloatDefaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </function>
        <function name="GetF_DoubleDefaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="GetF_StringDefaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetF_BytesDefaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Sint32Defaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetF_Sint64Defaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetF_BoolRepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Int32RepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Int64RepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Fixed32RepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Fixed64RepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Uint32RepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Uint64RepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_FloatRepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="float32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_DoubleRepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="float64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Sint32RepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Sint64RepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetRequiredgroup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GoTest_RequiredGroup"/>
            </type>
          </resultsList>
        </function>
        <function name="GetRepeatedgroup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="GoTest_RepeatedGroup"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="GetOptionalgroup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GoTest_OptionalGroup"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_RequiredGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_RequiredGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetRequiredField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_RequiredGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_RepeatedGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_RepeatedGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetRequiredField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_RepeatedGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_OptionalGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_OptionalGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetRequiredField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_OptionalGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetSkipInt32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetSkipFixed32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetSkipFixed64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetSkipString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetSkipgroup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest_SkipGroup"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest_SkipGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest_SkipGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetGroupInt32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest_SkipGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetGroupString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest_SkipGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NonPackedTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NonPackedTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetA">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NonPackedTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PackedTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PackedTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetB">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PackedTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MaxTag"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MaxTag"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetLastField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MaxTag"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OldMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OldMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetNested">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OldMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="OldMessage_Nested"/>
            </type>
          </resultsList>
        </function>
        <function name="GetNum">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OldMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OldMessage_Nested"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OldMessage_Nested"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OldMessage_Nested"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NewMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NewMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetNested">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NewMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="NewMessage_Nested"/>
            </type>
          </resultsList>
        </function>
        <function name="GetNum">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NewMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NewMessage_Nested"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NewMessage_Nested"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NewMessage_Nested"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetFoodGroup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NewMessage_Nested"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="InnerMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="InnerMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetHost">
          <recvList>
            <type type="pointer">
              <type type="ident" def="InnerMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetPort">
          <recvList>
            <type type="pointer">
              <type type="ident" def="InnerMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetConnected">
          <recvList>
            <type type="pointer">
              <type type="ident" def="InnerMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OtherMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OtherMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OtherMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetValue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OtherMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="GetWeight">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OtherMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </function>
        <function name="GetInner">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OtherMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="InnerMessage"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ExtensionRangeArray">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="proto"/>
                <item value="ExtensionRange"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="ExtensionMap">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="selector">
                <prefix value="proto"/>
                <item value="Extension"/>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="GetCount">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetQuote">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetPet">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="GetInner">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="InnerMessage"/>
            </type>
          </resultsList>
        </function>
        <function name="GetOthers">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="OtherMessage"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="GetRepInner">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="InnerMessage"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="GetBikeshed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="MyMessage_Color"/>
          </resultsList>
        </function>
        <function name="GetSomegroup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="MyMessage_SomeGroup"/>
            </type>
          </resultsList>
        </function>
        <function name="GetRepBytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="slice">
                <elmtype type="ident" def="byte"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="GetBigfloat">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage_SomeGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage_SomeGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetGroupField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage_SomeGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Ext"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Ext"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetData">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Ext"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessageSet"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessageSet"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Marshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessageSet"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Unmarshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessageSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessageSet"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessageSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ExtensionRangeArray">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="proto"/>
                <item value="ExtensionRange"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="ExtensionMap">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessageSet"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="selector">
                <prefix value="proto"/>
                <item value="Extension"/>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Empty"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Empty"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageList"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageList"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageList"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="MessageList_Message"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageList_Message"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageList_Message"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageList_Message"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetCount">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageList_Message"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Strings"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Strings"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetStringField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Strings"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetBytesField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Strings"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetF_Bool">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetF_Int32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetF_Int64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetF_Fixed32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetF_Fixed64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetF_Uint32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetF_Uint64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetF_Float">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </function>
        <function name="GetF_Double">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="GetF_String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetF_Bytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Sint32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetF_Sint64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetF_Enum">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Defaults_Color"/>
          </resultsList>
        </function>
        <function name="GetF_Pinf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </function>
        <function name="GetF_Ninf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </function>
        <function name="GetF_Nan">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </function>
        <function name="GetSub">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="SubDefaults"/>
            </type>
          </resultsList>
        </function>
        <function name="GetStrZero">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SubDefaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SubDefaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetN">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SubDefaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RepeatedEnum"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RepeatedEnum"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetColor">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RepeatedEnum"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="RepeatedEnum_Color"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetBools">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="GetBoolsPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="GetInts">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetIntsPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetInt64SPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetStrings">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="GetFixeds">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupOld"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupOld"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetG">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupOld"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GroupOld_G"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupOld_G"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupOld_G"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetX">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupOld_G"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupNew"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupNew"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetG">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupNew"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GroupNew_G"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupNew_G"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupNew_G"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetX">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupNew_G"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetY">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupNew_G"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FloatingPoint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FloatingPoint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetF">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FloatingPoint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageWithMap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageWithMap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetNameMapping">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageWithMap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="GetMsgMapping">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageWithMap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="int64"/>
              <valtype type="pointer">
                <type type="ident" def="FloatingPoint"/>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="GetByteMapping">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageWithMap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="bool"/>
              <valtype type="slice">
                <elmtype type="ident" def="byte"/>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="GetStrToStr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageWithMap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="FOO_FOO1"/>
        <name value="FOO_name"/>
        <name value="FOO_value"/>
        <name value="GoTest_VOID"/>
        <name value="GoTest_BOOL"/>
        <name value="GoTest_BYTES"/>
        <name value="GoTest_FINGERPRINT"/>
        <name value="GoTest_FLOAT"/>
        <name value="GoTest_INT"/>
        <name value="GoTest_STRING"/>
        <name value="GoTest_TIME"/>
        <name value="GoTest_TUPLE"/>
        <name value="GoTest_ARRAY"/>
        <name value="GoTest_MAP"/>
        <name value="GoTest_TABLE"/>
        <name value="GoTest_FUNCTION"/>
        <name value="GoTest_KIND_name"/>
        <name value="GoTest_KIND_value"/>
        <name value="MyMessage_RED"/>
        <name value="MyMessage_GREEN"/>
        <name value="MyMessage_BLUE"/>
        <name value="MyMessage_Color_name"/>
        <name value="MyMessage_Color_value"/>
        <name value="Defaults_RED"/>
        <name value="Defaults_GREEN"/>
        <name value="Defaults_BLUE"/>
        <name value="Defaults_Color_name"/>
        <name value="Defaults_Color_value"/>
        <name value="RepeatedEnum_RED"/>
        <name value="RepeatedEnum_Color_name"/>
        <name value="RepeatedEnum_Color_value"/>
        <name value="Default_GoTest_F_BoolDefaulted"/>
        <name value="Default_GoTest_F_Int32Defaulted"/>
        <name value="Default_GoTest_F_Int64Defaulted"/>
        <name value="Default_GoTest_F_Fixed32Defaulted"/>
        <name value="Default_GoTest_F_Fixed64Defaulted"/>
        <name value="Default_GoTest_F_Uint32Defaulted"/>
        <name value="Default_GoTest_F_Uint64Defaulted"/>
        <name value="Default_GoTest_F_FloatDefaulted"/>
        <name value="Default_GoTest_F_DoubleDefaulted"/>
        <name value="Default_GoTest_F_StringDefaulted"/>
        <name value="Default_GoTest_F_BytesDefaulted"/>
        <name value="Default_GoTest_F_Sint32Defaulted"/>
        <name value="Default_GoTest_F_Sint64Defaulted"/>
        <name value="Default_InnerMessage_Port"/>
        <name value="E_Ext_More"/>
        <name value="E_Ext_Text"/>
        <name value="E_Ext_Number"/>
        <name value="Default_Defaults_F_Bool"/>
        <name value="Default_Defaults_F_Int32"/>
        <name value="Default_Defaults_F_Int64"/>
        <name value="Default_Defaults_F_Fixed32"/>
        <name value="Default_Defaults_F_Fixed64"/>
        <name value="Default_Defaults_F_Uint32"/>
        <name value="Default_Defaults_F_Uint64"/>
        <name value="Default_Defaults_F_Float"/>
        <name value="Default_Defaults_F_Double"/>
        <name value="Default_Defaults_F_String"/>
        <name value="Default_Defaults_F_Bytes"/>
        <name value="Default_Defaults_F_Sint32"/>
        <name value="Default_Defaults_F_Sint64"/>
        <name value="Default_Defaults_F_Enum"/>
        <name value="Default_Defaults_F_Pinf"/>
        <name value="Default_Defaults_F_Ninf"/>
        <name value="Default_Defaults_F_Nan"/>
        <name value="Default_SubDefaults_N"/>
        <name value="E_Greeting"/>
        <name value="E_X201"/>
        <name value="E_X202"/>
        <name value="E_X203"/>
        <name value="E_X204"/>
        <name value="E_X205"/>
        <name value="E_X206"/>
        <name value="E_X207"/>
        <name value="E_X208"/>
        <name value="E_X209"/>
        <name value="E_X210"/>
        <name value="E_X211"/>
        <name value="E_X212"/>
        <name value="E_X213"/>
        <name value="E_X214"/>
        <name value="E_X215"/>
        <name value="E_X216"/>
        <name value="E_X217"/>
        <name value="E_X218"/>
        <name value="E_X219"/>
        <name value="E_X220"/>
        <name value="E_X221"/>
        <name value="E_X222"/>
        <name value="E_X223"/>
        <name value="E_X224"/>
        <name value="E_X225"/>
        <name value="E_X226"/>
        <name value="E_X227"/>
        <name value="E_X228"/>
        <name value="E_X229"/>
        <name value="E_X230"/>
        <name value="E_X231"/>
        <name value="E_X232"/>
        <name value="E_X233"/>
        <name value="E_X234"/>
        <name value="E_X235"/>
        <name value="E_X236"/>
        <name value="E_X237"/>
        <name value="E_X238"/>
        <name value="E_X239"/>
        <name value="E_X240"/>
        <name value="E_X241"/>
        <name value="E_X242"/>
        <name value="E_X243"/>
        <name value="E_X244"/>
        <name value="E_X245"/>
        <name value="E_X246"/>
        <name value="E_X247"/>
        <name value="E_X248"/>
        <name value="E_X249"/>
        <name value="E_X250"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/util/cli">
      <types>
        <type type="struct" name="Command">
          <field type="ident" def="string" name="Desc"/>
          <field type="func" name="Run">
            <paramsList>
              <type type="ident" def="Term"/>
              <type type="ellipsis">
                <type type="ident" def="string"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </field>
        </type>
        <type name="Term" type="interface">
          <method name="Infof">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Errorf">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Out">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="App">
          <field type="ident" def="string" name="Name"/>
          <field type="func" name="Help">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </field>
          <field type="map" name="commands">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="Command"/>
            </valtype>
          </field>
        </type>
      </types>
      <functions>
        <function name="Infof">
          <recvList>
            <type type="pointer">
              <type type="ident" def="basicTerm"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Errorf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="basicTerm"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Out">
          <recvList>
            <type type="pointer">
              <type type="ident" def="basicTerm"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="BasicTerm">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Term"/>
          </resultsList>
        </function>
        <function name="NewApp">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="App"/>
            </type>
          </resultsList>
        </function>
        <function name="Register">
          <recvList>
            <type type="pointer">
              <type type="ident" def="App"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="Command"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="App"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Term"/>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="BasicHelp">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="App"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="string"/>
              </resultsList>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/syndtr/goleveldb/leveldb/iterator">
      <types>
        <type name="IteratorSeeker" type="interface">
          <method name="First">
            <paramsList/>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Last">
            <paramsList/>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Seek">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Next">
            <paramsList/>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Prev">
            <paramsList/>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
        </type>
        <type name="CommonIterator" type="interface">
          <method name="Valid">
            <paramsList/>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Error">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Iterator" type="interface">
          <method name="Key">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
          <method name="Value">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="ErrorCallbackSetter" type="interface">
          <method name="SetErrorCallback">
            <paramsList>
              <type type="func">
                <paramsList>
                  <type type="ident" def="error"/>
                </paramsList>
                <resultsList/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type name="IteratorIndexer" type="interface">
          <method name="Get">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Iterator"/>
            </resultsList>
          </method>
        </type>
        <type name="BasicArray" type="interface">
          <method name="Len">
            <paramsList/>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
          <method name="Search">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
        </type>
        <type name="Array" type="interface">
          <method name="Index">
            <paramsList>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="ArrayIndexer" type="interface">
          <method name="Get">
            <paramsList>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="Iterator"/>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="First">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Last">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetReleaser">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="util"/>
              <item value="Releaser"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetErrorCallback">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="error"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewMergedIterator">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="Iterator"/>
            </type>
            <type type="selector">
              <prefix value="comparer"/>
              <item value="Comparer"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Iterator"/>
          </resultsList>
        </function>
        <function name="Valid">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="First">
          <recvList>
            <type type="pointer">
              <type type="ident" def="emptyIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Last">
          <recvList>
            <type type="pointer">
              <type type="ident" def="emptyIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="emptyIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="emptyIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="emptyIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="emptyIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewEmptyIterator">
          <recvList/>
          <paramsList>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Iterator"/>
          </resultsList>
        </function>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="First">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Last">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetErrorCallback">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="error"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewIndexedIterator">
          <recvList/>
          <paramsList>
            <type type="ident" def="IteratorIndexer"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Iterator"/>
          </resultsList>
        </function>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="basicArrayIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="First">
          <recvList>
            <type type="pointer">
              <type type="ident" def="basicArrayIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Last">
          <recvList>
            <type type="pointer">
              <type type="ident" def="basicArrayIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="basicArrayIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="basicArrayIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="basicArrayIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="basicArrayIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="arrayIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="arrayIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="arrayIteratorIndexer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Iterator"/>
          </resultsList>
        </function>
        <function name="NewArrayIterator">
          <recvList/>
          <paramsList>
            <type type="ident" def="Array"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Iterator"/>
          </resultsList>
        </function>
        <function name="NewArrayIndexer">
          <recvList/>
          <paramsList>
            <type type="ident" def="ArrayIndexer"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="IteratorIndexer"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ErrIterReleased"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/golang/protobuf/proto">
      <types>
        <type type="struct" name="ParseError">
          <field type="ident" def="string" name="Message"/>
          <field type="ident" def="int" name="Line"/>
          <field type="ident" def="int" name="Offset"/>
        </type>
        <type type="struct" name="StructProperties">
          <field type="slice" name="Prop">
            <elmtype type="pointer">
              <type type="ident" def="Properties"/>
            </elmtype>
          </field>
          <field type="ident" def="int" name="reqCount"/>
          <field type="ident" def="tagMap" name="decoderTags"/>
          <field type="map" name="decoderOrigNames">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="int"/>
          </field>
          <field type="slice" name="order">
            <elmtype type="ident" def="int"/>
          </field>
          <field type="ident" def="field" name="unrecField"/>
          <field type="ident" def="bool" name="extendable"/>
        </type>
        <type type="struct" name="Properties">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="OrigName"/>
          <field type="ident" def="string" name="Wire"/>
          <field type="ident" def="int" name="WireType"/>
          <field type="ident" def="int" name="Tag"/>
          <field type="ident" def="bool" name="Required"/>
          <field type="ident" def="bool" name="Optional"/>
          <field type="ident" def="bool" name="Repeated"/>
          <field type="ident" def="bool" name="Packed"/>
          <field type="ident" def="string" name="Enum"/>
          <field type="ident" def="bool" name="proto3"/>
          <field type="ident" def="string" name="Default"/>
          <field type="ident" def="bool" name="HasDefault"/>
          <field type="ident" def="uint64" name="def_uint64"/>
          <field type="ident" def="encoder" name="enc"/>
          <field type="ident" def="valueEncoder" name="valEnc"/>
          <field type="ident" def="field" name="field"/>
          <field type="slice" name="tagcode">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="array" name="tagbuf">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="selector" name="stype">
            <prefix value="reflect"/>
            <item value="Type"/>
          </field>
          <field type="pointer" name="sprop">
            <type type="ident" def="StructProperties"/>
          </field>
          <field type="ident" def="bool" name="isMarshaler"/>
          <field type="ident" def="bool" name="isUnmarshaler"/>
          <field type="selector" name="mtype">
            <prefix value="reflect"/>
            <item value="Type"/>
          </field>
          <field type="pointer" name="mkeyprop">
            <type type="ident" def="Properties"/>
          </field>
          <field type="pointer" name="mvalprop">
            <type type="ident" def="Properties"/>
          </field>
          <field type="ident" def="sizer" name="size"/>
          <field type="ident" def="valueSizer" name="valSize"/>
          <field type="ident" def="decoder" name="dec"/>
          <field type="ident" def="valueDecoder" name="valDec"/>
          <field type="ident" def="decoder" name="packedDec"/>
        </type>
        <type type="struct" name="MessageSet">
          <field type="slice" name="Item">
            <elmtype type="pointer">
              <type type="ident" def="_MessageSet_Item"/>
            </elmtype>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type name="Message" type="interface">
          <method name="Reset">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="ProtoMessage">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="Stats">
          <field type="ident" def="uint64" name="Emalloc"/>
          <field type="ident" def="uint64" name="Dmalloc"/>
          <field type="ident" def="uint64" name="Encode"/>
          <field type="ident" def="uint64" name="Decode"/>
          <field type="ident" def="uint64" name="Chit"/>
          <field type="ident" def="uint64" name="Cmiss"/>
          <field type="ident" def="uint64" name="Size"/>
        </type>
        <type type="struct" name="Buffer">
          <field type="slice" name="buf">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="int" name="index"/>
          <field type="slice" name="bools">
            <elmtype type="ident" def="bool"/>
          </field>
          <field type="slice" name="uint32s">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="slice" name="uint64s">
            <elmtype type="ident" def="uint64"/>
          </field>
          <field type="slice" name="int32s">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="int64s">
            <elmtype type="ident" def="int64"/>
          </field>
          <field type="slice" name="float32s">
            <elmtype type="ident" def="float32"/>
          </field>
          <field type="slice" name="float64s">
            <elmtype type="ident" def="float64"/>
          </field>
        </type>
        <type type="struct" name="ExtensionRange">
          <field type="ident" def="int32" name="Start"/>
          <field type="ident" def="int32" name="End"/>
        </type>
        <type type="struct" name="ExtensionDesc">
          <field type="ident" def="Message" name="ExtendedType"/>
          <field type="interface" name="ExtensionType"/>
          <field type="ident" def="int32" name="Field"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Tag"/>
        </type>
        <type type="struct" name="Extension">
          <field type="pointer" name="desc">
            <type type="ident" def="ExtensionDesc"/>
          </field>
          <field type="interface" name="value"/>
          <field type="slice" name="enc">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="RequiredNotSetError">
          <field type="ident" def="string" name="field"/>
        </type>
        <type name="Marshaler" type="interface">
          <method name="Marshal">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Unmarshaler" type="interface">
          <method name="Unmarshal">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ParseError"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="token"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalText">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="textWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="textWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteByte">
          <recvList>
            <type type="pointer">
              <type type="ident" def="textWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="byte"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="int32Slice"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="int32Slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="int32Slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="MarshalText">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalTextString">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="CompactText">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CompactTextString">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StructProperties"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StructProperties"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StructProperties"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Properties"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Parse">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Properties"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Init">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Properties"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="reflect"/>
              <item value="Type"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="reflect"/>
                <item value="StructField"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetProperties">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="reflect"/>
              <item value="Type"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="StructProperties"/>
            </type>
          </resultsList>
        </function>
        <function name="RegisterEnum">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="ident" def="string"/>
            </type>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="int32"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="IsValid">
          <recvList>
            <type type="ident" def="field"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="structPointerSlice"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Index">
          <recvList>
            <type type="pointer">
              <type type="ident" def="structPointerSlice"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="structPointer"/>
          </resultsList>
        </function>
        <function name="Append">
          <recvList>
            <type type="pointer">
              <type type="ident" def="structPointerSlice"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="structPointer"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Append">
          <recvList>
            <type type="pointer">
              <type type="ident" def="word32Slice"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint32"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="word32Slice"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Index">
          <recvList>
            <type type="pointer">
              <type type="ident" def="word32Slice"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="Append">
          <recvList>
            <type type="pointer">
              <type type="ident" def="word64Slice"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="word64Slice"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Index">
          <recvList>
            <type type="pointer">
              <type type="ident" def="word64Slice"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="IsValid">
          <recvList>
            <type type="ident" def="field"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="structPointerSlice"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Index">
          <recvList>
            <type type="ident" def="structPointerSlice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="structPointer"/>
          </resultsList>
        </function>
        <function name="Append">
          <recvList>
            <type type="ident" def="structPointerSlice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="structPointer"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Append">
          <recvList>
            <type type="ident" def="word32Slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="uint32"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="word32Slice"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Index">
          <recvList>
            <type type="ident" def="word32Slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="Append">
          <recvList>
            <type type="ident" def="word64Slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="word64Slice"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Index">
          <recvList>
            <type type="ident" def="word64Slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="Has">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Unmarshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Marshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageSet"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageSet"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="MarshalMessageSet">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="ident" def="Extension"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalMessageSet">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="ident" def="Extension"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalMessageSetJSON">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="ident" def="Extension"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalMessageSetJSON">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="ident" def="Extension"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RegisterMessageSetType">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
            <type type="ident" def="int32"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetStats">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Stats"/>
          </resultsList>
        </function>
        <function name="NewBuffer">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetBuf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Bytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Bool">
          <recvList/>
          <paramsList>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="Int32">
          <recvList/>
          <paramsList>
            <type type="ident" def="int32"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="Int">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="Int64">
          <recvList/>
          <paramsList>
            <type type="ident" def="int64"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="int64"/>
            </type>
          </resultsList>
        </function>
        <function name="Float32">
          <recvList/>
          <paramsList>
            <type type="ident" def="float32"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="float32"/>
            </type>
          </resultsList>
        </function>
        <function name="Float64">
          <recvList/>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="float64"/>
            </type>
          </resultsList>
        </function>
        <function name="Uint32">
          <recvList/>
          <paramsList>
            <type type="ident" def="uint32"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="Uint64">
          <recvList/>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="uint64"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="EnumName">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="ident" def="string"/>
            </type>
            <type type="ident" def="int32"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSONEnum">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="int32"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int32"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DebugPrint">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetDefaults">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="mapKeys"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="mapKeys"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="mapKeys"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="SetRawExtension">
          <recvList/>
          <paramsList>
            <type type="ident" def="extendableProto"/>
            <type type="ident" def="int32"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="HasExtension">
          <recvList/>
          <paramsList>
            <type type="ident" def="extendableProto"/>
            <type type="pointer">
              <type type="ident" def="ExtensionDesc"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="ClearExtension">
          <recvList/>
          <paramsList>
            <type type="ident" def="extendableProto"/>
            <type type="pointer">
              <type type="ident" def="ExtensionDesc"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetExtension">
          <recvList/>
          <paramsList>
            <type type="ident" def="extendableProto"/>
            <type type="pointer">
              <type type="ident" def="ExtensionDesc"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="interface"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetExtensions">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="ExtensionDesc"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetExtension">
          <recvList/>
          <paramsList>
            <type type="ident" def="extendableProto"/>
            <type type="pointer">
              <type type="ident" def="ExtensionDesc"/>
            </type>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RegisterExtension">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="ExtensionDesc"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RegisteredExtensions">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="pointer">
                <type type="ident" def="ExtensionDesc"/>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="Equal">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RequiredNotSetError"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="EncodeVarint">
          <recvList/>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="EncodeVarint">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EncodeFixed64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EncodeFixed32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EncodeZigzag64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EncodeZigzag32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EncodeRawBytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EncodeStringBytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Marshal">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Marshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Size">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="DecodeVarint">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="DecodeVarint">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodeFixed64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodeFixed32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodeZigzag64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodeZigzag32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodeRawBytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodeStringBytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Unmarshal">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalMerge">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Unmarshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Clone">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Message"/>
          </resultsList>
        </function>
        <function name="Merge">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="WireVarint"/>
        <name value="WireFixed64"/>
        <name value="WireBytes"/>
        <name value="WireStartGroup"/>
        <name value="WireEndGroup"/>
        <name value="WireFixed32"/>
        <name value="ErrNoMessageTypeId"/>
        <name value="ErrMissingExtension"/>
        <name value="ErrNil"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/prometheus/log">
      <types/>
      <functions>
        <function name="String">
          <recvList>
            <type type="ident" def="levelFlag"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Set">
          <recvList>
            <type type="ident" def="levelFlag"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Debug">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Debugln">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Debugf">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Info">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Infoln">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Infof">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warn">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warnln">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warnf">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Error">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Errorln">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Errorf">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatal">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatalln">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatalf">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Panic">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Panicln">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Panicf">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/syndtr/goleveldb/leveldb/testutil">
      <types>
        <type name="StorageMode" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="Storage">
          <field type="selector" name="">
            <prefix value="storage"/>
            <item value="Storage"/>
          </field>
          <field type="func" name="closeFn">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </field>
          <field type="selector" name="lmu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="selector" name="lb">
            <prefix value="bytes"/>
            <item value="Buffer"/>
          </field>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="map" name="opens">
            <keytype type="ident" def="uint64"/>
            <valtype type="ident" def="bool"/>
          </field>
          <field type="array" name="counters">
            <elmtype type="ident" def="int"/>
          </field>
          <field type="array" name="bytesCounter">
            <elmtype type="ident" def="int64"/>
          </field>
          <field type="array" name="emulatedError">
            <elmtype type="ident" def="error"/>
          </field>
          <field type="selector" name="stallCond">
            <prefix value="sync"/>
            <item value="Cond"/>
          </field>
          <field type="array" name="stalled">
            <elmtype type="ident" def="bool"/>
          </field>
        </type>
        <type type="struct" name="KeyValueEntry">
          <field type="slice" name="key">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="value">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="KeyValue">
          <field type="slice" name="entries">
            <elmtype type="ident" def="KeyValueEntry"/>
          </field>
          <field type="ident" def="int" name="nbytes"/>
        </type>
        <type name="IterAct" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="IteratorTesting">
          <field type="ident" def="KeyValue" name=""/>
          <field type="selector" name="Iter">
            <prefix value="iterator"/>
            <item value="Iterator"/>
          </field>
          <field type="pointer" name="Rand">
            <type type="selector">
              <prefix value="rand"/>
              <item value="Rand"/>
            </type>
          </field>
          <field type="func" name="PostFn">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="IteratorTesting"/>
              </type>
            </paramsList>
            <resultsList/>
          </field>
          <field type="ident" def="int" name="Pos"/>
          <field type="ident" def="IterAct" name="Act"/>
          <field type="ident" def="IterAct" name="LastAct"/>
          <field type="ident" def="bool" name="once"/>
        </type>
        <type name="DB" type="interface"/>
        <type name="Put" type="interface">
          <method name="TestPut">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Delete" type="interface">
          <method name="TestDelete">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Find" type="interface">
          <method name="TestFind">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Get" type="interface">
          <method name="TestGet">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Has" type="interface">
          <method name="TestHas">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="NewIterator" type="interface">
          <method name="TestNewIterator">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="util"/>
                  <item value="Range"/>
                </type>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="iterator"/>
                <item value="Iterator"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="DBAct" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="DBTesting">
          <field type="pointer" name="Rand">
            <type type="selector">
              <prefix value="rand"/>
              <item value="Rand"/>
            </type>
          </field>
          <field type="interface" name="DB"/>
          <field type="func" name="PostFn">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="DBTesting"/>
              </type>
            </paramsList>
            <resultsList/>
          </field>
          <field type="ident" def="KeyValue" name="Deleted"/>
          <field type="ident" def="KeyValue" name="Present"/>
          <field type="ident" def="DBAct" name="Act"/>
          <field type="ident" def="DBAct" name="LastAct"/>
          <field type="slice" name="ActKey">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="LastActKey">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Defer">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="RunDefer">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="RandomSeed">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="NewRand">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="BytesSeparator">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="BytesAfter">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="RandomIndex">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ShuffledIndex">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RandomRange">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
                <type type="ident" def="int"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Max">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Min">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="emulatedError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="ident" def="storageLock"/>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadAt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="int64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="reader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="writer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sync">
          <recvList>
            <type type="pointer">
              <type type="ident" def="writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Open">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Create">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Remove">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Log">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Lock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="util"/>
              <item value="Releaser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetFile">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileType"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="File"/>
            </type>
          </resultsList>
        </function>
        <function name="GetFiles">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileType"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="storage"/>
                <item value="File"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetManifest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="File"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetManifest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="File"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ResetCounter">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="StorageMode"/>
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileType"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Counter">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="StorageMode"/>
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileType"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="EmulateError">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="StorageMode"/>
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileType"/>
            </type>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Stall">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="StorageMode"/>
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileType"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="StorageMode"/>
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileType"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewStorage">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </resultsList>
        </function>
        <function name="KeyValueTesting">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
            <type type="ident" def="KeyValue"/>
            <type type="ident" def="DB"/>
            <type type="func">
              <paramsList>
                <type type="ident" def="KeyValue"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="DB"/>
              </resultsList>
            </type>
            <type type="func">
              <paramsList>
                <type type="ident" def="DB"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AllKeyValueTesting">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
            <type type="func">
              <paramsList>
                <type type="ident" def="KeyValue"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="DB"/>
              </resultsList>
            </type>
            <type type="func">
              <paramsList>
                <type type="ident" def="KeyValue"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="DB"/>
              </resultsList>
            </type>
            <type type="func">
              <paramsList>
                <type type="ident" def="DB"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PutString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PutU">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="PutUString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="DeleteIndex">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Size">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="KeyAt">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="ValueAt">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Index">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="IndexInexact">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="IndexOrNil">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="IndexString">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Search">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="SearchString">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetString">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Iterate">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="IterateString">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
                <type type="ident" def="string"/>
                <type type="ident" def="string"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="IterateShuffled">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="IterateShuffledString">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
                <type type="ident" def="string"/>
                <type type="ident" def="string"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="IterateInexact">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="IterateInexactString">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
                <type type="ident" def="string"/>
                <type type="ident" def="string"/>
                <type type="ident" def="string"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Clone">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="KeyValue"/>
          </resultsList>
        </function>
        <function name="Slice">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="KeyValue"/>
          </resultsList>
        </function>
        <function name="SliceKey">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="KeyValue"/>
          </resultsList>
        </function>
        <function name="SliceKeyString">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="KeyValue"/>
          </resultsList>
        </function>
        <function name="SliceRange">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="util"/>
                <item value="Range"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="KeyValue"/>
          </resultsList>
        </function>
        <function name="Range">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="util"/>
              <item value="Range"/>
            </type>
          </resultsList>
        </function>
        <function name="KeyValue_EmptyKey">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </resultsList>
        </function>
        <function name="KeyValue_EmptyValue">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </resultsList>
        </function>
        <function name="KeyValue_OneKeyValue">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </resultsList>
        </function>
        <function name="KeyValue_BigValue">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </resultsList>
        </function>
        <function name="KeyValue_SpecialKey">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </resultsList>
        </function>
        <function name="KeyValue_MultipleKeyValue">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </resultsList>
        </function>
        <function name="KeyValue_Generate">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="IterAct"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Text">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="IsFirst">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="IsLast">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="TestKV">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="First">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Last">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SeekInexact">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SeekKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SOI">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="EOI">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="WalkPrev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="pointer">
                  <type type="ident" def="IteratorTesting"/>
                </type>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="WalkNext">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="pointer">
                  <type type="ident" def="IteratorTesting"/>
                </type>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PrevAll">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="NextAll">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="DoIteratorTesting">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RunSuite">
          <recvList/>
          <paramsList>
            <type type="ident" def="GinkgoTestingT"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="DBAct"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Text">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="TestPresentKV">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="TestAllPresent">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="TestDeletedKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="TestAllDeleted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="TestAll">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PutRandom">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="DeleteRandom">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="RandomAct">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="DoDBTesting">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="ModeOpen"/>
        <name value="ModeCreate"/>
        <name value="ModeRemove"/>
        <name value="ModeRead"/>
        <name value="ModeWrite"/>
        <name value="ModeSync"/>
        <name value="ModeClose"/>
        <name value="IterNone"/>
        <name value="IterFirst"/>
        <name value="IterLast"/>
        <name value="IterPrev"/>
        <name value="IterNext"/>
        <name value="IterSeek"/>
        <name value="IterSOI"/>
        <name value="IterEOI"/>
        <name value="DBNone"/>
        <name value="DBPut"/>
        <name value="DBOverwrite"/>
        <name value="DBDelete"/>
        <name value="DBDeleteNA"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/template">
      <types/>
      <functions>
        <function name="Len">
          <recvList>
            <type type="ident" def="queryResultByLabelSorter"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="queryResultByLabelSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="queryResultByLabelSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewTemplateExpander">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="interface"/>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="promql"/>
                <item value="Engine"/>
              </type>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="templateExpander"/>
            </type>
          </resultsList>
        </function>
        <function name="Funcs">
          <recvList>
            <type type="ident" def="templateExpander"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="text_template"/>
              <item value="FuncMap"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Expand">
          <recvList>
            <type type="ident" def="templateExpander"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ExpandHTML">
          <recvList>
            <type type="ident" def="templateExpander"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/syndtr/gosnappy/snappy">
      <types>
        <type type="struct" name="Writer">
          <field type="selector" name="w">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="ident" def="error" name="err"/>
          <field type="slice" name="enc">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="array" name="buf">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="bool" name="wroteHeader"/>
        </type>
        <type type="struct" name="Reader">
          <field type="selector" name="r">
            <prefix value="io"/>
            <item value="Reader"/>
          </field>
          <field type="ident" def="error" name="err"/>
          <field type="slice" name="decoded">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="buf">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="int" name="i"/>
          <field type="ident" def="int" name="j"/>
          <field type="ident" def="bool" name="readHeader"/>
        </type>
      </types>
      <functions>
        <function name="Encode">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MaxEncodedLen">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="NewWriter">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodedLen">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Decode">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewReader">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ErrCorrupt"/>
        <name value="ErrUnsupported"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/julienschmidt/httprouter">
      <types>
        <type name="Handle" type="func">
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
            <type type="ident" def="Params"/>
          </paramsList>
          <resultsList/>
        </type>
        <type type="struct" name="Param">
          <field type="ident" def="string" name="Key"/>
          <field type="ident" def="string" name="Value"/>
        </type>
        <type name="Params" type="slice">
          <elmtype type="ident" def="Param"/>
        </type>
        <type type="struct" name="Router">
          <field type="map" name="trees">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="node"/>
            </valtype>
          </field>
          <field type="ident" def="bool" name="RedirectTrailingSlash"/>
          <field type="ident" def="bool" name="RedirectFixedPath"/>
          <field type="ident" def="bool" name="HandleMethodNotAllowed"/>
          <field type="selector" name="NotFound">
            <prefix value="http"/>
            <item value="HandlerFunc"/>
          </field>
          <field type="selector" name="MethodNotAllowed">
            <prefix value="http"/>
            <item value="HandlerFunc"/>
          </field>
          <field type="func" name="PanicHandler">
            <paramsList>
              <type type="selector">
                <prefix value="http"/>
                <item value="ResponseWriter"/>
              </type>
              <type type="pointer">
                <type type="selector">
                  <prefix value="http"/>
                  <item value="Request"/>
                </type>
              </type>
              <type type="interface"/>
            </paramsList>
            <resultsList/>
          </field>
        </type>
      </types>
      <functions>
        <function name="ByName">
          <recvList>
            <type type="ident" def="Params"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="New">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </resultsList>
        </function>
        <function name="GET">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="Handle"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="HEAD">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="Handle"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="OPTIONS">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="Handle"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="POST">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="Handle"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PUT">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="Handle"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PATCH">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="Handle"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="DELETE">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="Handle"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Handle">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="Handle"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Handler">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="http"/>
              <item value="Handler"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="HandlerFunc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ServeFiles">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="http"/>
              <item value="FileSystem"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Lookup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Handle"/>
            <type type="ident" def="Params"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="ServeHTTP">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Router"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="CleanPath">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/matttproud/golang_protobuf_extensions/pbutil">
      <types/>
      <functions>
        <function name="WriteDelimited">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="selector">
              <prefix value="proto"/>
              <item value="Message"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadDelimited">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="selector">
              <prefix value="proto"/>
              <item value="Message"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/util/strutil">
      <types/>
      <functions>
        <function name="DurationToString">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="StringToDuration">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="TableLinkForExpression">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GraphLinkForExpression">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/util/stats">
      <types>
        <type type="struct" name="Timer">
          <field type="selector" name="name">
            <prefix value="fmt"/>
            <item value="Stringer"/>
          </field>
          <field type="selector" name="created">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="selector" name="start">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="selector" name="duration">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
        </type>
        <type type="struct" name="TimerGroup">
          <field type="map" name="timers">
            <keytype type="selector">
              <prefix value="fmt"/>
              <item value="Stringer"/>
            </keytype>
            <valtype type="pointer">
              <type type="ident" def="Timer"/>
            </valtype>
          </field>
          <field type="pointer" name="child">
            <type type="ident" def="TimerGroup"/>
          </field>
        </type>
        <type name="Timers" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="Timer"/>
          </elmtype>
        </type>
        <type name="QueryTiming" type="ident">
          <type type="ident" def="int"/>
        </type>
      </types>
      <functions>
        <function name="Start">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Timer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Timer"/>
            </type>
          </resultsList>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Timer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ElapsedTime">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Timer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Timer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewTimerGroup">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="TimerGroup"/>
            </type>
          </resultsList>
        </function>
        <function name="GetTimer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TimerGroup"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="fmt"/>
              <item value="Stringer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Timer"/>
            </type>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="Timers"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="Timers"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byCreationTimeSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TimerGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="QueryTiming"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="TotalEvalTime"/>
        <name value="ResultSortTime"/>
        <name value="JSONEncodeTime"/>
        <name value="PreloadTime"/>
        <name value="TotalQueryPreparationTime"/>
        <name value="InnerViewBuildingTime"/>
        <name value="InnerEvalTime"/>
        <name value="ResultAppendTime"/>
        <name value="QueryAnalysisTime"/>
        <name value="GetValueAtTimeTime"/>
        <name value="GetBoundaryValuesTime"/>
        <name value="GetRangeValuesTime"/>
        <name value="ExecQueueTime"/>
        <name value="ViewDiskPreparationTime"/>
        <name value="ViewDataExtractionTime"/>
        <name value="ViewDiskExtractionTime"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/gopkg.in/yaml.v2">
      <types>
        <type name="MapSlice" type="slice">
          <elmtype type="ident" def="MapItem"/>
        </type>
        <type type="struct" name="MapItem">
          <field type="interface" name="Key"/>
          <field type="interface" name="Value"/>
        </type>
        <type name="Unmarshaler" type="interface">
          <method name="UnmarshalYAML">
            <paramsList>
              <type type="func">
                <paramsList>
                  <type type="interface"/>
                </paramsList>
                <resultsList>
                  <type type="ident" def="error"/>
                </resultsList>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Marshaler" type="interface">
          <method name="MarshalYAML">
            <paramsList/>
            <resultsList>
              <type type="interface"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="TypeError">
          <field type="slice" name="Errors">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="String">
          <recvList>
            <type type="ident" def="yaml_token_type_t"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="yaml_parser_state_t"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Unmarshal">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Marshal">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TypeError"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="keyList"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="keyList"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="keyList"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/syndtr/goleveldb/leveldb/cache">
      <types>
        <type name="Cacher" type="interface">
          <method name="Capacity">
            <paramsList/>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
          <method name="SetCapacity">
            <paramsList>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Promote">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="Node"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Ban">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="Node"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Evict">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="Node"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="EvictNS">
            <paramsList>
              <type type="ident" def="uint64"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="EvictAll">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Close">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Value" type="interface"/>
        <type type="struct" name="CacheGetter">
          <field type="pointer" name="Cache">
            <type type="ident" def="Cache"/>
          </field>
          <field type="ident" def="uint64" name="NS"/>
        </type>
        <type type="struct" name="Cache">
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="selector" name="mHead">
            <prefix value="unsafe"/>
            <item value="Pointer"/>
          </field>
          <field type="ident" def="int32" name="nodes"/>
          <field type="ident" def="int32" name="size"/>
          <field type="ident" def="Cacher" name="cacher"/>
          <field type="ident" def="bool" name="closed"/>
        </type>
        <type type="struct" name="Node">
          <field type="pointer" name="r">
            <type type="ident" def="Cache"/>
          </field>
          <field type="ident" def="uint32" name="hash"/>
          <field type="ident" def="uint64" name="ns"/>
          <field type="ident" def="uint64" name="key"/>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="ident" def="int" name="size"/>
          <field type="ident" def="Value" name="value"/>
          <field type="ident" def="int32" name="ref"/>
          <field type="slice" name="onDel">
            <elmtype type="func">
              <paramsList/>
              <resultsList/>
            </elmtype>
          </field>
          <field type="selector" name="CacheData">
            <prefix value="unsafe"/>
            <item value="Pointer"/>
          </field>
        </type>
        <type type="struct" name="Handle">
          <field type="selector" name="n">
            <prefix value="unsafe"/>
            <item value="Pointer"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Capacity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lru"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="SetCapacity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lru"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Promote">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lru"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Ban">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lru"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Evict">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lru"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="EvictNS">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lru"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="EvictAll">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lru"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lru"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewLRU">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Cacher"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CacheGetter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="int"/>
                <type type="ident" def="Value"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Handle"/>
            </type>
          </resultsList>
        </function>
        <function name="NewCache">
          <recvList/>
          <paramsList>
            <type type="ident" def="Cacher"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </resultsList>
        </function>
        <function name="Nodes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Size">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Capacity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="SetCapacity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="uint64"/>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="int"/>
                <type type="ident" def="Value"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Handle"/>
            </type>
          </resultsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="uint64"/>
            <type type="func">
              <paramsList/>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Evict">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="EvictNS">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="EvictAll">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NS">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="Size">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="Ref">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetHandle">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Handle"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Handle"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Handle"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/retrieval">
      <types>
        <type name="TargetProvider" type="interface">
          <method name="Sources">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="string"/>
              </type>
            </resultsList>
          </method>
          <method name="Run">
            <paramsList>
              <type type="channel" dir="1">
                <type type="pointer">
                  <type type="selector">
                    <prefix value="config"/>
                    <item value="TargetGroup"/>
                  </type>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Stop">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="TargetManager">
          <field type="selector" name="m">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="selector" name="globalLabels">
            <prefix value="clientmodel"/>
            <item value="LabelSet"/>
          </field>
          <field type="selector" name="sampleAppender">
            <prefix value="storage"/>
            <item value="SampleAppender"/>
          </field>
          <field type="ident" def="bool" name="running"/>
          <field type="map" name="targets">
            <keytype type="ident" def="string"/>
            <valtype type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Target"/>
              </elmtype>
            </valtype>
          </field>
          <field type="map" name="providers">
            <keytype type="pointer">
              <type type="selector">
                <prefix value="config"/>
                <item value="ScrapeConfig"/>
              </type>
            </keytype>
            <valtype type="slice">
              <elmtype type="ident" def="TargetProvider"/>
            </valtype>
          </field>
        </type>
        <type type="struct" name="StaticProvider">
          <field type="slice" name="TargetGroups">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="config"/>
                <item value="TargetGroup"/>
              </type>
            </elmtype>
          </field>
        </type>
        <type name="TargetHealth" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="TargetStatus">
          <field type="ident" def="error" name="lastError"/>
          <field type="selector" name="lastScrape">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="TargetHealth" name="health"/>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
        </type>
        <type type="struct" name="Target">
          <field type="pointer" name="status">
            <type type="ident" def="TargetStatus"/>
          </field>
          <field type="channel" dir="3" name="scraperStopping">
            <type type="struct" name=""/>
          </field>
          <field type="channel" dir="3" name="scraperStopped">
            <type type="struct" name=""/>
          </field>
          <field type="channel" dir="3" name="ingestedSamples">
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Samples"/>
            </type>
          </field>
          <field type="selector" name="">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="pointer" name="httpClient">
            <type type="selector">
              <prefix value="http"/>
              <item value="Client"/>
            </type>
          </field>
          <field type="pointer" name="url">
            <type type="selector">
              <prefix value="url"/>
              <item value="URL"/>
            </type>
          </field>
          <field type="selector" name="metaLabels">
            <prefix value="clientmodel"/>
            <item value="LabelSet"/>
          </field>
          <field type="selector" name="baseLabels">
            <prefix value="clientmodel"/>
            <item value="LabelSet"/>
          </field>
          <field type="selector" name="deadline">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="scrapeInterval">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="bool" name="honorLabels"/>
          <field type="slice" name="metricRelabelConfigs">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="config"/>
                <item value="RelabelConfig"/>
              </type>
            </elmtype>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewTargetManager">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="SampleAppender"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="TargetManager"/>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetManager"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetManager"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Pools">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetManager"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="slice">
                <elmtype type="pointer">
                  <type type="ident" def="Target"/>
                </elmtype>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="ApplyConfig">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetManager"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="config"/>
                <item value="Config"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="ProvidersFromConfig">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="config"/>
                <item value="ScrapeConfig"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="TargetProvider"/>
            </type>
          </resultsList>
        </function>
        <function name="NewStaticProvider">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="config"/>
                  <item value="TargetGroup"/>
                </type>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="StaticProvider"/>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StaticProvider"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="selector">
                  <prefix value="config"/>
                  <item value="TargetGroup"/>
                </type>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StaticProvider"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Sources">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StaticProvider"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="TargetHealth"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="LastError">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetStatus"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="LastScrape">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetStatus"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </resultsList>
        </function>
        <function name="Health">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetStatus"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="TargetHealth"/>
          </resultsList>
        </function>
        <function name="NewTarget">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="config"/>
                <item value="ScrapeConfig"/>
              </type>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelSet"/>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelSet"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Target"/>
            </type>
          </resultsList>
        </function>
        <function name="Status">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Target"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="TargetStatus"/>
            </type>
          </resultsList>
        </function>
        <function name="Update">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Target"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="config"/>
                <item value="ScrapeConfig"/>
              </type>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelSet"/>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelSet"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Target"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Ingest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Target"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Samples"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RunScraper">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Target"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="SampleAppender"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="StopScraper">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Target"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="URL">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Target"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="url"/>
                <item value="URL"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="InstanceIdentifier">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Target"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="BaseLabels">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Target"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelSet"/>
            </type>
          </resultsList>
        </function>
        <function name="MetaLabels">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Target"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelSet"/>
            </type>
          </resultsList>
        </function>
        <function name="Relabel">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelSet"/>
            </type>
            <type type="ellipsis">
              <type type="pointer">
                <type type="selector">
                  <prefix value="config"/>
                  <item value="RelabelConfig"/>
                </type>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelSet"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="HealthUnknown"/>
        <name value="HealthGood"/>
        <name value="HealthBad"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/prometheus/client_golang/model">
      <types>
        <type name="Timestamp" type="ident">
          <type type="ident" def="int64"/>
        </type>
        <type name="SampleValue" type="ident">
          <type type="ident" def="float64"/>
        </type>
        <type type="struct" name="Sample">
          <field type="ident" def="Metric" name="Metric"/>
          <field type="ident" def="SampleValue" name="Value"/>
          <field type="ident" def="Timestamp" name="Timestamp"/>
        </type>
        <type name="Samples" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="Sample"/>
          </elmtype>
        </type>
        <type name="Metric" type="map">
          <keytype type="ident" def="LabelName"/>
          <valtype type="ident" def="LabelValue"/>
        </type>
        <type type="struct" name="COWMetric">
          <field type="ident" def="bool" name="Copied"/>
          <field type="ident" def="Metric" name="Metric"/>
        </type>
        <type name="LabelValue" type="ident">
          <type type="ident" def="string"/>
        </type>
        <type name="LabelValues" type="slice">
          <elmtype type="ident" def="LabelValue"/>
        </type>
        <type name="LabelSet" type="map">
          <keytype type="ident" def="LabelName"/>
          <valtype type="ident" def="LabelValue"/>
        </type>
        <type name="LabelName" type="ident">
          <type type="ident" def="string"/>
        </type>
        <type name="LabelNames" type="slice">
          <elmtype type="ident" def="LabelName"/>
        </type>
        <type name="Fingerprint" type="ident">
          <type type="ident" def="uint64"/>
        </type>
        <type name="Fingerprints" type="slice">
          <elmtype type="ident" def="Fingerprint"/>
        </type>
        <type name="FingerprintSet" type="map">
          <keytype type="ident" def="Fingerprint"/>
          <valtype type="struct" name=""/>
        </type>
      </types>
      <functions>
        <function name="Equal">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Timestamp"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Before">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Timestamp"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="After">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Timestamp"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="native_time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Timestamp"/>
          </resultsList>
        </function>
        <function name="Sub">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Timestamp"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="native_time"/>
              <item value="Duration"/>
            </type>
          </resultsList>
        </function>
        <function name="Time">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="native_time"/>
              <item value="Time"/>
            </type>
          </resultsList>
        </function>
        <function name="Unix">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="UnixNano">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Now">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Timestamp"/>
          </resultsList>
        </function>
        <function name="TimestampFromTime">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="native_time"/>
              <item value="Time"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Timestamp"/>
          </resultsList>
        </function>
        <function name="TimestampFromUnix">
          <recvList/>
          <paramsList>
            <type type="ident" def="int64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Timestamp"/>
          </resultsList>
        </function>
        <function name="TimestampFromUnixNano">
          <recvList/>
          <paramsList>
            <type type="ident" def="int64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Timestamp"/>
          </resultsList>
        </function>
        <function name="LabelsToSignature">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="SignatureForLabels">
          <recvList/>
          <paramsList>
            <type type="ident" def="Metric"/>
            <type type="ident" def="LabelNames"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="SignatureWithoutLabels">
          <recvList/>
          <paramsList>
            <type type="ident" def="Metric"/>
            <type type="map">
              <keytype type="ident" def="LabelName"/>
              <valtype type="struct" name=""/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="Equal">
          <recvList>
            <type type="ident" def="SampleValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="SampleValue"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="ident" def="SampleValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="SampleValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Equal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sample"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Sample"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="Samples"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="Samples"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="Samples"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Equal">
          <recvList>
            <type type="ident" def="Samples"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Samples"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Equal">
          <recvList>
            <type type="ident" def="Metric"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Metric"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Before">
          <recvList>
            <type type="ident" def="Metric"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Metric"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Metric"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Fingerprint">
          <recvList>
            <type type="ident" def="Metric"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Fingerprint"/>
          </resultsList>
        </function>
        <function name="FastFingerprint">
          <recvList>
            <type type="ident" def="Metric"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Fingerprint"/>
          </resultsList>
        </function>
        <function name="Clone">
          <recvList>
            <type type="ident" def="Metric"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Metric"/>
          </resultsList>
        </function>
        <function name="MergeFromLabelSet">
          <recvList>
            <type type="ident" def="Metric"/>
          </recvList>
          <paramsList>
            <type type="ident" def="LabelSet"/>
            <type type="ident" def="LabelName"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Set">
          <recvList>
            <type type="pointer">
              <type type="ident" def="COWMetric"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="LabelName"/>
            <type type="ident" def="LabelValue"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="COWMetric"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="LabelName"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="COWMetric"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="ident" def="COWMetric"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="LabelValues"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="LabelValues"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="LabelValues"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Merge">
          <recvList>
            <type type="ident" def="LabelSet"/>
          </recvList>
          <paramsList>
            <type type="ident" def="LabelSet"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="LabelSet"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="LabelSet"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MergeFromMetric">
          <recvList>
            <type type="ident" def="LabelSet"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Metric"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalYAML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelName"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="interface"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelName"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="LabelNames"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="LabelNames"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="LabelNames"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="LabelNames"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Fingerprint"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="Fingerprint"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Fingerprint"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Equal">
          <recvList>
            <type type="ident" def="Fingerprint"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Fingerprint"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="LoadFromString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Fingerprint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="Fingerprints"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="Fingerprints"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="Fingerprints"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Equal">
          <recvList>
            <type type="ident" def="FingerprintSet"/>
          </recvList>
          <paramsList>
            <type type="ident" def="FingerprintSet"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Intersection">
          <recvList>
            <type type="ident" def="FingerprintSet"/>
          </recvList>
          <paramsList>
            <type type="ident" def="FingerprintSet"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="FingerprintSet"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="MinimumTick"/>
        <name value="Earliest"/>
        <name value="Latest"/>
        <name value="SeparatorByte"/>
        <name value="ExportedLabelPrefix"/>
        <name value="MetricNameLabel"/>
        <name value="AddressLabel"/>
        <name value="MetricsPathLabel"/>
        <name value="ReservedLabelPrefix"/>
        <name value="MetaLabelPrefix"/>
        <name value="JobLabel"/>
        <name value="InstanceLabel"/>
        <name value="BucketLabel"/>
        <name value="QuantileLabel"/>
        <name value="LabelNameRE"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/syndtr/goleveldb/leveldb/util">
      <types>
        <type name="Releaser" type="interface">
          <method name="Release">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type name="ReleaseSetter" type="interface">
          <method name="SetReleaser">
            <paramsList>
              <type type="ident" def="Releaser"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="BasicReleaser">
          <field type="ident" def="Releaser" name="releaser"/>
          <field type="ident" def="bool" name="released"/>
        </type>
        <type type="struct" name="NoopReleaser"/>
        <type type="struct" name="Range">
          <field type="slice" name="Start">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="Limit">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Pool">
          <field type="channel" dir="3" name="pool">
            <type type="interface"/>
          </field>
        </type>
        <type type="struct" name="Pool">
          <field type="selector" name="">
            <prefix value="sync"/>
            <item value="Pool"/>
          </field>
        </type>
        <type name="CRC" type="ident">
          <type type="ident" def="uint32"/>
        </type>
        <type type="struct" name="BufferPool">
          <field type="array" name="pool">
            <elmtype type="channel" dir="3">
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </elmtype>
          </field>
          <field type="array" name="size">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="array" name="sizeMiss">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="array" name="sizeHalf">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="array" name="baseline">
            <elmtype type="ident" def="int"/>
          </field>
          <field type="ident" def="int" name="baseline0"/>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="ident" def="bool" name="closed"/>
          <field type="channel" dir="3" name="closeC">
            <type type="struct" name=""/>
          </field>
          <field type="ident" def="uint32" name="get"/>
          <field type="ident" def="uint32" name="put"/>
          <field type="ident" def="uint32" name="half"/>
          <field type="ident" def="uint32" name="less"/>
          <field type="ident" def="uint32" name="equal"/>
          <field type="ident" def="uint32" name="greater"/>
          <field type="ident" def="uint32" name="miss"/>
        </type>
        <type type="struct" name="Buffer">
          <field type="slice" name="buf">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="int" name="off"/>
          <field type="array" name="bootstrap">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Released">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BasicReleaser"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BasicReleaser"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetReleaser">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BasicReleaser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Releaser"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Release">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="BytesPrefix">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Range"/>
            </type>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Pool"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Pool"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewPool">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Pool"/>
            </type>
          </resultsList>
        </function>
        <function name="NewPool">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Pool"/>
            </type>
          </resultsList>
        </function>
        <function name="Hash">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="uint32"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="NewCRC">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="CRC"/>
          </resultsList>
        </function>
        <function name="Update">
          <recvList>
            <type type="ident" def="CRC"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="CRC"/>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="ident" def="CRC"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BufferPool"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BufferPool"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BufferPool"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BufferPool"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewBufferPool">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="BufferPool"/>
            </type>
          </resultsList>
        </function>
        <function name="Bytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Truncate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Alloc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Grow">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadFrom">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteTo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteByte">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="byte"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="ReadByte">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="byte"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadBytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="byte"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewBuffer">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ErrReleased"/>
        <name value="ErrHasReleaser"/>
        <name value="MinRead"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/prometheus/client_model/go">
      <types>
        <type name="MetricType" type="ident">
          <type type="ident" def="int32"/>
        </type>
        <type type="struct" name="LabelPair">
          <field type="pointer" name="Name">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Value">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Gauge">
          <field type="pointer" name="Value">
            <type type="ident" def="float64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Counter">
          <field type="pointer" name="Value">
            <type type="ident" def="float64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Quantile">
          <field type="pointer" name="Quantile">
            <type type="ident" def="float64"/>
          </field>
          <field type="pointer" name="Value">
            <type type="ident" def="float64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Summary">
          <field type="pointer" name="SampleCount">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="SampleSum">
            <type type="ident" def="float64"/>
          </field>
          <field type="slice" name="Quantile">
            <elmtype type="pointer">
              <type type="ident" def="Quantile"/>
            </elmtype>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Untyped">
          <field type="pointer" name="Value">
            <type type="ident" def="float64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Histogram">
          <field type="pointer" name="SampleCount">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="SampleSum">
            <type type="ident" def="float64"/>
          </field>
          <field type="slice" name="Bucket">
            <elmtype type="pointer">
              <type type="ident" def="Bucket"/>
            </elmtype>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Bucket">
          <field type="pointer" name="CumulativeCount">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="UpperBound">
            <type type="ident" def="float64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Metric">
          <field type="slice" name="Label">
            <elmtype type="pointer">
              <type type="ident" def="LabelPair"/>
            </elmtype>
          </field>
          <field type="pointer" name="Gauge">
            <type type="ident" def="Gauge"/>
          </field>
          <field type="pointer" name="Counter">
            <type type="ident" def="Counter"/>
          </field>
          <field type="pointer" name="Summary">
            <type type="ident" def="Summary"/>
          </field>
          <field type="pointer" name="Untyped">
            <type type="ident" def="Untyped"/>
          </field>
          <field type="pointer" name="Histogram">
            <type type="ident" def="Histogram"/>
          </field>
          <field type="pointer" name="TimestampMs">
            <type type="ident" def="int64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MetricFamily">
          <field type="pointer" name="Name">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Help">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Type">
            <type type="ident" def="MetricType"/>
          </field>
          <field type="slice" name="Metric">
            <elmtype type="pointer">
              <type type="ident" def="Metric"/>
            </elmtype>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Enum">
          <recvList>
            <type type="ident" def="MetricType"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="MetricType"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="MetricType"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricType"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetValue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Gauge"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Gauge"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetValue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Gauge"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Counter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Counter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetValue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Counter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Quantile"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Quantile"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetQuantile">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Quantile"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="GetValue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Quantile"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Summary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Summary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetSampleCount">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Summary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetSampleSum">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Summary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="GetQuantile">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Summary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Quantile"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Untyped"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Untyped"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetValue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Untyped"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Histogram"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Histogram"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetSampleCount">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Histogram"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetSampleSum">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Histogram"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="GetBucket">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Histogram"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Bucket"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Bucket"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Bucket"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetCumulativeCount">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Bucket"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetUpperBound">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Bucket"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetLabel">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="LabelPair"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="GetGauge">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Gauge"/>
            </type>
          </resultsList>
        </function>
        <function name="GetCounter">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Counter"/>
            </type>
          </resultsList>
        </function>
        <function name="GetSummary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Summary"/>
            </type>
          </resultsList>
        </function>
        <function name="GetUntyped">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Untyped"/>
            </type>
          </resultsList>
        </function>
        <function name="GetHistogram">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Histogram"/>
            </type>
          </resultsList>
        </function>
        <function name="GetTimestampMs">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricFamily"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricFamily"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricFamily"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetHelp">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricFamily"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetType">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricFamily"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="MetricType"/>
          </resultsList>
        </function>
        <function name="GetMetric">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricFamily"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Metric"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="MetricType_COUNTER"/>
        <name value="MetricType_GAUGE"/>
        <name value="MetricType_SUMMARY"/>
        <name value="MetricType_UNTYPED"/>
        <name value="MetricType_HISTOGRAM"/>
        <name value="MetricType_name"/>
        <name value="MetricType_value"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/syndtr/goleveldb/leveldb/opt">
      <types>
        <type name="Cacher" type="interface">
          <method name="New">
            <paramsList>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="cache"/>
                <item value="Cacher"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="CacherFunc">
          <field type="func" name="NewFunc">
            <paramsList>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="cache"/>
                <item value="Cacher"/>
              </type>
            </resultsList>
          </field>
        </type>
        <type name="Compression" type="ident">
          <type type="ident" def="uint"/>
        </type>
        <type name="Strict" type="ident">
          <type type="ident" def="uint"/>
        </type>
        <type type="struct" name="Options">
          <field type="slice" name="AltFilters">
            <elmtype type="selector">
              <prefix value="filter"/>
              <item value="Filter"/>
            </elmtype>
          </field>
          <field type="ident" def="Cacher" name="BlockCacher"/>
          <field type="ident" def="int" name="BlockCacheCapacity"/>
          <field type="ident" def="int" name="BlockRestartInterval"/>
          <field type="ident" def="int" name="BlockSize"/>
          <field type="ident" def="int" name="CompactionExpandLimitFactor"/>
          <field type="ident" def="int" name="CompactionGPOverlapsFactor"/>
          <field type="ident" def="int" name="CompactionL0Trigger"/>
          <field type="ident" def="int" name="CompactionSourceLimitFactor"/>
          <field type="ident" def="int" name="CompactionTableSize"/>
          <field type="ident" def="float64" name="CompactionTableSizeMultiplier"/>
          <field type="slice" name="CompactionTableSizeMultiplierPerLevel">
            <elmtype type="ident" def="float64"/>
          </field>
          <field type="ident" def="int" name="CompactionTotalSize"/>
          <field type="ident" def="float64" name="CompactionTotalSizeMultiplier"/>
          <field type="slice" name="CompactionTotalSizeMultiplierPerLevel">
            <elmtype type="ident" def="float64"/>
          </field>
          <field type="selector" name="Comparer">
            <prefix value="comparer"/>
            <item value="Comparer"/>
          </field>
          <field type="ident" def="Compression" name="Compression"/>
          <field type="ident" def="bool" name="DisableBufferPool"/>
          <field type="ident" def="bool" name="DisableBlockCache"/>
          <field type="ident" def="bool" name="DisableCompactionBackoff"/>
          <field type="ident" def="bool" name="ErrorIfExist"/>
          <field type="ident" def="bool" name="ErrorIfMissing"/>
          <field type="selector" name="Filter">
            <prefix value="filter"/>
            <item value="Filter"/>
          </field>
          <field type="ident" def="int" name="IteratorSamplingRate"/>
          <field type="ident" def="int" name="MaxMemCompationLevel"/>
          <field type="ident" def="int" name="NumLevel"/>
          <field type="ident" def="Cacher" name="OpenFilesCacher"/>
          <field type="ident" def="int" name="OpenFilesCacheCapacity"/>
          <field type="ident" def="bool" name="ReadOnly"/>
          <field type="ident" def="Strict" name="Strict"/>
          <field type="ident" def="int" name="WriteBuffer"/>
          <field type="ident" def="int" name="WriteL0PauseTrigger"/>
          <field type="ident" def="int" name="WriteL0SlowdownTrigger"/>
        </type>
        <type type="struct" name="ReadOptions">
          <field type="ident" def="bool" name="DontFillCache"/>
          <field type="ident" def="Strict" name="Strict"/>
        </type>
        <type type="struct" name="WriteOptions">
          <field type="ident" def="bool" name="Sync"/>
        </type>
      </types>
      <functions>
        <function name="New">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CacherFunc"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="cache"/>
              <item value="Cacher"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Compression"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetAltFilters">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="filter"/>
                <item value="Filter"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="GetBlockCacher">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Cacher"/>
          </resultsList>
        </function>
        <function name="GetBlockCacheCapacity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetBlockRestartInterval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetBlockSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionExpandLimit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionGPOverlaps">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionL0Trigger">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionSourceLimit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionTableSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionTotalSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetComparer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="comparer"/>
              <item value="Comparer"/>
            </type>
          </resultsList>
        </function>
        <function name="GetCompression">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Compression"/>
          </resultsList>
        </function>
        <function name="GetDisableBufferPool">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetDisableBlockCache">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetDisableCompactionBackoff">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetErrorIfExist">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetErrorIfMissing">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetFilter">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="filter"/>
              <item value="Filter"/>
            </type>
          </resultsList>
        </function>
        <function name="GetIteratorSamplingRate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetMaxMemCompationLevel">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetNumLevel">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetOpenFilesCacher">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Cacher"/>
          </resultsList>
        </function>
        <function name="GetOpenFilesCacheCapacity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetReadOnly">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetStrict">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Strict"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetWriteBuffer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetWriteL0PauseTrigger">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetWriteL0SlowdownTrigger">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetDontFillCache">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ReadOptions"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetStrict">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ReadOptions"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Strict"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetSync">
          <recvList>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetStrict">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
            <type type="pointer">
              <type type="ident" def="ReadOptions"/>
            </type>
            <type type="ident" def="Strict"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="KiB"/>
        <name value="MiB"/>
        <name value="GiB"/>
        <name value="DefaultBlockCacher"/>
        <name value="DefaultBlockCacheCapacity"/>
        <name value="DefaultBlockRestartInterval"/>
        <name value="DefaultBlockSize"/>
        <name value="DefaultCompactionExpandLimitFactor"/>
        <name value="DefaultCompactionGPOverlapsFactor"/>
        <name value="DefaultCompactionL0Trigger"/>
        <name value="DefaultCompactionSourceLimitFactor"/>
        <name value="DefaultCompactionTableSize"/>
        <name value="DefaultCompactionTableSizeMultiplier"/>
        <name value="DefaultCompactionTotalSize"/>
        <name value="DefaultCompactionTotalSizeMultiplier"/>
        <name value="DefaultCompressionType"/>
        <name value="DefaultIteratorSamplingRate"/>
        <name value="DefaultMaxMemCompationLevel"/>
        <name value="DefaultNumLevel"/>
        <name value="DefaultOpenFilesCacher"/>
        <name value="DefaultOpenFilesCacheCapacity"/>
        <name value="DefaultWriteBuffer"/>
        <name value="DefaultWriteL0PauseTrigger"/>
        <name value="DefaultWriteL0SlowdownTrigger"/>
        <name value="LRUCacher"/>
        <name value="NoCacher"/>
        <name value="DefaultCompression"/>
        <name value="NoCompression"/>
        <name value="SnappyCompression"/>
        <name value="StrictManifest"/>
        <name value="StrictJournalChecksum"/>
        <name value="StrictJournal"/>
        <name value="StrictBlockChecksum"/>
        <name value="StrictCompaction"/>
        <name value="StrictReader"/>
        <name value="StrictRecovery"/>
        <name value="StrictOverride"/>
        <name value="StrictAll"/>
        <name value="DefaultStrict"/>
        <name value="NoStrict"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/storage/metric">
      <types>
        <type type="struct" name="SamplePair">
          <field type="selector" name="Timestamp">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
          <field type="selector" name="Value">
            <prefix value="clientmodel"/>
            <item value="SampleValue"/>
          </field>
        </type>
        <type name="Values" type="slice">
          <elmtype type="ident" def="SamplePair"/>
        </type>
        <type type="struct" name="Interval">
          <field type="selector" name="OldestInclusive">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
          <field type="selector" name="NewestInclusive">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
        </type>
        <type name="MatchType" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type name="LabelMatchers" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="LabelMatcher"/>
          </elmtype>
        </type>
        <type type="struct" name="LabelMatcher">
          <field type="ident" def="MatchType" name="Type"/>
          <field type="selector" name="Name">
            <prefix value="clientmodel"/>
            <item value="LabelName"/>
          </field>
          <field type="selector" name="Value">
            <prefix value="clientmodel"/>
            <item value="LabelValue"/>
          </field>
          <field type="pointer" name="re">
            <type type="selector">
              <prefix value="regexp"/>
              <item value="Regexp"/>
            </type>
          </field>
        </type>
        <type type="struct" name="LabelPair">
          <field type="selector" name="Name">
            <prefix value="clientmodel"/>
            <item value="LabelName"/>
          </field>
          <field type="selector" name="Value">
            <prefix value="clientmodel"/>
            <item value="LabelValue"/>
          </field>
        </type>
        <type name="LabelPairs" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="LabelPair"/>
          </elmtype>
        </type>
      </types>
      <functions>
        <function name="MarshalJSON">
          <recvList>
            <type type="ident" def="SamplePair"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Equal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SamplePair"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="SamplePair"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SamplePair"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="MatchType"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewLabelMatcher">
          <recvList/>
          <paramsList>
            <type type="ident" def="MatchType"/>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelName"/>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelValue"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="LabelMatcher"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelValue"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Filter">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelValues"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelValues"/>
            </type>
          </resultsList>
        </function>
        <function name="Equal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="LabelPairs"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="LabelPairs"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="LabelPairs"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="Equal"/>
        <name value="NotEqual"/>
        <name value="RegexMatch"/>
        <name value="RegexNoMatch"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/notification">
      <types>
        <type type="struct" name="NotificationReq">
          <field type="ident" def="string" name="Summary"/>
          <field type="ident" def="string" name="Description"/>
          <field type="ident" def="string" name="Runbook"/>
          <field type="selector" name="Labels">
            <prefix value="clientmodel"/>
            <item value="LabelSet"/>
          </field>
          <field type="selector" name="Value">
            <prefix value="clientmodel"/>
            <item value="SampleValue"/>
          </field>
          <field type="selector" name="ActiveSince">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="string" name="RuleString"/>
          <field type="ident" def="string" name="GeneratorURL"/>
        </type>
        <type name="NotificationReqs" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="NotificationReq"/>
          </elmtype>
        </type>
        <type type="struct" name="NotificationHandler">
          <field type="ident" def="string" name="alertmanagerURL"/>
          <field type="channel" dir="3" name="pendingNotifications">
            <type type="ident" def="NotificationReqs"/>
          </field>
          <field type="ident" def="httpPoster" name="httpClient"/>
          <field type="selector" name="notificationLatency">
            <prefix value="prometheus"/>
            <item value="Summary"/>
          </field>
          <field type="selector" name="notificationErrors">
            <prefix value="prometheus"/>
            <item value="Counter"/>
          </field>
          <field type="selector" name="notificationDropped">
            <prefix value="prometheus"/>
            <item value="Counter"/>
          </field>
          <field type="selector" name="notificationsQueueLength">
            <prefix value="prometheus"/>
            <item value="Gauge"/>
          </field>
          <field type="selector" name="notificationsQueueCapacity">
            <prefix value="prometheus"/>
            <item value="Metric"/>
          </field>
          <field type="channel" dir="3" name="stopped">
            <type type="struct" name=""/>
          </field>
        </type>
        <type type="struct" name="NotificationHandlerOptions">
          <field type="ident" def="string" name="AlertmanagerURL"/>
          <field type="ident" def="int" name="QueueCapacity"/>
          <field type="selector" name="Deadline">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewNotificationHandler">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="NotificationHandlerOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="NotificationHandler"/>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NotificationHandler"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SubmitReqs">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NotificationHandler"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="NotificationReqs"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NotificationHandler"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NotificationHandler"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="selector">
                  <prefix value="prometheus"/>
                  <item value="Desc"/>
                </type>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NotificationHandler"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="selector">
                <prefix value="prometheus"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/Sirupsen/logrus/hooks/papertrail">
      <types>
        <type type="struct" name="PapertrailHook">
          <field type="ident" def="string" name="Host"/>
          <field type="ident" def="int" name="Port"/>
          <field type="ident" def="string" name="AppName"/>
          <field type="selector" name="UDPConn">
            <prefix value="net"/>
            <item value="Conn"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewPapertrailHook">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PapertrailHook"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Fire">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PapertrailHook"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="logrus"/>
                <item value="Entry"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Levels">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PapertrailHook"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="logrus"/>
                <item value="Level"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/prometheus/client_golang/extraction">
      <types>
        <type type="struct" name="ProcessOptions">
          <field type="selector" name="Timestamp">
            <prefix value="model"/>
            <item value="Timestamp"/>
          </field>
        </type>
        <type name="Ingester" type="interface">
          <method name="Ingest">
            <paramsList>
              <type type="selector">
                <prefix value="model"/>
                <item value="Samples"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Processor" type="interface">
          <method name="ProcessSingle">
            <paramsList>
              <type type="selector">
                <prefix value="io"/>
                <item value="Reader"/>
              </type>
              <type type="ident" def="Ingester"/>
              <type type="pointer">
                <type type="ident" def="ProcessOptions"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="ProcessSingle">
          <recvList>
            <type type="pointer">
              <type type="ident" def="processor004"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="Ingester"/>
            <type type="pointer">
              <type type="ident" def="ProcessOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ProcessSingle">
          <recvList>
            <type type="pointer">
              <type type="ident" def="processor002"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="Ingester"/>
            <type type="pointer">
              <type type="ident" def="ProcessOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ProcessSingle">
          <recvList>
            <type type="pointer">
              <type type="ident" def="processor001"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="Ingester"/>
            <type type="pointer">
              <type type="ident" def="ProcessOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Now">
          <recvList>
            <type type="pointer">
              <type type="ident" def="clock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </resultsList>
        </function>
        <function name="ProcessSingle">
          <recvList>
            <type type="pointer">
              <type type="ident" def="metricFamilyProcessor"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="Ingester"/>
            <type type="pointer">
              <type type="ident" def="ProcessOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ProcessorForRequestHeader">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="Header"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Processor"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Processor004"/>
        <name value="Processor002"/>
        <name value="Processor001"/>
        <name value="MetricFamilyProcessor"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/Sirupsen/logrus">
      <types>
        <type type="struct" name="TextFormatter">
          <field type="ident" def="bool" name="ForceColors"/>
          <field type="ident" def="bool" name="DisableColors"/>
          <field type="ident" def="bool" name="DisableTimestamp"/>
          <field type="ident" def="bool" name="FullTimestamp"/>
          <field type="ident" def="string" name="TimestampFormat"/>
          <field type="ident" def="bool" name="DisableSorting"/>
        </type>
        <type name="Termios" type="selector">
          <prefix value="syscall"/>
          <item value="Termios"/>
        </type>
        <type name="Termios" type="selector">
          <prefix value="syscall"/>
          <item value="Termios"/>
        </type>
        <type type="struct" name="Termios">
          <field type="ident" def="uint32" name="Iflag"/>
          <field type="ident" def="uint32" name="Oflag"/>
          <field type="ident" def="uint32" name="Cflag"/>
          <field type="ident" def="uint32" name="Lflag"/>
          <field type="array" name="Cc">
            <elmtype type="ident" def="uint8"/>
          </field>
          <field type="ident" def="uint32" name="Ispeed"/>
          <field type="ident" def="uint32" name="Ospeed"/>
        </type>
        <type name="Termios" type="selector">
          <prefix value="syscall"/>
          <item value="Termios"/>
        </type>
        <type name="Fields" type="map">
          <keytype type="ident" def="string"/>
          <valtype type="interface"/>
        </type>
        <type name="Level" type="ident">
          <type type="ident" def="uint8"/>
        </type>
        <type name="StdLogger" type="interface">
          <method name="Print">
            <paramsList>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Printf">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Println">
            <paramsList>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Fatal">
            <paramsList>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Fatalf">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Fatalln">
            <paramsList>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Panic">
            <paramsList>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Panicf">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Panicln">
            <paramsList>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="Logger">
          <field type="selector" name="Out">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="ident" def="levelHooks" name="Hooks"/>
          <field type="ident" def="Formatter" name="Formatter"/>
          <field type="ident" def="Level" name="Level"/>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
        </type>
        <type type="struct" name="JSONFormatter">
          <field type="ident" def="string" name="TimestampFormat"/>
        </type>
        <type name="Hook" type="interface">
          <method name="Levels">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="Level"/>
              </type>
            </resultsList>
          </method>
          <method name="Fire">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="Entry"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Formatter" type="interface">
          <method name="Format">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="Entry"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Entry">
          <field type="pointer" name="Logger">
            <type type="ident" def="Logger"/>
          </field>
          <field type="ident" def="Fields" name="Data"/>
          <field type="selector" name="Time">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="Level" name="Level"/>
          <field type="ident" def="string" name="Message"/>
        </type>
      </types>
      <functions>
        <function name="Writer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="io"/>
                <item value="PipeWriter"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Format">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TextFormatter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="IsTerminal">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="IsTerminal">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Level"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ParseLevel">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Level"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="New">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </resultsList>
        </function>
        <function name="WithField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </resultsList>
        </function>
        <function name="WithFields">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Fields"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </resultsList>
        </function>
        <function name="Debugf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Infof">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Printf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warnf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warningf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Errorf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatalf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Panicf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Debug">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Info">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Print">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warn">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warning">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Panic">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Debugln">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Infoln">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Println">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warnln">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warningln">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Errorln">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatalln">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Panicln">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Format">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JSONFormatter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="ident" def="levelHooks"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Hook"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fire">
          <recvList>
            <type type="ident" def="levelHooks"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Level"/>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="StandardLogger">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </resultsList>
        </function>
        <function name="SetOutput">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetFormatter">
          <recvList/>
          <paramsList>
            <type type="ident" def="Formatter"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetLevel">
          <recvList/>
          <paramsList>
            <type type="ident" def="Level"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetLevel">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Level"/>
          </resultsList>
        </function>
        <function name="AddHook">
          <recvList/>
          <paramsList>
            <type type="ident" def="Hook"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="WithField">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </resultsList>
        </function>
        <function name="WithFields">
          <recvList/>
          <paramsList>
            <type type="ident" def="Fields"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </resultsList>
        </function>
        <function name="Debug">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Print">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Info">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warn">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warning">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Error">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Panic">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatal">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Debugf">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Printf">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Infof">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warnf">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warningf">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Errorf">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Panicf">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatalf">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Debugln">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Println">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Infoln">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warnln">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warningln">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Errorln">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Panicln">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatalln">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewEntry">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Logger"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </resultsList>
        </function>
        <function name="Reader">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="bytes"/>
                <item value="Buffer"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WithField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </resultsList>
        </function>
        <function name="WithFields">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Fields"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </resultsList>
        </function>
        <function name="Debug">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Print">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Info">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warn">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warning">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Panic">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Debugf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Infof">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Printf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warnf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warningf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Errorf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatalf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Panicf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Debugln">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Infoln">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Println">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warnln">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Warningln">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Errorln">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatalln">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Panicln">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="PanicLevel"/>
        <name value="FatalLevel"/>
        <name value="ErrorLevel"/>
        <name value="WarnLevel"/>
        <name value="InfoLevel"/>
        <name value="DebugLevel"/>
        <name value="DefaultTimestampFormat"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/Sirupsen/logrus/hooks/airbrake">
      <types/>
      <functions>
        <function name="NewHook">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="airbrakeHook"/>
            </type>
          </resultsList>
        </function>
        <function name="Fire">
          <recvList>
            <type type="pointer">
              <type type="ident" def="airbrakeHook"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="logrus"/>
                <item value="Entry"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Levels">
          <recvList>
            <type type="pointer">
              <type type="ident" def="airbrakeHook"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="logrus"/>
                <item value="Level"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/prometheus/client_golang/prometheus">
      <types>
        <type type="struct" name="MetricVec">
          <field type="selector" name="mtx">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="map" name="children">
            <keytype type="ident" def="uint64"/>
            <valtype type="ident" def="Metric"/>
          </field>
          <field type="pointer" name="desc">
            <type type="ident" def="Desc"/>
          </field>
          <field type="selector" name="hash">
            <prefix value="hash"/>
            <item value="Hash64"/>
          </field>
          <field type="selector" name="buf">
            <prefix value="bytes"/>
            <item value="Buffer"/>
          </field>
          <field type="func" name="newMetric">
            <paramsList>
              <type type="ellipsis">
                <type type="ident" def="string"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="Metric"/>
            </resultsList>
          </field>
        </type>
        <type name="ValueType" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type name="Untyped" type="interface">
          <method name="Set">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Inc">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Dec">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Add">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Sub">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type name="UntypedOpts" type="ident">
          <type type="ident" def="Opts"/>
        </type>
        <type type="struct" name="UntypedVec">
          <field type="ident" def="MetricVec" name=""/>
        </type>
        <type name="UntypedFunc" type="interface"/>
        <type name="Summary" type="interface">
          <method name="Observe">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="SummaryOpts">
          <field type="ident" def="string" name="Namespace"/>
          <field type="ident" def="string" name="Subsystem"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Help"/>
          <field type="ident" def="Labels" name="ConstLabels"/>
          <field type="map" name="Objectives">
            <keytype type="ident" def="float64"/>
            <valtype type="ident" def="float64"/>
          </field>
          <field type="selector" name="MaxAge">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="uint32" name="AgeBuckets"/>
          <field type="ident" def="uint32" name="BufCap"/>
        </type>
        <type type="struct" name="SummaryVec">
          <field type="ident" def="MetricVec" name=""/>
        </type>
        <type name="Metric" type="interface">
          <method name="Desc">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="Desc"/>
              </type>
            </resultsList>
          </method>
          <method name="Write">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="dto"/>
                  <item value="Metric"/>
                </type>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Opts">
          <field type="ident" def="string" name="Namespace"/>
          <field type="ident" def="string" name="Subsystem"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Help"/>
          <field type="ident" def="Labels" name="ConstLabels"/>
        </type>
        <type name="LabelPairSorter" type="slice">
          <elmtype type="pointer">
            <type type="selector">
              <prefix value="dto"/>
              <item value="LabelPair"/>
            </type>
          </elmtype>
        </type>
        <type name="Histogram" type="interface">
          <method name="Observe">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="HistogramOpts">
          <field type="ident" def="string" name="Namespace"/>
          <field type="ident" def="string" name="Subsystem"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Help"/>
          <field type="ident" def="Labels" name="ConstLabels"/>
          <field type="slice" name="Buckets">
            <elmtype type="ident" def="float64"/>
          </field>
        </type>
        <type type="struct" name="HistogramVec">
          <field type="ident" def="MetricVec" name=""/>
        </type>
        <type name="Gauge" type="interface">
          <method name="Set">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Inc">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Dec">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Add">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Sub">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type name="GaugeOpts" type="ident">
          <type type="ident" def="Opts"/>
        </type>
        <type type="struct" name="GaugeVec">
          <field type="ident" def="MetricVec" name=""/>
        </type>
        <type name="GaugeFunc" type="interface"/>
        <type type="struct" name="ExpvarCollector">
          <field type="map" name="exports">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="Desc"/>
            </valtype>
          </field>
        </type>
        <type name="Labels" type="map">
          <keytype type="ident" def="string"/>
          <valtype type="ident" def="string"/>
        </type>
        <type type="struct" name="Desc">
          <field type="ident" def="string" name="fqName"/>
          <field type="ident" def="string" name="help"/>
          <field type="slice" name="constLabelPairs">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="LabelPair"/>
              </type>
            </elmtype>
          </field>
          <field type="slice" name="variableLabels">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="uint64" name="id"/>
          <field type="ident" def="uint64" name="dimHash"/>
          <field type="ident" def="error" name="err"/>
        </type>
        <type name="Counter" type="interface">
          <method name="Set">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Inc">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Add">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type name="CounterOpts" type="ident">
          <type type="ident" def="Opts"/>
        </type>
        <type type="struct" name="CounterVec">
          <field type="ident" def="MetricVec" name=""/>
        </type>
        <type name="CounterFunc" type="interface"/>
        <type name="Collector" type="interface">
          <method name="Describe">
            <paramsList>
              <type type="channel" dir="1">
                <type type="pointer">
                  <type type="ident" def="Desc"/>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Collect">
            <paramsList>
              <type type="channel" dir="1">
                <type type="ident" def="Metric"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="SelfCollector">
          <field type="ident" def="Metric" name="self"/>
        </type>
      </types>
      <functions>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="ident" def="Desc"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="ident" def="Metric"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetMetricWithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetMetricWith">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
          </resultsList>
        </function>
        <function name="With">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
          </resultsList>
        </function>
        <function name="DeleteLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Desc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="value"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="Set">
          <recvList>
            <type type="pointer">
              <type type="ident" def="value"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Inc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="value"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Dec">
          <recvList>
            <type type="pointer">
              <type type="ident" def="value"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="value"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Sub">
          <recvList>
            <type type="pointer">
              <type type="ident" def="value"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="value"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Desc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="valueFunc"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="valueFunc"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewConstMetric">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
            <type type="ident" def="ValueType"/>
            <type type="ident" def="float64"/>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MustNewConstMetric">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
            <type type="ident" def="ValueType"/>
            <type type="ident" def="float64"/>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
          </resultsList>
        </function>
        <function name="Desc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="constMetric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="constMetric"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewUntyped">
          <recvList/>
          <paramsList>
            <type type="ident" def="UntypedOpts"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Untyped"/>
          </resultsList>
        </function>
        <function name="NewUntypedVec">
          <recvList/>
          <paramsList>
            <type type="ident" def="UntypedOpts"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="UntypedVec"/>
            </type>
          </resultsList>
        </function>
        <function name="GetMetricWithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UntypedVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Untyped"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetMetricWith">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UntypedVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Untyped"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UntypedVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Untyped"/>
          </resultsList>
        </function>
        <function name="With">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UntypedVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Untyped"/>
          </resultsList>
        </function>
        <function name="NewUntypedFunc">
          <recvList/>
          <paramsList>
            <type type="ident" def="UntypedOpts"/>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="float64"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="UntypedFunc"/>
          </resultsList>
        </function>
        <function name="NewSummary">
          <recvList/>
          <paramsList>
            <type type="ident" def="SummaryOpts"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Summary"/>
          </resultsList>
        </function>
        <function name="Desc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="summary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="Observe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="summary"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="summary"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="quantSort"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="quantSort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="quantSort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewSummaryVec">
          <recvList/>
          <paramsList>
            <type type="ident" def="SummaryOpts"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="SummaryVec"/>
            </type>
          </resultsList>
        </function>
        <function name="GetMetricWithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SummaryVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Summary"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetMetricWith">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SummaryVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Summary"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SummaryVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Summary"/>
          </resultsList>
        </function>
        <function name="With">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SummaryVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Summary"/>
          </resultsList>
        </function>
        <function name="Desc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="constSummary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="constSummary"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewConstSummary">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
            <type type="ident" def="uint64"/>
            <type type="ident" def="float64"/>
            <type type="map">
              <keytype type="ident" def="float64"/>
              <valtype type="ident" def="float64"/>
            </type>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MustNewConstSummary">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
            <type type="ident" def="uint64"/>
            <type type="ident" def="float64"/>
            <type type="map">
              <keytype type="ident" def="float64"/>
              <valtype type="ident" def="float64"/>
            </type>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
          </resultsList>
        </function>
        <function name="Handler">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="Handler"/>
            </type>
          </resultsList>
        </function>
        <function name="UninstrumentedHandler">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="Handler"/>
            </type>
          </resultsList>
        </function>
        <function name="Register">
          <recvList/>
          <paramsList>
            <type type="ident" def="Collector"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MustRegister">
          <recvList/>
          <paramsList>
            <type type="ident" def="Collector"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RegisterOrGet">
          <recvList/>
          <paramsList>
            <type type="ident" def="Collector"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Collector"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MustRegisterOrGet">
          <recvList/>
          <paramsList>
            <type type="ident" def="Collector"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Collector"/>
          </resultsList>
        </function>
        <function name="Unregister">
          <recvList/>
          <paramsList>
            <type type="ident" def="Collector"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="SetMetricFamilyInjectionHook">
          <recvList/>
          <paramsList>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="slice">
                  <elmtype type="pointer">
                    <type type="selector">
                      <prefix value="dto"/>
                      <item value="MetricFamily"/>
                    </type>
                  </elmtype>
                </type>
              </resultsList>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PanicOnCollectError">
          <recvList/>
          <paramsList>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="EnableCollectChecks">
          <recvList/>
          <paramsList>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Register">
          <recvList>
            <type type="pointer">
              <type type="ident" def="registry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Collector"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Collector"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RegisterOrGet">
          <recvList>
            <type type="pointer">
              <type type="ident" def="registry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Collector"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Collector"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Unregister">
          <recvList>
            <type type="pointer">
              <type type="ident" def="registry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Collector"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Push">
          <recvList>
            <type type="pointer">
              <type type="ident" def="registry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ServeHTTP">
          <recvList>
            <type type="pointer">
              <type type="ident" def="registry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="metricSorter"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="metricSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="metricSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Push">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PushAdd">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PushCollectors">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="ident" def="Collector"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PushAddCollectors">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="ident" def="Collector"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewProcessCollector">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="processCollector"/>
            </type>
          </resultsList>
        </function>
        <function name="NewProcessCollectorPIDFn">
          <recvList/>
          <paramsList>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="int"/>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="processCollector"/>
            </type>
          </resultsList>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="processCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="ident" def="Desc"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="processCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="ident" def="Metric"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="BuildFQName">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="LabelPairSorter"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="LabelPairSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="LabelPairSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="hashSorter"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="hashSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="hashSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewInvalidMetric">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
          </resultsList>
        </function>
        <function name="Desc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="invalidMetric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="invalidMetric"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Now">
          <recvList>
            <type type="ident" def="nowFunc"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </resultsList>
        </function>
        <function name="InstrumentHandler">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="http"/>
              <item value="Handler"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="InstrumentHandlerFunc">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="func">
              <paramsList>
                <type type="selector">
                  <prefix value="http"/>
                  <item value="ResponseWriter"/>
                </type>
                <type type="pointer">
                  <type type="selector">
                    <prefix value="http"/>
                    <item value="Request"/>
                  </type>
                </type>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="InstrumentHandlerWithOpts">
          <recvList/>
          <paramsList>
            <type type="ident" def="SummaryOpts"/>
            <type type="selector">
              <prefix value="http"/>
              <item value="Handler"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="InstrumentHandlerFuncWithOpts">
          <recvList/>
          <paramsList>
            <type type="ident" def="SummaryOpts"/>
            <type type="func">
              <paramsList>
                <type type="selector">
                  <prefix value="http"/>
                  <item value="ResponseWriter"/>
                </type>
                <type type="pointer">
                  <type type="selector">
                    <prefix value="http"/>
                    <item value="Request"/>
                  </type>
                </type>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="WriteHeader">
          <recvList>
            <type type="pointer">
              <type type="ident" def="responseWriterDelegator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="responseWriterDelegator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="LinearBuckets">
          <recvList/>
          <paramsList>
            <type type="ident" def="float64"/>
            <type type="ident" def="float64"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="float64"/>
            </type>
          </resultsList>
        </function>
        <function name="ExponentialBuckets">
          <recvList/>
          <paramsList>
            <type type="ident" def="float64"/>
            <type type="ident" def="float64"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="float64"/>
            </type>
          </resultsList>
        </function>
        <function name="NewHistogram">
          <recvList/>
          <paramsList>
            <type type="ident" def="HistogramOpts"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Histogram"/>
          </resultsList>
        </function>
        <function name="Desc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="histogram"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="Observe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="histogram"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="histogram"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewHistogramVec">
          <recvList/>
          <paramsList>
            <type type="ident" def="HistogramOpts"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="HistogramVec"/>
            </type>
          </resultsList>
        </function>
        <function name="GetMetricWithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HistogramVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Histogram"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetMetricWith">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HistogramVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Histogram"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HistogramVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Histogram"/>
          </resultsList>
        </function>
        <function name="With">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HistogramVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Histogram"/>
          </resultsList>
        </function>
        <function name="Desc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="constHistogram"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="constHistogram"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewConstHistogram">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
            <type type="ident" def="uint64"/>
            <type type="ident" def="float64"/>
            <type type="map">
              <keytype type="ident" def="float64"/>
              <valtype type="ident" def="uint64"/>
            </type>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MustNewConstHistogram">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
            <type type="ident" def="uint64"/>
            <type type="ident" def="float64"/>
            <type type="map">
              <keytype type="ident" def="float64"/>
              <valtype type="ident" def="uint64"/>
            </type>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="buckSort"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="buckSort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="buckSort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewGoCollector">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="goCollector"/>
            </type>
          </resultsList>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="goCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="ident" def="Desc"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="goCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="ident" def="Metric"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewGauge">
          <recvList/>
          <paramsList>
            <type type="ident" def="GaugeOpts"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Gauge"/>
          </resultsList>
        </function>
        <function name="NewGaugeVec">
          <recvList/>
          <paramsList>
            <type type="ident" def="GaugeOpts"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GaugeVec"/>
            </type>
          </resultsList>
        </function>
        <function name="GetMetricWithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GaugeVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Gauge"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetMetricWith">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GaugeVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Gauge"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GaugeVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Gauge"/>
          </resultsList>
        </function>
        <function name="With">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GaugeVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Gauge"/>
          </resultsList>
        </function>
        <function name="NewGaugeFunc">
          <recvList/>
          <paramsList>
            <type type="ident" def="GaugeOpts"/>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="float64"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="GaugeFunc"/>
          </resultsList>
        </function>
        <function name="NewExpvarCollector">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="pointer">
                <type type="ident" def="Desc"/>
              </valtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="ExpvarCollector"/>
            </type>
          </resultsList>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ExpvarCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="ident" def="Desc"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ExpvarCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="ident" def="Metric"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewDesc">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="NewInvalidDesc">
          <recvList/>
          <paramsList>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewCounter">
          <recvList/>
          <paramsList>
            <type type="ident" def="CounterOpts"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Counter"/>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="counter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewCounterVec">
          <recvList/>
          <paramsList>
            <type type="ident" def="CounterOpts"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CounterVec"/>
            </type>
          </resultsList>
        </function>
        <function name="GetMetricWithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CounterVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Counter"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetMetricWith">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CounterVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Counter"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CounterVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Counter"/>
          </resultsList>
        </function>
        <function name="With">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CounterVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Counter"/>
          </resultsList>
        </function>
        <function name="NewCounterFunc">
          <recvList/>
          <paramsList>
            <type type="ident" def="CounterOpts"/>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="float64"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="CounterFunc"/>
          </resultsList>
        </function>
        <function name="Init">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SelfCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Metric"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SelfCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="ident" def="Desc"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SelfCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="ident" def="Metric"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="CounterValue"/>
        <name value="GaugeValue"/>
        <name value="UntypedValue"/>
        <name value="DefObjectives"/>
        <name value="DefMaxAge"/>
        <name value="DefAgeBuckets"/>
        <name value="DefBufCap"/>
        <name value="APIVersion"/>
        <name value="DelimitedTelemetryContentType"/>
        <name value="TextTelemetryContentType"/>
        <name value="ProtoTextTelemetryContentType"/>
        <name value="ProtoCompactTextTelemetryContentType"/>
        <name value="DefBuckets"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/storage/remote/opentsdb">
      <types>
        <type name="TagValue" type="selector">
          <prefix value="clientmodel"/>
          <item value="LabelValue"/>
        </type>
        <type type="struct" name="Client">
          <field type="ident" def="string" name="url"/>
          <field type="pointer" name="httpClient">
            <type type="selector">
              <prefix value="http"/>
              <item value="Client"/>
            </type>
          </field>
        </type>
        <type type="struct" name="StoreSamplesRequest">
          <field type="ident" def="TagValue" name="Metric"/>
          <field type="ident" def="int64" name="Timestamp"/>
          <field type="ident" def="float64" name="Value"/>
          <field type="map" name="Tags">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="TagValue"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="MarshalJSON">
          <recvList>
            <type type="ident" def="TagValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TagValue"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewClient">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </resultsList>
        </function>
        <function name="Store">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Samples"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="Client"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/syndtr/goleveldb/leveldb/storage">
      <types>
        <type name="FileType" type="ident">
          <type type="ident" def="uint32"/>
        </type>
        <type name="Syncer" type="interface">
          <method name="Sync">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Reader" type="interface"/>
        <type name="Writer" type="interface"/>
        <type name="File" type="interface">
          <method name="Open">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Reader"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Create">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Writer"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Replace">
            <paramsList>
              <type type="ident" def="File"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Type">
            <paramsList/>
            <resultsList>
              <type type="ident" def="FileType"/>
            </resultsList>
          </method>
          <method name="Num">
            <paramsList/>
            <resultsList>
              <type type="ident" def="uint64"/>
            </resultsList>
          </method>
          <method name="Remove">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Storage" type="interface">
          <method name="Lock">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="util"/>
                <item value="Releaser"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Log">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="GetFile">
            <paramsList>
              <type type="ident" def="uint64"/>
              <type type="ident" def="FileType"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="File"/>
            </resultsList>
          </method>
          <method name="GetFiles">
            <paramsList>
              <type type="ident" def="FileType"/>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="File"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="GetManifest">
            <paramsList/>
            <resultsList>
              <type type="ident" def="File"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="SetManifest">
            <paramsList>
              <type type="ident" def="File"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Close">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="FileInfo">
          <field type="ident" def="FileType" name="Type"/>
          <field type="ident" def="uint64" name="Num"/>
        </type>
      </types>
      <functions>
        <function name="String">
          <recvList>
            <type type="ident" def="FileType"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="FileInfo"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewFileInfo">
          <recvList/>
          <paramsList>
            <type type="ident" def="File"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="FileInfo"/>
            </type>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memStorageLock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="NewMemStorage">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Storage"/>
          </resultsList>
        </function>
        <function name="Lock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="util"/>
              <item value="Releaser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Log">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetFile">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="FileType"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="File"/>
          </resultsList>
        </function>
        <function name="GetFiles">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="FileType"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="File"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetManifest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="File"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetManifest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="File"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memReader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sync">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memFile"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Open">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memFilePtr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Reader"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Create">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memFilePtr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Writer"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Replace">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memFilePtr"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="File"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memFilePtr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="FileType"/>
          </resultsList>
        </function>
        <function name="Num">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memFilePtr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="Remove">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memFilePtr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileStorageLock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="OpenFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Storage"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Lock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="util"/>
              <item value="Releaser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Log">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetFile">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="FileType"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="File"/>
          </resultsList>
        </function>
        <function name="GetFiles">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="FileType"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="File"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetManifest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="File"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetManifest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="File"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sync">
          <recvList>
            <type type="ident" def="fileWrap"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="fileWrap"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Open">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Reader"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Create">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Writer"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Replace">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="File"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="FileType"/>
          </resultsList>
        </function>
        <function name="Num">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="Remove">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="TypeManifest"/>
        <name value="TypeJournal"/>
        <name value="TypeTable"/>
        <name value="TypeTemp"/>
        <name value="TypeAll"/>
        <name value="ErrInvalidFile"/>
        <name value="ErrLocked"/>
        <name value="ErrClosed"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/syndtr/goleveldb/leveldb/filter">
      <types>
        <type name="Buffer" type="interface">
          <method name="Alloc">
            <paramsList>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
          <method name="Write">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="WriteByte">
            <paramsList>
              <type type="ident" def="byte"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Filter" type="interface">
          <method name="Name">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="NewGenerator">
            <paramsList/>
            <resultsList>
              <type type="ident" def="FilterGenerator"/>
            </resultsList>
          </method>
          <method name="Contains">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
        </type>
        <type name="FilterGenerator" type="interface">
          <method name="Add">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Generate">
            <paramsList>
              <type type="ident" def="Buffer"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
      </types>
      <functions>
        <function name="Name">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Contains">
          <recvList>
            <type type="ident" def="bloomFilter"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewGenerator">
          <recvList>
            <type type="ident" def="bloomFilter"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="FilterGenerator"/>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="bloomFilterGenerator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Generate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="bloomFilterGenerator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Buffer"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewBloomFilter">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Filter"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/beorn7/perks/quantile">
      <types>
        <type type="struct" name="Sample">
          <field type="ident" def="float64" name="Value"/>
          <field type="ident" def="float64" name="Width"/>
          <field type="ident" def="float64" name="Delta"/>
        </type>
        <type name="Samples" type="slice">
          <elmtype type="ident" def="Sample"/>
        </type>
        <type type="struct" name="Stream">
          <field type="pointer" name="">
            <type type="ident" def="stream"/>
          </field>
          <field type="ident" def="Samples" name="b"/>
          <field type="ident" def="bool" name="sorted"/>
        </type>
      </types>
      <functions>
        <function name="Len">
          <recvList>
            <type type="ident" def="Samples"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="Samples"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="Samples"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewLowBiased">
          <recvList/>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </resultsList>
        </function>
        <function name="NewHighBiased">
          <recvList/>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </resultsList>
        </function>
        <function name="NewTargeted">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="float64"/>
              <valtype type="ident" def="float64"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </resultsList>
        </function>
        <function name="Insert">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Query">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="Merge">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Samples"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Samples">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Samples"/>
          </resultsList>
        </function>
        <function name="Count">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/storage/local/index">
      <types>
        <type type="struct" name="LevelDB">
          <field type="pointer" name="storage">
            <type type="selector">
              <prefix value="leveldb"/>
              <item value="DB"/>
            </type>
          </field>
          <field type="pointer" name="readOpts">
            <type type="selector">
              <prefix value="leveldb_opt"/>
              <item value="ReadOptions"/>
            </type>
          </field>
          <field type="pointer" name="writeOpts">
            <type type="selector">
              <prefix value="leveldb_opt"/>
              <item value="WriteOptions"/>
            </type>
          </field>
        </type>
        <type type="struct" name="LevelDBOptions">
          <field type="ident" def="string" name="Path"/>
          <field type="ident" def="int" name="CacheSizeBytes"/>
        </type>
        <type type="struct" name="LevelDBBatch">
          <field type="pointer" name="batch">
            <type type="selector">
              <prefix value="leveldb"/>
              <item value="Batch"/>
            </type>
          </field>
        </type>
        <type name="KeyValueStore" type="interface">
          <method name="Put">
            <paramsList>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryMarshaler"/>
              </type>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryMarshaler"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Get">
            <paramsList>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryMarshaler"/>
              </type>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryUnmarshaler"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Has">
            <paramsList>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryMarshaler"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Delete">
            <paramsList>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryMarshaler"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="NewBatch">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Batch"/>
            </resultsList>
          </method>
          <method name="Commit">
            <paramsList>
              <type type="ident" def="Batch"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="ForEach">
            <paramsList>
              <type type="func">
                <paramsList>
                  <type type="ident" def="KeyValueAccessor"/>
                </paramsList>
                <resultsList>
                  <type type="ident" def="error"/>
                </resultsList>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Close">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="KeyValueAccessor" type="interface">
          <method name="Key">
            <paramsList>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryUnmarshaler"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Value">
            <paramsList>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryUnmarshaler"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Batch" type="interface">
          <method name="Put">
            <paramsList>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryMarshaler"/>
              </type>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryMarshaler"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Delete">
            <paramsList>
              <type type="selector">
                <prefix value="encoding"/>
                <item value="BinaryMarshaler"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Reset">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type name="FingerprintMetricMapping" type="map">
          <keytype type="selector">
            <prefix value="clientmodel"/>
            <item value="Fingerprint"/>
          </keytype>
          <valtype type="selector">
            <prefix value="clientmodel"/>
            <item value="Metric"/>
          </valtype>
        </type>
        <type type="struct" name="FingerprintMetricIndex">
          <field type="ident" def="KeyValueStore" name=""/>
        </type>
        <type name="LabelNameLabelValuesMapping" type="map">
          <keytype type="selector">
            <prefix value="clientmodel"/>
            <item value="LabelName"/>
          </keytype>
          <valtype type="selector">
            <prefix value="codable"/>
            <item value="LabelValueSet"/>
          </valtype>
        </type>
        <type type="struct" name="LabelNameLabelValuesIndex">
          <field type="ident" def="KeyValueStore" name=""/>
        </type>
        <type name="LabelPairFingerprintsMapping" type="map">
          <keytype type="selector">
            <prefix value="metric"/>
            <item value="LabelPair"/>
          </keytype>
          <valtype type="selector">
            <prefix value="codable"/>
            <item value="FingerprintSet"/>
          </valtype>
        </type>
        <type type="struct" name="LabelPairFingerprintIndex">
          <field type="ident" def="KeyValueStore" name=""/>
        </type>
        <type type="struct" name="FingerprintTimeRangeIndex">
          <field type="ident" def="KeyValueStore" name=""/>
        </type>
      </types>
      <functions>
        <function name="NewLevelDB">
          <recvList/>
          <paramsList>
            <type type="ident" def="LevelDBOptions"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="KeyValueStore"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewBatch">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Batch"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryMarshaler"/>
            </type>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryUnmarshaler"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Has">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryMarshaler"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryMarshaler"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryMarshaler"/>
            </type>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryMarshaler"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Commit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Batch"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ForEach">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="KeyValueAccessor"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDBBatch"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryMarshaler"/>
            </type>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryMarshaler"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDBBatch"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryMarshaler"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDBBatch"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="levelDBKeyValueAccessor"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryUnmarshaler"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="levelDBKeyValueAccessor"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="BinaryUnmarshaler"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="IndexBatch">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FingerprintMetricIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="FingerprintMetricMapping"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnindexBatch">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FingerprintMetricIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="FingerprintMetricMapping"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Lookup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FingerprintMetricIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Metric"/>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewFingerprintMetricIndex">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="FingerprintMetricIndex"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="IndexBatch">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelNameLabelValuesIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="LabelNameLabelValuesMapping"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Lookup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelNameLabelValuesIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelName"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelValues"/>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="LookupSet">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelNameLabelValuesIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelName"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="map">
              <keytype type="selector">
                <prefix value="clientmodel"/>
                <item value="LabelValue"/>
              </keytype>
              <valtype type="struct" name=""/>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewLabelNameLabelValuesIndex">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="LabelNameLabelValuesIndex"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DeleteLabelNameLabelValuesIndex">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="IndexBatch">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPairFingerprintIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="LabelPairFingerprintsMapping"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Lookup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPairFingerprintIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="LabelPair"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprints"/>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="LookupSet">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPairFingerprintIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="LabelPair"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="map">
              <keytype type="selector">
                <prefix value="clientmodel"/>
                <item value="Fingerprint"/>
              </keytype>
              <valtype type="struct" name=""/>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewLabelPairFingerprintIndex">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="LabelPairFingerprintIndex"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DeleteLabelPairFingerprintIndex">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Lookup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FingerprintTimeRangeIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewFingerprintTimeRangeIndex">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="FingerprintTimeRangeIndex"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="FingerprintMetricCacheSize"/>
        <name value="FingerprintTimeRangeCacheSize"/>
        <name value="LabelNameLabelValuesCacheSize"/>
        <name value="LabelPairFingerprintsCacheSize"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/storage/local">
      <types>
        <type name="SyncStrategy" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="MemorySeriesStorageOptions">
          <field type="ident" def="int" name="MemoryChunks"/>
          <field type="ident" def="int" name="MaxChunksToPersist"/>
          <field type="ident" def="string" name="PersistenceStoragePath"/>
          <field type="selector" name="PersistenceRetentionPeriod">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="CheckpointInterval">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="int" name="CheckpointDirtySeriesLimit"/>
          <field type="ident" def="bool" name="Dirty"/>
          <field type="ident" def="bool" name="PedanticChecks"/>
          <field type="ident" def="SyncStrategy" name="SyncStrategy"/>
        </type>
        <type name="Storage" type="interface">
          <method name="Append">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="clientmodel"/>
                  <item value="Sample"/>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="NewPreloader">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Preloader"/>
            </resultsList>
          </method>
          <method name="MetricsForLabelMatchers">
            <paramsList>
              <type type="ellipsis">
                <type type="pointer">
                  <type type="selector">
                    <prefix value="metric"/>
                    <item value="LabelMatcher"/>
                  </type>
                </type>
              </type>
            </paramsList>
            <resultsList>
              <type type="map">
                <keytype type="selector">
                  <prefix value="clientmodel"/>
                  <item value="Fingerprint"/>
                </keytype>
                <valtype type="selector">
                  <prefix value="clientmodel"/>
                  <item value="COWMetric"/>
                </valtype>
              </type>
            </resultsList>
          </method>
          <method name="LastSamplePairForFingerprint">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Fingerprint"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="metric"/>
                  <item value="SamplePair"/>
                </type>
              </type>
            </resultsList>
          </method>
          <method name="LabelValuesForLabelName">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="LabelName"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="LabelValues"/>
              </type>
            </resultsList>
          </method>
          <method name="MetricForFingerprint">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Fingerprint"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="COWMetric"/>
              </type>
            </resultsList>
          </method>
          <method name="NewIterator">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Fingerprint"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="SeriesIterator"/>
            </resultsList>
          </method>
          <method name="DropMetricsForFingerprints">
            <paramsList>
              <type type="ellipsis">
                <type type="selector">
                  <prefix value="clientmodel"/>
                  <item value="Fingerprint"/>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Start">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Stop">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="WaitForIndexing">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type name="SeriesIterator" type="interface">
          <method name="ValueAtTime">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Timestamp"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="metric"/>
                <item value="Values"/>
              </type>
            </resultsList>
          </method>
          <method name="BoundaryValues">
            <paramsList>
              <type type="selector">
                <prefix value="metric"/>
                <item value="Interval"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="metric"/>
                <item value="Values"/>
              </type>
            </resultsList>
          </method>
          <method name="RangeValues">
            <paramsList>
              <type type="selector">
                <prefix value="metric"/>
                <item value="Interval"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="metric"/>
                <item value="Values"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="Preloader" type="interface">
          <method name="PreloadRange">
            <paramsList>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Fingerprint"/>
              </type>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Timestamp"/>
              </type>
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Timestamp"/>
              </type>
              <type type="selector">
                <prefix value="time"/>
                <item value="Duration"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Close">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
      </types>
      <functions>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="testStorageCloser"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="NewTestStorage">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="testutil"/>
              <item value="T"/>
            </type>
            <type type="ident" def="chunkEncoding"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
            <type type="selector">
              <prefix value="testutil"/>
              <item value="Closer"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="SyncStrategy"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Set">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SyncStrategy"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewMemorySeriesStorage">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="MemorySeriesStorageOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Storage"/>
          </resultsList>
        </function>
        <function name="Start">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WaitForIndexing">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="NewIterator">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="SeriesIterator"/>
          </resultsList>
        </function>
        <function name="LastSamplePairForFingerprint">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="metric"/>
                <item value="SamplePair"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="ValueAtTime">
          <recvList>
            <type type="pointer">
              <type type="ident" def="boundedIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Values"/>
            </type>
          </resultsList>
        </function>
        <function name="BoundaryValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="boundedIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Interval"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Values"/>
            </type>
          </resultsList>
        </function>
        <function name="RangeValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="boundedIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Interval"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Values"/>
            </type>
          </resultsList>
        </function>
        <function name="NewPreloader">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Preloader"/>
          </resultsList>
        </function>
        <function name="MetricsForLabelMatchers">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="pointer">
                <type type="selector">
                  <prefix value="metric"/>
                  <item value="LabelMatcher"/>
                </type>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="map">
              <keytype type="selector">
                <prefix value="clientmodel"/>
                <item value="Fingerprint"/>
              </keytype>
              <valtype type="selector">
                <prefix value="clientmodel"/>
                <item value="COWMetric"/>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="LabelValuesForLabelName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelName"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelValues"/>
            </type>
          </resultsList>
        </function>
        <function name="MetricForFingerprint">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="COWMetric"/>
            </type>
          </resultsList>
        </function>
        <function name="DropMetricsForFingerprints">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Fingerprint"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Append">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="clientmodel"/>
                <item value="Sample"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="selector">
                  <prefix value="prometheus"/>
                  <item value="Desc"/>
                </type>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="selector">
                <prefix value="prometheus"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ValueAtTime">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Values"/>
            </type>
          </resultsList>
        </function>
        <function name="BoundaryValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Interval"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Values"/>
            </type>
          </resultsList>
        </function>
        <function name="RangeValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Interval"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Values"/>
            </type>
          </resultsList>
        </function>
        <function name="ValueAtTime">
          <recvList>
            <type type="ident" def="nopSeriesIterator"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Values"/>
            </type>
          </resultsList>
        </function>
        <function name="BoundaryValues">
          <recvList>
            <type type="ident" def="nopSeriesIterator"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Interval"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Values"/>
            </type>
          </resultsList>
        </function>
        <function name="RangeValues">
          <recvList>
            <type type="ident" def="nopSeriesIterator"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Interval"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="Values"/>
            </type>
          </resultsList>
        </function>
        <function name="PreloadRange">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesPreloader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memorySeriesPreloader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="persistence"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="selector">
                  <prefix value="prometheus"/>
                  <item value="Desc"/>
                </type>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="persistence"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="selector">
                <prefix value="prometheus"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fpMapper"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="selector">
                  <prefix value="prometheus"/>
                  <item value="Desc"/>
                </type>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fpMapper"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="selector">
                <prefix value="prometheus"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Lock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fingerprintLocker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Unlock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fingerprintLocker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="chunkEncoding"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Set">
          <recvList>
            <type type="pointer">
              <type type="ident" def="chunkEncoding"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Never"/>
        <name value="Always"/>
        <name value="Adaptive"/>
        <name value="Version"/>
        <name value="DefaultChunkEncoding"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/prometheus/client_golang/text">
      <types>
        <type type="struct" name="ParseError">
          <field type="ident" def="int" name="Line"/>
          <field type="ident" def="string" name="Msg"/>
        </type>
        <type type="struct" name="Parser">
          <field type="map" name="metricFamiliesByName">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="MetricFamily"/>
              </type>
            </valtype>
          </field>
          <field type="pointer" name="buf">
            <type type="selector">
              <prefix value="bufio"/>
              <item value="Reader"/>
            </type>
          </field>
          <field type="ident" def="error" name="err"/>
          <field type="ident" def="int" name="lineCount"/>
          <field type="ident" def="byte" name="currentByte"/>
          <field type="selector" name="currentToken">
            <prefix value="bytes"/>
            <item value="Buffer"/>
          </field>
          <field type="pointer" name="currentMF">
            <type type="selector">
              <prefix value="dto"/>
              <item value="MetricFamily"/>
            </type>
          </field>
          <field type="pointer" name="currentMetric">
            <type type="selector">
              <prefix value="dto"/>
              <item value="Metric"/>
            </type>
          </field>
          <field type="pointer" name="currentLabelPair">
            <type type="selector">
              <prefix value="dto"/>
              <item value="LabelPair"/>
            </type>
          </field>
          <field type="map" name="currentLabels">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
          <field type="map" name="summaries">
            <keytype type="ident" def="uint64"/>
            <valtype type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </valtype>
          </field>
          <field type="ident" def="float64" name="currentQuantile"/>
          <field type="map" name="histograms">
            <keytype type="ident" def="uint64"/>
            <valtype type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </valtype>
          </field>
          <field type="ident" def="float64" name="currentBucket"/>
          <field type="ident" def="bool" name="currentIsSummaryCount"/>
          <field type="ident" def="bool" name="currentIsSummarySum"/>
          <field type="ident" def="bool" name="currentIsHistogramCount"/>
          <field type="ident" def="bool" name="currentIsHistogramSum"/>
        </type>
      </types>
      <functions>
        <function name="WriteProtoDelimited">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="MetricFamily"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteProtoText">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="MetricFamily"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteProtoCompactText">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="MetricFamily"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="ParseError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="TextToMetricFamilies">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="pointer">
                <type type="selector">
                  <prefix value="dto"/>
                  <item value="MetricFamily"/>
                </type>
              </valtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MetricFamilyToText">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="MetricFamily"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/prometheus/procfs">
      <types>
        <type type="struct" name="Stat">
          <field type="ident" def="int64" name="BootTime"/>
        </type>
        <type type="struct" name="ProcStat">
          <field type="ident" def="int" name="PID"/>
          <field type="ident" def="string" name="Comm"/>
          <field type="ident" def="string" name="State"/>
          <field type="ident" def="int" name="PPID"/>
          <field type="ident" def="int" name="PGRP"/>
          <field type="ident" def="int" name="Session"/>
          <field type="ident" def="int" name="TTY"/>
          <field type="ident" def="int" name="TPGID"/>
          <field type="ident" def="uint" name="Flags"/>
          <field type="ident" def="uint" name="MinFlt"/>
          <field type="ident" def="uint" name="CMinFlt"/>
          <field type="ident" def="uint" name="MajFlt"/>
          <field type="ident" def="uint" name="CMajFlt"/>
          <field type="ident" def="uint" name="UTime"/>
          <field type="ident" def="uint" name="STime"/>
          <field type="ident" def="uint" name="CUTime"/>
          <field type="ident" def="uint" name="CSTime"/>
          <field type="ident" def="int" name="Priority"/>
          <field type="ident" def="int" name="Nice"/>
          <field type="ident" def="int" name="NumThreads"/>
          <field type="ident" def="uint64" name="Starttime"/>
          <field type="ident" def="int" name="VSize"/>
          <field type="ident" def="int" name="RSS"/>
          <field type="ident" def="FS" name="fs"/>
        </type>
        <type type="struct" name="ProcLimits">
          <field type="ident" def="int" name="CPUTime"/>
          <field type="ident" def="int" name="FileSize"/>
          <field type="ident" def="int" name="DataSize"/>
          <field type="ident" def="int" name="StackSize"/>
          <field type="ident" def="int" name="CoreFileSize"/>
          <field type="ident" def="int" name="ResidentSet"/>
          <field type="ident" def="int" name="Processes"/>
          <field type="ident" def="int" name="OpenFiles"/>
          <field type="ident" def="int" name="LockedMemory"/>
          <field type="ident" def="int" name="AddressSpace"/>
          <field type="ident" def="int" name="FileLocks"/>
          <field type="ident" def="int" name="PendingSignals"/>
          <field type="ident" def="int" name="MsqqueueSize"/>
          <field type="ident" def="int" name="NicePriority"/>
          <field type="ident" def="int" name="RealtimePriority"/>
          <field type="ident" def="int" name="RealtimeTimeout"/>
        </type>
        <type type="struct" name="ProcIO">
          <field type="ident" def="uint64" name="RChar"/>
          <field type="ident" def="uint64" name="WChar"/>
          <field type="ident" def="uint64" name="SyscR"/>
          <field type="ident" def="uint64" name="SyscW"/>
          <field type="ident" def="uint64" name="ReadBytes"/>
          <field type="ident" def="uint64" name="WriteBytes"/>
          <field type="ident" def="int64" name="CancelledWriteBytes"/>
        </type>
        <type type="struct" name="Proc">
          <field type="ident" def="int" name="PID"/>
          <field type="ident" def="FS" name="fs"/>
        </type>
        <type name="Procs" type="slice">
          <elmtype type="ident" def="Proc"/>
        </type>
        <type type="struct" name="IPVSStats">
          <field type="ident" def="uint64" name="Connections"/>
          <field type="ident" def="uint64" name="IncomingPackets"/>
          <field type="ident" def="uint64" name="OutgoingPackets"/>
          <field type="ident" def="uint64" name="IncomingBytes"/>
          <field type="ident" def="uint64" name="OutgoingBytes"/>
        </type>
        <type type="struct" name="IPVSBackendStatus">
          <field type="selector" name="LocalAddress">
            <prefix value="net"/>
            <item value="IP"/>
          </field>
          <field type="ident" def="uint16" name="LocalPort"/>
          <field type="ident" def="string" name="Proto"/>
          <field type="selector" name="RemoteAddress">
            <prefix value="net"/>
            <item value="IP"/>
          </field>
          <field type="ident" def="uint16" name="RemotePort"/>
          <field type="ident" def="uint64" name="ActiveConn"/>
          <field type="ident" def="uint64" name="InactConn"/>
          <field type="ident" def="uint64" name="Weight"/>
        </type>
        <type name="FS" type="ident">
          <type type="ident" def="string"/>
        </type>
      </types>
      <functions>
        <function name="NewStat">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Stat"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewStat">
          <recvList>
            <type type="ident" def="FS"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Stat"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewStat">
          <recvList>
            <type type="ident" def="Proc"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ProcStat"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="VirtualMemory">
          <recvList>
            <type type="ident" def="ProcStat"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="ResidentMemory">
          <recvList>
            <type type="ident" def="ProcStat"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="StartTime">
          <recvList>
            <type type="ident" def="ProcStat"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CPUTime">
          <recvList>
            <type type="ident" def="ProcStat"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="NewLimits">
          <recvList>
            <type type="ident" def="Proc"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ProcLimits"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewIO">
          <recvList>
            <type type="ident" def="Proc"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ProcIO"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="Procs"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="Procs"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="Procs"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Self">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Proc"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewProc">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Proc"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="AllProcs">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Procs"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewProc">
          <recvList>
            <type type="ident" def="FS"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Proc"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="AllProcs">
          <recvList>
            <type type="ident" def="FS"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Procs"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CmdLine">
          <recvList>
            <type type="ident" def="Proc"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Executable">
          <recvList>
            <type type="ident" def="Proc"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FileDescriptors">
          <recvList>
            <type type="ident" def="Proc"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uintptr"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FileDescriptorsLen">
          <recvList>
            <type type="ident" def="Proc"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewIPVSStats">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="IPVSStats"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewIPVSStats">
          <recvList>
            <type type="ident" def="FS"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="IPVSStats"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewIPVSBackendStatus">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="IPVSBackendStatus"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewIPVSBackendStatus">
          <recvList>
            <type type="ident" def="FS"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="IPVSBackendStatus"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewFS">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="FS"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="DefaultMountPoint"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/miekg/dns">
      <types>
        <type type="struct" name="ParseError">
          <field type="ident" def="string" name="file"/>
          <field type="ident" def="string" name="err"/>
          <field type="ident" def="lex" name="lex"/>
        </type>
        <type type="struct" name="Token">
          <field type="ident" def="RR" name=""/>
          <field type="pointer" name="Error">
            <type type="ident" def="ParseError"/>
          </field>
          <field type="ident" def="string" name="Comment"/>
        </type>
        <type type="struct" name="Envelope">
          <field type="slice" name="RR">
            <elmtype type="ident" def="RR"/>
          </field>
          <field type="ident" def="error" name="Error"/>
        </type>
        <type type="struct" name="Transfer">
          <field type="pointer" name="">
            <type type="ident" def="Conn"/>
          </field>
          <field type="selector" name="DialTimeout">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="ReadTimeout">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="WriteTimeout">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="map" name="TsigSecret">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
          <field type="ident" def="bool" name="tsigTimersOnly"/>
        </type>
        <type type="struct" name="SessionUDP">
          <field type="pointer" name="raddr">
            <type type="selector">
              <prefix value="net"/>
              <item value="UDPAddr"/>
            </type>
          </field>
        </type>
        <type type="struct" name="SessionUDP">
          <field type="pointer" name="raddr">
            <type type="selector">
              <prefix value="net"/>
              <item value="UDPAddr"/>
            </type>
          </field>
          <field type="slice" name="context">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type name="Type" type="ident">
          <type type="ident" def="uint16"/>
        </type>
        <type name="Class" type="ident">
          <type type="ident" def="uint16"/>
        </type>
        <type name="Name" type="ident">
          <type type="ident" def="string"/>
        </type>
        <type type="struct" name="Header">
          <field type="ident" def="uint16" name="Id"/>
          <field type="ident" def="uint16" name="Bits"/>
          <field type="ident" def="uint16" name="Qdcount"/>
          <field type="ident" def="uint16" name="Ancount"/>
          <field type="ident" def="uint16" name="Nscount"/>
          <field type="ident" def="uint16" name="Arcount"/>
        </type>
        <type type="struct" name="Question">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="uint16" name="Qtype"/>
          <field type="ident" def="uint16" name="Qclass"/>
        </type>
        <type type="struct" name="ANY">
          <field type="ident" def="RR_Header" name="Hdr"/>
        </type>
        <type type="struct" name="CNAME">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Target"/>
        </type>
        <type type="struct" name="HINFO">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Cpu"/>
          <field type="ident" def="string" name="Os"/>
        </type>
        <type type="struct" name="MB">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Mb"/>
        </type>
        <type type="struct" name="MG">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Mg"/>
        </type>
        <type type="struct" name="MINFO">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Rmail"/>
          <field type="ident" def="string" name="Email"/>
        </type>
        <type type="struct" name="MR">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Mr"/>
        </type>
        <type type="struct" name="MF">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Mf"/>
        </type>
        <type type="struct" name="MD">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Md"/>
        </type>
        <type type="struct" name="MX">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="Preference"/>
          <field type="ident" def="string" name="Mx"/>
        </type>
        <type type="struct" name="AFSDB">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="Subtype"/>
          <field type="ident" def="string" name="Hostname"/>
        </type>
        <type type="struct" name="X25">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="PSDNAddress"/>
        </type>
        <type type="struct" name="RT">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="Preference"/>
          <field type="ident" def="string" name="Host"/>
        </type>
        <type type="struct" name="NS">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Ns"/>
        </type>
        <type type="struct" name="PTR">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Ptr"/>
        </type>
        <type type="struct" name="RP">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Mbox"/>
          <field type="ident" def="string" name="Txt"/>
        </type>
        <type type="struct" name="SOA">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Ns"/>
          <field type="ident" def="string" name="Mbox"/>
          <field type="ident" def="uint32" name="Serial"/>
          <field type="ident" def="uint32" name="Refresh"/>
          <field type="ident" def="uint32" name="Retry"/>
          <field type="ident" def="uint32" name="Expire"/>
          <field type="ident" def="uint32" name="Minttl"/>
        </type>
        <type type="struct" name="TXT">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="slice" name="Txt">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="SPF">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="slice" name="Txt">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="SRV">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="Priority"/>
          <field type="ident" def="uint16" name="Weight"/>
          <field type="ident" def="uint16" name="Port"/>
          <field type="ident" def="string" name="Target"/>
        </type>
        <type type="struct" name="NAPTR">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="Order"/>
          <field type="ident" def="uint16" name="Preference"/>
          <field type="ident" def="string" name="Flags"/>
          <field type="ident" def="string" name="Service"/>
          <field type="ident" def="string" name="Regexp"/>
          <field type="ident" def="string" name="Replacement"/>
        </type>
        <type type="struct" name="CERT">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="Type"/>
          <field type="ident" def="uint16" name="KeyTag"/>
          <field type="ident" def="uint8" name="Algorithm"/>
          <field type="ident" def="string" name="Certificate"/>
        </type>
        <type type="struct" name="DNAME">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Target"/>
        </type>
        <type type="struct" name="A">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="selector" name="A">
            <prefix value="net"/>
            <item value="IP"/>
          </field>
        </type>
        <type type="struct" name="AAAA">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="selector" name="AAAA">
            <prefix value="net"/>
            <item value="IP"/>
          </field>
        </type>
        <type type="struct" name="PX">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="Preference"/>
          <field type="ident" def="string" name="Map822"/>
          <field type="ident" def="string" name="Mapx400"/>
        </type>
        <type type="struct" name="GPOS">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Longitude"/>
          <field type="ident" def="string" name="Latitude"/>
          <field type="ident" def="string" name="Altitude"/>
        </type>
        <type type="struct" name="LOC">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint8" name="Version"/>
          <field type="ident" def="uint8" name="Size"/>
          <field type="ident" def="uint8" name="HorizPre"/>
          <field type="ident" def="uint8" name="VertPre"/>
          <field type="ident" def="uint32" name="Latitude"/>
          <field type="ident" def="uint32" name="Longitude"/>
          <field type="ident" def="uint32" name="Altitude"/>
        </type>
        <type type="struct" name="SIG">
          <field type="ident" def="RRSIG" name=""/>
        </type>
        <type type="struct" name="RRSIG">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="TypeCovered"/>
          <field type="ident" def="uint8" name="Algorithm"/>
          <field type="ident" def="uint8" name="Labels"/>
          <field type="ident" def="uint32" name="OrigTtl"/>
          <field type="ident" def="uint32" name="Expiration"/>
          <field type="ident" def="uint32" name="Inception"/>
          <field type="ident" def="uint16" name="KeyTag"/>
          <field type="ident" def="string" name="SignerName"/>
          <field type="ident" def="string" name="Signature"/>
        </type>
        <type type="struct" name="NSEC">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="NextDomain"/>
          <field type="slice" name="TypeBitMap">
            <elmtype type="ident" def="uint16"/>
          </field>
        </type>
        <type type="struct" name="DLV">
          <field type="ident" def="DS" name=""/>
        </type>
        <type type="struct" name="CDS">
          <field type="ident" def="DS" name=""/>
        </type>
        <type type="struct" name="DS">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="KeyTag"/>
          <field type="ident" def="uint8" name="Algorithm"/>
          <field type="ident" def="uint8" name="DigestType"/>
          <field type="ident" def="string" name="Digest"/>
        </type>
        <type type="struct" name="KX">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="Preference"/>
          <field type="ident" def="string" name="Exchanger"/>
        </type>
        <type type="struct" name="TA">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="KeyTag"/>
          <field type="ident" def="uint8" name="Algorithm"/>
          <field type="ident" def="uint8" name="DigestType"/>
          <field type="ident" def="string" name="Digest"/>
        </type>
        <type type="struct" name="TALINK">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="PreviousName"/>
          <field type="ident" def="string" name="NextName"/>
        </type>
        <type type="struct" name="SSHFP">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint8" name="Algorithm"/>
          <field type="ident" def="uint8" name="Type"/>
          <field type="ident" def="string" name="FingerPrint"/>
        </type>
        <type type="struct" name="IPSECKEY">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint8" name="Precedence"/>
          <field type="ident" def="uint8" name="GatewayType"/>
          <field type="ident" def="uint8" name="Algorithm"/>
          <field type="selector" name="GatewayA">
            <prefix value="net"/>
            <item value="IP"/>
          </field>
          <field type="selector" name="GatewayAAAA">
            <prefix value="net"/>
            <item value="IP"/>
          </field>
          <field type="ident" def="string" name="GatewayName"/>
          <field type="ident" def="string" name="PublicKey"/>
        </type>
        <type type="struct" name="KEY">
          <field type="ident" def="DNSKEY" name=""/>
        </type>
        <type type="struct" name="CDNSKEY">
          <field type="ident" def="DNSKEY" name=""/>
        </type>
        <type type="struct" name="DNSKEY">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="Flags"/>
          <field type="ident" def="uint8" name="Protocol"/>
          <field type="ident" def="uint8" name="Algorithm"/>
          <field type="ident" def="string" name="PublicKey"/>
        </type>
        <type type="struct" name="RKEY">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="Flags"/>
          <field type="ident" def="uint8" name="Protocol"/>
          <field type="ident" def="uint8" name="Algorithm"/>
          <field type="ident" def="string" name="PublicKey"/>
        </type>
        <type type="struct" name="NSAP">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Nsap"/>
        </type>
        <type type="struct" name="NSAPPTR">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Ptr"/>
        </type>
        <type type="struct" name="NSEC3">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint8" name="Hash"/>
          <field type="ident" def="uint8" name="Flags"/>
          <field type="ident" def="uint16" name="Iterations"/>
          <field type="ident" def="uint8" name="SaltLength"/>
          <field type="ident" def="string" name="Salt"/>
          <field type="ident" def="uint8" name="HashLength"/>
          <field type="ident" def="string" name="NextDomain"/>
          <field type="slice" name="TypeBitMap">
            <elmtype type="ident" def="uint16"/>
          </field>
        </type>
        <type type="struct" name="NSEC3PARAM">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint8" name="Hash"/>
          <field type="ident" def="uint8" name="Flags"/>
          <field type="ident" def="uint16" name="Iterations"/>
          <field type="ident" def="uint8" name="SaltLength"/>
          <field type="ident" def="string" name="Salt"/>
        </type>
        <type type="struct" name="TKEY">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Algorithm"/>
          <field type="ident" def="uint32" name="Inception"/>
          <field type="ident" def="uint32" name="Expiration"/>
          <field type="ident" def="uint16" name="Mode"/>
          <field type="ident" def="uint16" name="Error"/>
          <field type="ident" def="uint16" name="KeySize"/>
          <field type="ident" def="string" name="Key"/>
          <field type="ident" def="uint16" name="OtherLen"/>
          <field type="ident" def="string" name="OtherData"/>
        </type>
        <type type="struct" name="RFC3597">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Rdata"/>
        </type>
        <type type="struct" name="URI">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="Priority"/>
          <field type="ident" def="uint16" name="Weight"/>
          <field type="slice" name="Target">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="DHCID">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Digest"/>
        </type>
        <type type="struct" name="TLSA">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint8" name="Usage"/>
          <field type="ident" def="uint8" name="Selector"/>
          <field type="ident" def="uint8" name="MatchingType"/>
          <field type="ident" def="string" name="Certificate"/>
        </type>
        <type type="struct" name="HIP">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint8" name="HitLength"/>
          <field type="ident" def="uint8" name="PublicKeyAlgorithm"/>
          <field type="ident" def="uint16" name="PublicKeyLength"/>
          <field type="ident" def="string" name="Hit"/>
          <field type="ident" def="string" name="PublicKey"/>
          <field type="slice" name="RendezvousServers">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="NINFO">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="slice" name="ZSData">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="WKS">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="selector" name="Address">
            <prefix value="net"/>
            <item value="IP"/>
          </field>
          <field type="ident" def="uint8" name="Protocol"/>
          <field type="slice" name="BitMap">
            <elmtype type="ident" def="uint16"/>
          </field>
        </type>
        <type type="struct" name="NID">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="Preference"/>
          <field type="ident" def="uint64" name="NodeID"/>
        </type>
        <type type="struct" name="L32">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="Preference"/>
          <field type="selector" name="Locator32">
            <prefix value="net"/>
            <item value="IP"/>
          </field>
        </type>
        <type type="struct" name="L64">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="Preference"/>
          <field type="ident" def="uint64" name="Locator64"/>
        </type>
        <type type="struct" name="LP">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint16" name="Preference"/>
          <field type="ident" def="string" name="Fqdn"/>
        </type>
        <type type="struct" name="EUI48">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint64" name="Address"/>
        </type>
        <type type="struct" name="EUI64">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint64" name="Address"/>
        </type>
        <type type="struct" name="UID">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint32" name="Uid"/>
        </type>
        <type type="struct" name="GID">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="uint32" name="Gid"/>
        </type>
        <type type="struct" name="UINFO">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Uinfo"/>
        </type>
        <type type="struct" name="EID">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Endpoint"/>
        </type>
        <type type="struct" name="NIMLOC">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Locator"/>
        </type>
        <type type="struct" name="OPENPGPKEY">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="PublicKey"/>
        </type>
        <type type="struct" name="TSIG">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="string" name="Algorithm"/>
          <field type="ident" def="uint64" name="TimeSigned"/>
          <field type="ident" def="uint16" name="Fudge"/>
          <field type="ident" def="uint16" name="MACSize"/>
          <field type="ident" def="string" name="MAC"/>
          <field type="ident" def="uint16" name="OrigId"/>
          <field type="ident" def="uint16" name="Error"/>
          <field type="ident" def="uint16" name="OtherLen"/>
          <field type="ident" def="string" name="OtherData"/>
        </type>
        <type name="Handler" type="interface">
          <method name="ServeDNS">
            <paramsList>
              <type type="ident" def="ResponseWriter"/>
              <type type="pointer">
                <type type="ident" def="Msg"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type name="ResponseWriter" type="interface">
          <method name="LocalAddr">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="net"/>
                <item value="Addr"/>
              </type>
            </resultsList>
          </method>
          <method name="RemoteAddr">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="net"/>
                <item value="Addr"/>
              </type>
            </resultsList>
          </method>
          <method name="WriteMsg">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="Msg"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Write">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Close">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="TsigStatus">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="TsigTimersOnly">
            <paramsList>
              <type type="ident" def="bool"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Hijack">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="ServeMux">
          <field type="map" name="z">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="Handler"/>
          </field>
          <field type="pointer" name="m">
            <type type="selector">
              <prefix value="sync"/>
              <item value="RWMutex"/>
            </type>
          </field>
        </type>
        <type name="HandlerFunc" type="func">
          <paramsList>
            <type type="ident" def="ResponseWriter"/>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </paramsList>
          <resultsList/>
        </type>
        <type type="struct" name="Server">
          <field type="ident" def="string" name="Addr"/>
          <field type="ident" def="string" name="Net"/>
          <field type="selector" name="Listener">
            <prefix value="net"/>
            <item value="Listener"/>
          </field>
          <field type="selector" name="PacketConn">
            <prefix value="net"/>
            <item value="PacketConn"/>
          </field>
          <field type="ident" def="Handler" name="Handler"/>
          <field type="ident" def="int" name="UDPSize"/>
          <field type="selector" name="ReadTimeout">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="WriteTimeout">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="func" name="IdleTimeout">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="time"/>
                <item value="Duration"/>
              </type>
            </resultsList>
          </field>
          <field type="map" name="TsigSecret">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
          <field type="ident" def="bool" name="Unsafe"/>
          <field type="func" name="NotifyStartedFunc">
            <paramsList/>
            <resultsList/>
          </field>
          <field type="channel" dir="3" name="stopUDP">
            <type type="ident" def="bool"/>
          </field>
          <field type="channel" dir="3" name="stopTCP">
            <type type="ident" def="bool"/>
          </field>
          <field type="selector" name="wgUDP">
            <prefix value="sync"/>
            <item value="WaitGroup"/>
          </field>
          <field type="selector" name="wgTCP">
            <prefix value="sync"/>
            <item value="WaitGroup"/>
          </field>
          <field type="selector" name="lock">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="ident" def="bool" name="started"/>
        </type>
        <type name="PrivateRdata" type="interface">
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="Parse">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="string"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Pack">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Unpack">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Copy">
            <paramsList>
              <type type="ident" def="PrivateRdata"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Len">
            <paramsList/>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="PrivateRR">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="ident" def="PrivateRdata" name="Data"/>
        </type>
        <type name="Denialer" type="interface">
          <method name="Cover">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Match">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="MsgHdr">
          <field type="ident" def="uint16" name="Id"/>
          <field type="ident" def="bool" name="Response"/>
          <field type="ident" def="int" name="Opcode"/>
          <field type="ident" def="bool" name="Authoritative"/>
          <field type="ident" def="bool" name="Truncated"/>
          <field type="ident" def="bool" name="RecursionDesired"/>
          <field type="ident" def="bool" name="RecursionAvailable"/>
          <field type="ident" def="bool" name="Zero"/>
          <field type="ident" def="bool" name="AuthenticatedData"/>
          <field type="ident" def="bool" name="CheckingDisabled"/>
          <field type="ident" def="int" name="Rcode"/>
        </type>
        <type type="struct" name="Msg">
          <field type="ident" def="MsgHdr" name=""/>
          <field type="ident" def="bool" name="Compress"/>
          <field type="slice" name="Question">
            <elmtype type="ident" def="Question"/>
          </field>
          <field type="slice" name="Answer">
            <elmtype type="ident" def="RR"/>
          </field>
          <field type="slice" name="Ns">
            <elmtype type="ident" def="RR"/>
          </field>
          <field type="slice" name="Extra">
            <elmtype type="ident" def="RR"/>
          </field>
        </type>
        <type type="struct" name="OPT">
          <field type="ident" def="RR_Header" name="Hdr"/>
          <field type="slice" name="Option">
            <elmtype type="ident" def="EDNS0"/>
          </field>
        </type>
        <type name="EDNS0" type="interface">
          <method name="Option">
            <paramsList/>
            <resultsList>
              <type type="ident" def="uint16"/>
            </resultsList>
          </method>
          <method name="pack">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="unpack">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="EDNS0_NSID">
          <field type="ident" def="uint16" name="Code"/>
          <field type="ident" def="string" name="Nsid"/>
        </type>
        <type type="struct" name="EDNS0_SUBNET">
          <field type="ident" def="uint16" name="Code"/>
          <field type="ident" def="uint16" name="Family"/>
          <field type="ident" def="uint8" name="SourceNetmask"/>
          <field type="ident" def="uint8" name="SourceScope"/>
          <field type="selector" name="Address">
            <prefix value="net"/>
            <item value="IP"/>
          </field>
          <field type="ident" def="bool" name="DraftOption"/>
        </type>
        <type type="struct" name="EDNS0_UL">
          <field type="ident" def="uint16" name="Code"/>
          <field type="ident" def="uint32" name="Lease"/>
        </type>
        <type type="struct" name="EDNS0_LLQ">
          <field type="ident" def="uint16" name="Code"/>
          <field type="ident" def="uint16" name="Version"/>
          <field type="ident" def="uint16" name="Opcode"/>
          <field type="ident" def="uint16" name="Error"/>
          <field type="ident" def="uint64" name="Id"/>
          <field type="ident" def="uint32" name="LeaseLife"/>
        </type>
        <type type="struct" name="EDNS0_DAU">
          <field type="ident" def="uint16" name="Code"/>
          <field type="slice" name="AlgCode">
            <elmtype type="ident" def="uint8"/>
          </field>
        </type>
        <type type="struct" name="EDNS0_DHU">
          <field type="ident" def="uint16" name="Code"/>
          <field type="slice" name="AlgCode">
            <elmtype type="ident" def="uint8"/>
          </field>
        </type>
        <type type="struct" name="EDNS0_N3U">
          <field type="ident" def="uint16" name="Code"/>
          <field type="slice" name="AlgCode">
            <elmtype type="ident" def="uint8"/>
          </field>
        </type>
        <type type="struct" name="EDNS0_EXPIRE">
          <field type="ident" def="uint16" name="Code"/>
          <field type="ident" def="uint32" name="Expire"/>
        </type>
        <type type="struct" name="EDNS0_LOCAL">
          <field type="ident" def="uint16" name="Code"/>
          <field type="slice" name="Data">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type name="PrivateKey" type="interface">
          <method name="Sign">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="uint8"/>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="String">
            <paramsList>
              <type type="ident" def="uint8"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type name="RSAPrivateKey" type="selector">
          <prefix value="rsa"/>
          <item value="PrivateKey"/>
        </type>
        <type name="ECDSAPrivateKey" type="selector">
          <prefix value="ecdsa"/>
          <item value="PrivateKey"/>
        </type>
        <type name="DSAPrivateKey" type="selector">
          <prefix value="dsa"/>
          <item value="PrivateKey"/>
        </type>
        <type type="struct" name="Error">
          <field type="ident" def="string" name="err"/>
        </type>
        <type name="RR" type="interface">
          <method name="Header">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="RR_Header"/>
              </type>
            </resultsList>
          </method>
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="copy">
            <paramsList/>
            <resultsList>
              <type type="ident" def="RR"/>
            </resultsList>
          </method>
          <method name="len">
            <paramsList/>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="RR_Header">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="uint16" name="Rrtype"/>
          <field type="ident" def="uint16" name="Class"/>
          <field type="ident" def="uint32" name="Ttl"/>
          <field type="ident" def="uint16" name="Rdlength"/>
        </type>
        <type type="struct" name="ClientConfig">
          <field type="slice" name="Servers">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="Search">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="string" name="Port"/>
          <field type="ident" def="int" name="Ndots"/>
          <field type="ident" def="int" name="Timeout"/>
          <field type="ident" def="int" name="Attempts"/>
        </type>
        <type type="struct" name="Conn">
          <field type="selector" name="">
            <prefix value="net"/>
            <item value="Conn"/>
          </field>
          <field type="ident" def="uint16" name="UDPSize"/>
          <field type="map" name="TsigSecret">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
          <field type="selector" name="rtt">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="t">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="string" name="tsigRequestMAC"/>
        </type>
        <type type="struct" name="Client">
          <field type="ident" def="string" name="Net"/>
          <field type="ident" def="uint16" name="UDPSize"/>
          <field type="selector" name="DialTimeout">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="ReadTimeout">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="WriteTimeout">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="map" name="TsigSecret">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
          <field type="ident" def="bool" name="SingleInflight"/>
          <field type="ident" def="singleflight" name="group"/>
        </type>
      </types>
      <functions>
        <function name="Printf">
          <recvList>
            <type type="ident" def="debugging"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ParseError"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewRR">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="RR"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadRR">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="RR"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ParseZone">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="channel" dir="3">
              <type type="pointer">
                <type type="ident" def="Token"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="In">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Transfer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="channel" dir="3">
              <type type="pointer">
                <type type="ident" def="Envelope"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Out">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Transfer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="ResponseWriter"/>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
            <type type="channel" dir="3">
              <type type="pointer">
                <type type="ident" def="Envelope"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadMsg">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Transfer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteMsg">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Transfer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NameUsed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="RR"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NameNotUsed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="RR"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Used">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="RR"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RRsetUsed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="RR"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RRsetNotUsed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="RR"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Insert">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="RR"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RemoveRRset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="RR"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RemoveName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="RR"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Remove">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="RR"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ReadFromSessionUDP">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="net"/>
                <item value="UDPConn"/>
              </type>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="pointer">
              <type type="ident" def="SessionUDP"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteToSessionUDP">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="net"/>
                <item value="UDPConn"/>
              </type>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="ident" def="SessionUDP"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RemoteAddr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SessionUDP"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Addr"/>
            </type>
          </resultsList>
        </function>
        <function name="RemoteAddr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SessionUDP"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Addr"/>
            </type>
          </resultsList>
        </function>
        <function name="ReadFromSessionUDP">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="net"/>
                <item value="UDPConn"/>
              </type>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="pointer">
              <type type="ident" def="SessionUDP"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteToSessionUDP">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="net"/>
                <item value="UDPConn"/>
              </type>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="ident" def="SessionUDP"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Question"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ANY"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ANY"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CNAME"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CNAME"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HINFO"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HINFO"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MG"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MG"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MINFO"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MINFO"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MR"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MR"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MF"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MF"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MD"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MD"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MX"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MX"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AFSDB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AFSDB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="X25"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="X25"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RT"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RT"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NS"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NS"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PTR"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PTR"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RP"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RP"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SOA"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SOA"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TXT"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TXT"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SPF"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SPF"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SRV"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SRV"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NAPTR"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NAPTR"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CERT"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CERT"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DNAME"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DNAME"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="A"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="A"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AAAA"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AAAA"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PX"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PX"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GPOS"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GPOS"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LOC"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LOC"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RRSIG"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RRSIG"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NSEC"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NSEC"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DS"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DS"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KX"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KX"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TA"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TA"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TALINK"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TALINK"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SSHFP"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SSHFP"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IPSECKEY"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IPSECKEY"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DNSKEY"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DNSKEY"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RKEY"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RKEY"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NSAP"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NSAP"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NSAPPTR"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NSAPPTR"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NSEC3"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NSEC3"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NSEC3PARAM"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NSEC3PARAM"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TKEY"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TKEY"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RFC3597"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RFC3597"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="URI"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="URI"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DHCID"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DHCID"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TLSA"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TLSA"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HIP"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HIP"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NINFO"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NINFO"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="WKS"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="WKS"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NID"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NID"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="L32"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="L32"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="L64"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="L64"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LP"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LP"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EUI48"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EUI48"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EUI64"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EUI64"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UID"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UID"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GID"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GID"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UINFO"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UINFO"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EID"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EID"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NIMLOC"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NIMLOC"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OPENPGPKEY"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OPENPGPKEY"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="TimeToString">
          <recvList/>
          <paramsList>
            <type type="ident" def="uint32"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="StringToTime">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint32"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TSIG"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TSIG"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="TsigGenerate">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="TsigVerify">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CertificateToDANE">
          <recvList/>
          <paramsList>
            <type type="ident" def="uint8"/>
            <type type="ident" def="uint8"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="Certificate"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TLSA"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="Certificate"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Verify">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TLSA"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="Certificate"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="TLSAName">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Do">
          <recvList>
            <type type="pointer">
              <type type="ident" def="singleflight"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="pointer">
                  <type type="ident" def="Msg"/>
                </type>
                <type type="selector">
                  <prefix value="time"/>
                  <item value="Duration"/>
                </type>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="ident" def="error"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SIG"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="PrivateKey"/>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Verify">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SIG"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="KEY"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewServeMux">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="ServeMux"/>
            </type>
          </resultsList>
        </function>
        <function name="ServeDNS">
          <recvList>
            <type type="ident" def="HandlerFunc"/>
          </recvList>
          <paramsList>
            <type type="ident" def="ResponseWriter"/>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="HandleFailed">
          <recvList/>
          <paramsList>
            <type type="ident" def="ResponseWriter"/>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ListenAndServe">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="Handler"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ActivateAndServe">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Listener"/>
            </type>
            <type type="selector">
              <prefix value="net"/>
              <item value="PacketConn"/>
            </type>
            <type type="ident" def="Handler"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Handle">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ServeMux"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="Handler"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="HandleFunc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ServeMux"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="func">
              <paramsList>
                <type type="ident" def="ResponseWriter"/>
                <type type="pointer">
                  <type type="ident" def="Msg"/>
                </type>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="HandleRemove">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ServeMux"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ServeDNS">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ServeMux"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="ResponseWriter"/>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Handle">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="Handler"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="HandleRemove">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="HandleFunc">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="func">
              <paramsList>
                <type type="ident" def="ResponseWriter"/>
                <type type="pointer">
                  <type type="ident" def="Msg"/>
                </type>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ListenAndServe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ActivateAndServe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Shutdown">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteMsg">
          <recvList>
            <type type="pointer">
              <type type="ident" def="response"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="response"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="LocalAddr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="response"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Addr"/>
            </type>
          </resultsList>
        </function>
        <function name="RemoteAddr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="response"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Addr"/>
            </type>
          </resultsList>
        </function>
        <function name="TsigStatus">
          <recvList>
            <type type="pointer">
              <type type="ident" def="response"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="TsigTimersOnly">
          <recvList>
            <type type="pointer">
              <type type="ident" def="response"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Hijack">
          <recvList>
            <type type="pointer">
              <type type="ident" def="response"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="response"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PrivateRR"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PrivateRR"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="PrivateHandle">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="uint16"/>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="PrivateRdata"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PrivateHandleRemove">
          <recvList/>
          <paramsList>
            <type type="ident" def="uint16"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="HashName">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="uint8"/>
            <type type="ident" def="uint16"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Cover">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NSEC"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NSEC"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Cover">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NSEC3"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NSEC3"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="PackDomainName">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="int"/>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="int"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnpackDomainName">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PackStruct">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnpackStruct">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PackRR">
          <recvList/>
          <paramsList>
            <type type="ident" def="RR"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="int"/>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="int"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnpackRR">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="RR"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MsgHdr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Pack">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PackBuffer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Unpack">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Copy">
          <recvList/>
          <paramsList>
            <type type="ident" def="RR"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="RR"/>
          </resultsList>
        </function>
        <function name="Copy">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </resultsList>
        </function>
        <function name="CopyTo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </resultsList>
        </function>
        <function name="SplitDomainName">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="CompareDomainName">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="CountLabel">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Split">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int"/>
            </type>
          </resultsList>
        </function>
        <function name="NextLabel">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="PrevLabel">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NumField">
          <recvList/>
          <paramsList>
            <type type="ident" def="RR"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Field">
          <recvList/>
          <paramsList>
            <type type="ident" def="RR"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OPT"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OPT"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Version">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OPT"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint8"/>
          </resultsList>
        </function>
        <function name="SetVersion">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OPT"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint8"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ExtendedRcode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OPT"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint8"/>
          </resultsList>
        </function>
        <function name="SetExtendedRcode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OPT"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint8"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="UDPSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OPT"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint16"/>
          </resultsList>
        </function>
        <function name="SetUDPSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OPT"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint16"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Do">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OPT"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="SetDo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OPT"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Option">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_NSID"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint16"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_NSID"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Option">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_SUBNET"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint16"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_SUBNET"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Option">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_UL"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint16"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_UL"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Option">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_LLQ"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint16"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_LLQ"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Option">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_DAU"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint16"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_DAU"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Option">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_DHU"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint16"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_DHU"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Option">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_N3U"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint16"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_N3U"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Option">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_EXPIRE"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint16"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_EXPIRE"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Option">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_LOCAL"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint16"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EDNS0_LOCAL"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="PrivateKeyString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DNSKEY"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="PrivateKey"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RSAPrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="uint8"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RSAPrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint8"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ECDSAPrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="uint8"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ECDSAPrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint8"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DSAPrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="uint8"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DSAPrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint8"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewPrivateKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DNSKEY"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="PrivateKey"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadPrivateKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DNSKEY"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="PrivateKey"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Generate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DNSKEY"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="PrivateKey"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="KeyTag">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DNSKEY"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint16"/>
          </resultsList>
        </function>
        <function name="ToDS">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DNSKEY"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint8"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="DS"/>
            </type>
          </resultsList>
        </function>
        <function name="ToCDNSKEY">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DNSKEY"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CDNSKEY"/>
            </type>
          </resultsList>
        </function>
        <function name="ToCDS">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DS"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CDS"/>
            </type>
          </resultsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RRSIG"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="PrivateKey"/>
            <type type="slice">
              <elmtype type="ident" def="RR"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Verify">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RRSIG"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="DNSKEY"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="RR"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ValidityPeriod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RRSIG"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="wireSlice"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="wireSlice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="wireSlice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Error"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Header">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RR_Header"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ToRFC3597">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RFC3597"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="RR"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetReply">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </resultsList>
        </function>
        <function name="SetQuestion">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="uint16"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </resultsList>
        </function>
        <function name="SetNotify">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </resultsList>
        </function>
        <function name="SetRcode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </resultsList>
        </function>
        <function name="SetRcodeFormatError">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </resultsList>
        </function>
        <function name="SetUpdate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </resultsList>
        </function>
        <function name="SetIxfr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="uint32"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </resultsList>
        </function>
        <function name="SetAxfr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </resultsList>
        </function>
        <function name="SetTsig">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="int64"/>
            <type type="ident" def="int64"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </resultsList>
        </function>
        <function name="SetEdns0">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint16"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </resultsList>
        </function>
        <function name="IsTsig">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="TSIG"/>
            </type>
          </resultsList>
        </function>
        <function name="IsEdns0">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="OPT"/>
            </type>
          </resultsList>
        </function>
        <function name="IsDomainName">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="IsSubDomain">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="IsMsg">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="IsFqdn">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Fqdn">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ReverseAddr">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Type"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Class"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Name"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ClientConfigFromFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="ClientConfig"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Exchange">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ExchangeConn">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Conn"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Exchange">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadMsg">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteMsg">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Msg"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Dial">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DialTimeout">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="LocalAddr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Addr"/>
            </type>
          </resultsList>
        </function>
        <function name="RemoteAddr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Addr"/>
            </type>
          </resultsList>
        </function>
        <function name="SetDeadline">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetReadDeadline">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetWriteDeadline">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="TypeNone"/>
        <name value="TypeA"/>
        <name value="TypeNS"/>
        <name value="TypeMD"/>
        <name value="TypeMF"/>
        <name value="TypeCNAME"/>
        <name value="TypeSOA"/>
        <name value="TypeMB"/>
        <name value="TypeMG"/>
        <name value="TypeMR"/>
        <name value="TypeNULL"/>
        <name value="TypeWKS"/>
        <name value="TypePTR"/>
        <name value="TypeHINFO"/>
        <name value="TypeMINFO"/>
        <name value="TypeMX"/>
        <name value="TypeTXT"/>
        <name value="TypeRP"/>
        <name value="TypeAFSDB"/>
        <name value="TypeX25"/>
        <name value="TypeISDN"/>
        <name value="TypeRT"/>
        <name value="TypeNSAP"/>
        <name value="TypeNSAPPTR"/>
        <name value="TypeSIG"/>
        <name value="TypeKEY"/>
        <name value="TypePX"/>
        <name value="TypeGPOS"/>
        <name value="TypeAAAA"/>
        <name value="TypeLOC"/>
        <name value="TypeNXT"/>
        <name value="TypeEID"/>
        <name value="TypeNIMLOC"/>
        <name value="TypeSRV"/>
        <name value="TypeATMA"/>
        <name value="TypeNAPTR"/>
        <name value="TypeKX"/>
        <name value="TypeCERT"/>
        <name value="TypeDNAME"/>
        <name value="TypeOPT"/>
        <name value="TypeDS"/>
        <name value="TypeSSHFP"/>
        <name value="TypeIPSECKEY"/>
        <name value="TypeRRSIG"/>
        <name value="TypeNSEC"/>
        <name value="TypeDNSKEY"/>
        <name value="TypeDHCID"/>
        <name value="TypeNSEC3"/>
        <name value="TypeNSEC3PARAM"/>
        <name value="TypeTLSA"/>
        <name value="TypeHIP"/>
        <name value="TypeNINFO"/>
        <name value="TypeRKEY"/>
        <name value="TypeTALINK"/>
        <name value="TypeCDS"/>
        <name value="TypeCDNSKEY"/>
        <name value="TypeOPENPGPKEY"/>
        <name value="TypeSPF"/>
        <name value="TypeUINFO"/>
        <name value="TypeUID"/>
        <name value="TypeGID"/>
        <name value="TypeUNSPEC"/>
        <name value="TypeNID"/>
        <name value="TypeL32"/>
        <name value="TypeL64"/>
        <name value="TypeLP"/>
        <name value="TypeEUI48"/>
        <name value="TypeEUI64"/>
        <name value="TypeTKEY"/>
        <name value="TypeTSIG"/>
        <name value="TypeIXFR"/>
        <name value="TypeAXFR"/>
        <name value="TypeMAILB"/>
        <name value="TypeMAILA"/>
        <name value="TypeANY"/>
        <name value="TypeURI"/>
        <name value="TypeCAA"/>
        <name value="TypeTA"/>
        <name value="TypeDLV"/>
        <name value="TypeReserved"/>
        <name value="ClassINET"/>
        <name value="ClassCSNET"/>
        <name value="ClassCHAOS"/>
        <name value="ClassHESIOD"/>
        <name value="ClassNONE"/>
        <name value="ClassANY"/>
        <name value="RcodeSuccess"/>
        <name value="RcodeFormatError"/>
        <name value="RcodeServerFailure"/>
        <name value="RcodeNameError"/>
        <name value="RcodeNotImplemented"/>
        <name value="RcodeRefused"/>
        <name value="RcodeYXDomain"/>
        <name value="RcodeYXRrset"/>
        <name value="RcodeNXRrset"/>
        <name value="RcodeNotAuth"/>
        <name value="RcodeNotZone"/>
        <name value="RcodeBadSig"/>
        <name value="RcodeBadVers"/>
        <name value="RcodeBadKey"/>
        <name value="RcodeBadTime"/>
        <name value="RcodeBadMode"/>
        <name value="RcodeBadName"/>
        <name value="RcodeBadAlg"/>
        <name value="RcodeBadTrunc"/>
        <name value="OpcodeQuery"/>
        <name value="OpcodeIQuery"/>
        <name value="OpcodeStatus"/>
        <name value="OpcodeNotify"/>
        <name value="OpcodeUpdate"/>
        <name value="LOC_EQUATOR"/>
        <name value="LOC_PRIMEMERIDIAN"/>
        <name value="LOC_HOURS"/>
        <name value="LOC_DEGREES"/>
        <name value="LOC_ALTITUDEBASE"/>
        <name value="CertPKIX"/>
        <name value="CertSPKI"/>
        <name value="CertPGP"/>
        <name value="CertIPIX"/>
        <name value="CertISPKI"/>
        <name value="CertIPGP"/>
        <name value="CertACPKIX"/>
        <name value="CertIACPKIX"/>
        <name value="CertURI"/>
        <name value="CertOID"/>
        <name value="CertTypeToString"/>
        <name value="StringToCertType"/>
        <name value="HmacMD5"/>
        <name value="HmacSHA1"/>
        <name value="HmacSHA256"/>
        <name value="HmacSHA512"/>
        <name value="DefaultServeMux"/>
        <name value="ErrAlg"/>
        <name value="ErrAuth"/>
        <name value="ErrBuf"/>
        <name value="ErrConn"/>
        <name value="ErrConnEmpty"/>
        <name value="ErrExtendedRcode"/>
        <name value="ErrFqdn"/>
        <name value="ErrId"/>
        <name value="ErrKeyAlg"/>
        <name value="ErrKey"/>
        <name value="ErrKeySize"/>
        <name value="ErrNoSig"/>
        <name value="ErrPrivKey"/>
        <name value="ErrRcode"/>
        <name value="ErrRdata"/>
        <name value="ErrRRset"/>
        <name value="ErrSecret"/>
        <name value="ErrShortRead"/>
        <name value="ErrSig"/>
        <name value="ErrSigGen"/>
        <name value="ErrSoa"/>
        <name value="ErrTime"/>
        <name value="Id"/>
        <name value="TypeToString"/>
        <name value="StringToType"/>
        <name value="StringToClass"/>
        <name value="StringToOpcode"/>
        <name value="StringToRcode"/>
        <name value="ClassToString"/>
        <name value="OpcodeToString"/>
        <name value="RcodeToString"/>
        <name value="EDNS0LLQ"/>
        <name value="EDNS0UL"/>
        <name value="EDNS0NSID"/>
        <name value="EDNS0DAU"/>
        <name value="EDNS0DHU"/>
        <name value="EDNS0N3U"/>
        <name value="EDNS0SUBNET"/>
        <name value="EDNS0EXPIRE"/>
        <name value="EDNS0SUBNETDRAFT"/>
        <name value="EDNS0LOCALSTART"/>
        <name value="EDNS0LOCALEND"/>
        <name value="RSAMD5"/>
        <name value="DH"/>
        <name value="DSA"/>
        <name value="RSASHA1"/>
        <name value="DSANSEC3SHA1"/>
        <name value="RSASHA1NSEC3SHA1"/>
        <name value="RSASHA256"/>
        <name value="RSASHA512"/>
        <name value="ECCGOST"/>
        <name value="ECDSAP256SHA256"/>
        <name value="ECDSAP384SHA384"/>
        <name value="INDIRECT"/>
        <name value="PRIVATEDNS"/>
        <name value="PRIVATEOID"/>
        <name value="SHA1"/>
        <name value="SHA256"/>
        <name value="GOST94"/>
        <name value="SHA384"/>
        <name value="SHA512"/>
        <name value="SEP"/>
        <name value="REVOKE"/>
        <name value="ZONE"/>
        <name value="AlgorithmToString"/>
        <name value="StringToAlgorithm"/>
        <name value="HashToString"/>
        <name value="StringToHash"/>
        <name value="DefaultMsgSize"/>
        <name value="MinMsgSize"/>
        <name value="MaxMsgSize"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/promql">
      <types>
        <type type="struct" name="Test">
          <field type="selector" name="">
            <prefix value="testutil"/>
            <item value="T"/>
          </field>
          <field type="slice" name="cmds">
            <elmtype type="ident" def="testCommand"/>
          </field>
          <field type="selector" name="storage">
            <prefix value="local"/>
            <item value="Storage"/>
          </field>
          <field type="func" name="closeStorage">
            <paramsList/>
            <resultsList/>
          </field>
          <field type="pointer" name="queryEngine">
            <type type="ident" def="Engine"/>
          </field>
        </type>
        <type type="struct" name="ParseErr">
          <field type="ident" def="int" name="Line"/>
          <field type="ident" def="int" name="Pos"/>
          <field type="ident" def="error" name="Err"/>
        </type>
        <type name="Pos" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="Function">
          <field type="ident" def="string" name="Name"/>
          <field type="slice" name="ArgTypes">
            <elmtype type="ident" def="ExprType"/>
          </field>
          <field type="ident" def="int" name="OptionalArgs"/>
          <field type="ident" def="ExprType" name="ReturnType"/>
          <field type="func" name="Call">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="evaluator"/>
              </type>
              <type type="ident" def="Expressions"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="Value"/>
            </resultsList>
          </field>
        </type>
        <type type="struct" name="SampleStream">
          <field type="selector" name="Metric">
            <prefix value="clientmodel"/>
            <item value="COWMetric"/>
          </field>
          <field type="selector" name="Values">
            <prefix value="metric"/>
            <item value="Values"/>
          </field>
        </type>
        <type type="struct" name="Sample">
          <field type="selector" name="Metric">
            <prefix value="clientmodel"/>
            <item value="COWMetric"/>
          </field>
          <field type="selector" name="Value">
            <prefix value="clientmodel"/>
            <item value="SampleValue"/>
          </field>
          <field type="selector" name="Timestamp">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
        </type>
        <type type="struct" name="Scalar">
          <field type="selector" name="Value">
            <prefix value="clientmodel"/>
            <item value="SampleValue"/>
          </field>
          <field type="selector" name="Timestamp">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
        </type>
        <type type="struct" name="String">
          <field type="ident" def="string" name="Value"/>
          <field type="selector" name="Timestamp">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
        </type>
        <type name="Vector" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="Sample"/>
          </elmtype>
        </type>
        <type name="Matrix" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="SampleStream"/>
          </elmtype>
        </type>
        <type name="Value" type="interface">
          <method name="Type">
            <paramsList/>
            <resultsList>
              <type type="ident" def="ExprType"/>
            </resultsList>
          </method>
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Result">
          <field type="ident" def="error" name="Err"/>
          <field type="ident" def="Value" name="Value"/>
        </type>
        <type name="ErrQueryTimeout" type="ident">
          <type type="ident" def="string"/>
        </type>
        <type name="ErrQueryCanceled" type="ident">
          <type type="ident" def="string"/>
        </type>
        <type name="Query" type="interface">
          <method name="Exec">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="Result"/>
              </type>
            </resultsList>
          </method>
          <method name="Statements">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Statements"/>
            </resultsList>
          </method>
          <method name="Stats">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="stats"/>
                  <item value="TimerGroup"/>
                </type>
              </type>
            </resultsList>
          </method>
          <method name="Cancel">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="Engine">
          <field type="selector" name="storage">
            <prefix value="local"/>
            <item value="Storage"/>
          </field>
          <field type="selector" name="baseCtx">
            <prefix value="context"/>
            <item value="Context"/>
          </field>
          <field type="func" name="cancelQueries">
            <paramsList/>
            <resultsList/>
          </field>
          <field type="pointer" name="gate">
            <type type="ident" def="queryGate"/>
          </field>
          <field type="pointer" name="options">
            <type type="ident" def="EngineOptions"/>
          </field>
        </type>
        <type type="struct" name="EngineOptions">
          <field type="ident" def="int" name="MaxConcurrentQueries"/>
          <field type="selector" name="Timeout">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
        </type>
        <type name="Node" type="interface">
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type name="Statement" type="interface">
          <method name="stmt">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type name="Statements" type="slice">
          <elmtype type="ident" def="Statement"/>
        </type>
        <type type="struct" name="AlertStmt">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="Expr" name="Expr"/>
          <field type="selector" name="Duration">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="Labels">
            <prefix value="clientmodel"/>
            <item value="LabelSet"/>
          </field>
          <field type="ident" def="string" name="Summary"/>
          <field type="ident" def="string" name="Description"/>
          <field type="ident" def="string" name="Runbook"/>
        </type>
        <type type="struct" name="EvalStmt">
          <field type="ident" def="Expr" name="Expr"/>
          <field type="selector" name="Start">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
          <field type="selector" name="End">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
          <field type="selector" name="Interval">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
        </type>
        <type type="struct" name="RecordStmt">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="Expr" name="Expr"/>
          <field type="selector" name="Labels">
            <prefix value="clientmodel"/>
            <item value="LabelSet"/>
          </field>
        </type>
        <type name="ExprType" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type name="Expr" type="interface">
          <method name="Type">
            <paramsList/>
            <resultsList>
              <type type="ident" def="ExprType"/>
            </resultsList>
          </method>
          <method name="expr">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type name="Expressions" type="slice">
          <elmtype type="ident" def="Expr"/>
        </type>
        <type type="struct" name="AggregateExpr">
          <field type="ident" def="itemType" name="Op"/>
          <field type="ident" def="Expr" name="Expr"/>
          <field type="selector" name="Grouping">
            <prefix value="clientmodel"/>
            <item value="LabelNames"/>
          </field>
          <field type="ident" def="bool" name="KeepExtraLabels"/>
        </type>
        <type type="struct" name="BinaryExpr">
          <field type="ident" def="itemType" name="Op"/>
          <field type="ident" def="Expr" name="LHS"/>
          <field type="ident" def="Expr" name="RHS"/>
          <field type="pointer" name="VectorMatching">
            <type type="ident" def="VectorMatching"/>
          </field>
        </type>
        <type type="struct" name="Call">
          <field type="pointer" name="Func">
            <type type="ident" def="Function"/>
          </field>
          <field type="ident" def="Expressions" name="Args"/>
        </type>
        <type type="struct" name="MatrixSelector">
          <field type="ident" def="string" name="Name"/>
          <field type="selector" name="Range">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="Offset">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="LabelMatchers">
            <prefix value="metric"/>
            <item value="LabelMatchers"/>
          </field>
          <field type="map" name="iterators">
            <keytype type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </keytype>
            <valtype type="selector">
              <prefix value="local"/>
              <item value="SeriesIterator"/>
            </valtype>
          </field>
          <field type="map" name="metrics">
            <keytype type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </keytype>
            <valtype type="selector">
              <prefix value="clientmodel"/>
              <item value="COWMetric"/>
            </valtype>
          </field>
        </type>
        <type type="struct" name="NumberLiteral">
          <field type="selector" name="Val">
            <prefix value="clientmodel"/>
            <item value="SampleValue"/>
          </field>
        </type>
        <type type="struct" name="ParenExpr">
          <field type="ident" def="Expr" name="Expr"/>
        </type>
        <type type="struct" name="StringLiteral">
          <field type="ident" def="string" name="Val"/>
        </type>
        <type type="struct" name="UnaryExpr">
          <field type="ident" def="itemType" name="Op"/>
          <field type="ident" def="Expr" name="Expr"/>
        </type>
        <type type="struct" name="VectorSelector">
          <field type="ident" def="string" name="Name"/>
          <field type="selector" name="Offset">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="LabelMatchers">
            <prefix value="metric"/>
            <item value="LabelMatchers"/>
          </field>
          <field type="map" name="iterators">
            <keytype type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </keytype>
            <valtype type="selector">
              <prefix value="local"/>
              <item value="SeriesIterator"/>
            </valtype>
          </field>
          <field type="map" name="metrics">
            <keytype type="selector">
              <prefix value="clientmodel"/>
              <item value="Fingerprint"/>
            </keytype>
            <valtype type="selector">
              <prefix value="clientmodel"/>
              <item value="COWMetric"/>
            </valtype>
          </field>
        </type>
        <type name="VectorMatchCardinality" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="VectorMatching">
          <field type="ident" def="VectorMatchCardinality" name="Card"/>
          <field type="selector" name="On">
            <prefix value="clientmodel"/>
            <item value="LabelNames"/>
          </field>
          <field type="selector" name="Include">
            <prefix value="clientmodel"/>
            <item value="LabelNames"/>
          </field>
        </type>
        <type name="Visitor" type="interface">
          <method name="Visit">
            <paramsList>
              <type type="ident" def="Node"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="Visitor"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Analyzer">
          <field type="selector" name="Storage">
            <prefix value="local"/>
            <item value="Storage"/>
          </field>
          <field type="ident" def="Expr" name="Expr"/>
          <field type="selector" name="Start">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
          <field type="selector" name="End">
            <prefix value="clientmodel"/>
            <item value="Timestamp"/>
          </field>
          <field type="map" name="offsetPreloadTimes">
            <keytype type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </keytype>
            <valtype type="ident" def="preloadTimes"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewTest">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="testutil"/>
              <item value="T"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Test"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewTestFromFile">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="testutil"/>
              <item value="T"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Test"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="QueryEngine">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Test"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Engine"/>
            </type>
          </resultsList>
        </function>
        <function name="Storage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Test"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="local"/>
              <item value="Storage"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="loadCmd"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="entry"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="evalCmd"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="clearCmd"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Test"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Test"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="buckets"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="buckets"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="buckets"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Matrix"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Vector"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Tree">
          <recvList/>
          <paramsList>
            <type type="ident" def="Node"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Statements"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AlertStmt"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EvalStmt"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RecordStmt"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Expressions"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AggregateExpr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BinaryExpr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MatrixSelector"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NumberLiteral"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ParenExpr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StringLiteral"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UnaryExpr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="VectorSelector"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ParseErr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ParseStmts">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Statements"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ParseExpr">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Expr"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ParseMetric">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Metric"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ParseMetricSelector">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="metric"/>
              <item value="LabelMatchers"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="sequenceValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="item"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="itemType"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="vectorByValueHeap"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="vectorByValueHeap"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="vectorByValueHeap"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Push">
          <recvList>
            <type type="pointer">
              <type type="ident" def="vectorByValueHeap"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Pop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="vectorByValueHeap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="reverseHeap"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sample"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Scalar"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Scalar"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="String"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="String"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="Matrix"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="Matrix"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="Matrix"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Type">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ExprType"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ExprType"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ExprType"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ExprType"/>
          </resultsList>
        </function>
        <function name="Vector">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Vector"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Matrix">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Matrix"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Scalar">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Scalar"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="ErrQueryTimeout"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="ErrQueryCanceled"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Statements">
          <recvList>
            <type type="pointer">
              <type type="ident" def="query"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Statements"/>
          </resultsList>
        </function>
        <function name="Stats">
          <recvList>
            <type type="pointer">
              <type type="ident" def="query"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="stats"/>
                <item value="TimerGroup"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Cancel">
          <recvList>
            <type type="pointer">
              <type type="ident" def="query"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Exec">
          <recvList>
            <type type="pointer">
              <type type="ident" def="query"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Result"/>
            </type>
          </resultsList>
        </function>
        <function name="NewEngine">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="local"/>
              <item value="Storage"/>
            </type>
            <type type="pointer">
              <type type="ident" def="EngineOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Engine"/>
            </type>
          </resultsList>
        </function>
        <function name="Stop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Engine"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="NewInstantQuery">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Engine"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Query"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewRangeQuery">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Engine"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="selector">
              <prefix value="clientmodel"/>
              <item value="Timestamp"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Query"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="DotGraph">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Eval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="evaluator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Expr"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Value"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Start">
          <recvList>
            <type type="pointer">
              <type type="ident" def="queryGate"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="context"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Done">
          <recvList>
            <type type="pointer">
              <type type="ident" def="queryGate"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="ident" def="ExprType"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="ExprType"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AggregateExpr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ExprType"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ExprType"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MatrixSelector"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ExprType"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NumberLiteral"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ExprType"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ParenExpr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ExprType"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StringLiteral"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ExprType"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UnaryExpr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ExprType"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="VectorSelector"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ExprType"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BinaryExpr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ExprType"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="VectorMatchCardinality"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Walk">
          <recvList/>
          <paramsList>
            <type type="ident" def="Visitor"/>
            <type type="ident" def="Node"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Visit">
          <recvList>
            <type type="ident" def="inspector"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Node"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Visitor"/>
          </resultsList>
        </function>
        <function name="Inspect">
          <recvList/>
          <paramsList>
            <type type="ident" def="Node"/>
            <type type="func">
              <paramsList>
                <type type="ident" def="Node"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="bool"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Analyze">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Analyzer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="context"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Prepare">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Analyzer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="context"/>
              <item value="Context"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="local"/>
              <item value="Preloader"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="LowestPrec"/>
        <name value="DefaultEngineOptions"/>
        <name value="StalenessDelta"/>
        <name value="ExprNone"/>
        <name value="ExprScalar"/>
        <name value="ExprVector"/>
        <name value="ExprMatrix"/>
        <name value="ExprString"/>
        <name value="CardOneToOne"/>
        <name value="CardManyToOne"/>
        <name value="CardOneToMany"/>
        <name value="CardManyToMany"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/config">
      <types>
        <type type="struct" name="Config">
          <field type="ident" def="GlobalConfig" name="GlobalConfig"/>
          <field type="slice" name="RuleFiles">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="ScrapeConfigs">
            <elmtype type="pointer">
              <type type="ident" def="ScrapeConfig"/>
            </elmtype>
          </field>
          <field type="map" name="XXX">
            <keytype type="ident" def="string"/>
            <valtype type="interface"/>
          </field>
          <field type="ident" def="string" name="original"/>
        </type>
        <type type="struct" name="GlobalConfig">
          <field type="ident" def="Duration" name="ScrapeInterval"/>
          <field type="ident" def="Duration" name="ScrapeTimeout"/>
          <field type="ident" def="Duration" name="EvaluationInterval"/>
          <field type="selector" name="Labels">
            <prefix value="clientmodel"/>
            <item value="LabelSet"/>
          </field>
          <field type="map" name="XXX">
            <keytype type="ident" def="string"/>
            <valtype type="interface"/>
          </field>
        </type>
        <type type="struct" name="ScrapeConfig">
          <field type="ident" def="string" name="JobName"/>
          <field type="ident" def="bool" name="HonorLabels"/>
          <field type="selector" name="Params">
            <prefix value="url"/>
            <item value="Values"/>
          </field>
          <field type="ident" def="Duration" name="ScrapeInterval"/>
          <field type="ident" def="Duration" name="ScrapeTimeout"/>
          <field type="ident" def="string" name="MetricsPath"/>
          <field type="ident" def="string" name="Scheme"/>
          <field type="pointer" name="BasicAuth">
            <type type="ident" def="BasicAuth"/>
          </field>
          <field type="slice" name="TargetGroups">
            <elmtype type="pointer">
              <type type="ident" def="TargetGroup"/>
            </elmtype>
          </field>
          <field type="slice" name="DNSSDConfigs">
            <elmtype type="pointer">
              <type type="ident" def="DNSSDConfig"/>
            </elmtype>
          </field>
          <field type="slice" name="FileSDConfigs">
            <elmtype type="pointer">
              <type type="ident" def="FileSDConfig"/>
            </elmtype>
          </field>
          <field type="slice" name="ConsulSDConfigs">
            <elmtype type="pointer">
              <type type="ident" def="ConsulSDConfig"/>
            </elmtype>
          </field>
          <field type="slice" name="ServersetSDConfigs">
            <elmtype type="pointer">
              <type type="ident" def="ServersetSDConfig"/>
            </elmtype>
          </field>
          <field type="slice" name="RelabelConfigs">
            <elmtype type="pointer">
              <type type="ident" def="RelabelConfig"/>
            </elmtype>
          </field>
          <field type="slice" name="MetricRelabelConfigs">
            <elmtype type="pointer">
              <type type="ident" def="RelabelConfig"/>
            </elmtype>
          </field>
          <field type="map" name="XXX">
            <keytype type="ident" def="string"/>
            <valtype type="interface"/>
          </field>
        </type>
        <type type="struct" name="BasicAuth">
          <field type="ident" def="string" name="Username"/>
          <field type="ident" def="string" name="Password"/>
          <field type="map" name="XXX">
            <keytype type="ident" def="string"/>
            <valtype type="interface"/>
          </field>
        </type>
        <type type="struct" name="TargetGroup">
          <field type="slice" name="Targets">
            <elmtype type="selector">
              <prefix value="clientmodel"/>
              <item value="LabelSet"/>
            </elmtype>
          </field>
          <field type="selector" name="Labels">
            <prefix value="clientmodel"/>
            <item value="LabelSet"/>
          </field>
          <field type="ident" def="string" name="Source"/>
        </type>
        <type type="struct" name="DNSSDConfig">
          <field type="slice" name="Names">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="Duration" name="RefreshInterval"/>
          <field type="map" name="XXX">
            <keytype type="ident" def="string"/>
            <valtype type="interface"/>
          </field>
        </type>
        <type type="struct" name="FileSDConfig">
          <field type="slice" name="Names">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="Duration" name="RefreshInterval"/>
          <field type="map" name="XXX">
            <keytype type="ident" def="string"/>
            <valtype type="interface"/>
          </field>
        </type>
        <type type="struct" name="ConsulSDConfig">
          <field type="ident" def="string" name="Server"/>
          <field type="ident" def="string" name="Token"/>
          <field type="ident" def="string" name="Datacenter"/>
          <field type="ident" def="string" name="TagSeparator"/>
          <field type="ident" def="string" name="Scheme"/>
          <field type="ident" def="string" name="Username"/>
          <field type="ident" def="string" name="Password"/>
          <field type="slice" name="Services">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="map" name="XXX">
            <keytype type="ident" def="string"/>
            <valtype type="interface"/>
          </field>
        </type>
        <type type="struct" name="ServersetSDConfig">
          <field type="slice" name="Servers">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="Paths">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="Duration" name="Timeout"/>
          <field type="map" name="XXX">
            <keytype type="ident" def="string"/>
            <valtype type="interface"/>
          </field>
        </type>
        <type name="RelabelAction" type="ident">
          <type type="ident" def="string"/>
        </type>
        <type type="struct" name="RelabelConfig">
          <field type="selector" name="SourceLabels">
            <prefix value="clientmodel"/>
            <item value="LabelNames"/>
          </field>
          <field type="ident" def="string" name="Separator"/>
          <field type="pointer" name="Regex">
            <type type="ident" def="Regexp"/>
          </field>
          <field type="ident" def="uint64" name="Modulus"/>
          <field type="selector" name="TargetLabel">
            <prefix value="clientmodel"/>
            <item value="LabelName"/>
          </field>
          <field type="ident" def="string" name="Replacement"/>
          <field type="ident" def="RelabelAction" name="Action"/>
          <field type="map" name="XXX">
            <keytype type="ident" def="string"/>
            <valtype type="interface"/>
          </field>
        </type>
        <type type="struct" name="Regexp">
          <field type="selector" name="">
            <prefix value="regexp"/>
            <item value="Regexp"/>
          </field>
        </type>
        <type name="Duration" type="selector">
          <prefix value="time"/>
          <item value="Duration"/>
        </type>
      </types>
      <functions>
        <function name="Load">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="LoadFromFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Config"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalYAML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="interface"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalYAML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GlobalConfig"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="interface"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalYAML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ScrapeConfig"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="interface"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalYAML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BasicAuth"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="interface"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="TargetGroup"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalYAML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetGroup"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="interface"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalYAML">
          <recvList>
            <type type="ident" def="TargetGroup"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="interface"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TargetGroup"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalYAML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DNSSDConfig"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="interface"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalYAML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FileSDConfig"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="interface"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalYAML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ConsulSDConfig"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="interface"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalYAML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ServersetSDConfig"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="interface"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalYAML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RelabelAction"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="interface"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalYAML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RelabelConfig"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="interface"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalYAML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Regexp"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="interface"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalYAML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Regexp"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="interface"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalYAML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Duration"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="interface"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalYAML">
          <recvList>
            <type type="ident" def="Duration"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="interface"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="DefaultConfig"/>
        <name value="DefaultGlobalConfig"/>
        <name value="DefaultScrapeConfig"/>
        <name value="DefaultRelabelConfig"/>
        <name value="DefaultDNSSDConfig"/>
        <name value="DefaultFileSDConfig"/>
        <name value="DefaultConsulSDConfig"/>
        <name value="DefaultServersetSDConfig"/>
        <name value="RelabelReplace"/>
        <name value="RelabelKeep"/>
        <name value="RelabelDrop"/>
        <name value="RelabelHashMod"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/Godeps/_workspace/src/github.com/syndtr/goleveldb/leveldb/errors">
      <types>
        <type type="struct" name="ErrCorrupted">
          <field type="pointer" name="File">
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileInfo"/>
            </type>
          </field>
          <field type="ident" def="error" name="Err"/>
        </type>
        <type type="struct" name="ErrMissingFiles">
          <field type="slice" name="Files">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="storage"/>
                <item value="FileInfo"/>
              </type>
            </elmtype>
          </field>
        </type>
      </types>
      <functions>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ErrCorrupted"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewErrCorrupted">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="File"/>
            </type>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="IsCorrupted">
          <recvList/>
          <paramsList>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ErrMissingFiles"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="SetFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="error"/>
            <type type="selector">
              <prefix value="storage"/>
              <item value="File"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ErrNotFound"/>
        <name value="ErrReleased"/>
        <name value="ErrHasReleaser"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/prometheus/version">
      <types/>
      <functions/>
      <names>
        <name value="Version"/>
        <name value="Revision"/>
        <name value="Branch"/>
        <name value="BuildUser"/>
        <name value="BuildDate"/>
        <name value="GoVersion"/>
        <name value="Map"/>
      </names>
    </package>
  </packages>
  <imports>
    <import path="encoding/json"/>
    <import path="fmt"/>
    <import path="io"/>
    <import path="io/ioutil"/>
    <import path="net"/>
    <import path="net/http"/>
    <import path="net/url"/>
    <import path="os"/>
    <import path="path/filepath"/>
    <import path="sort"/>
    <import path="strings"/>
    <import path="sync"/>
    <import path="time"/>
    <import path="runtime/pprof"/>
    <import path="text/template"/>
    <import path="github.com/prometheus/client_golang/model"/>
    <import path="github.com/prometheus/client_golang/prometheus"/>
    <import path="github.com/prometheus/log"/>
    <import path="github.com/prometheus/prometheus/config"/>
    <import path="github.com/prometheus/prometheus/promql"/>
    <import path="github.com/prometheus/prometheus/retrieval"/>
    <import path="github.com/prometheus/prometheus/rules"/>
    <import path="github.com/prometheus/prometheus/storage/local"/>
    <import path="github.com/prometheus/prometheus/template"/>
    <import path="github.com/prometheus/prometheus/util/route"/>
    <import path="github.com/prometheus/prometheus/version"/>
    <import path="github.com/prometheus/prometheus/web/api/legacy"/>
    <import path="github.com/prometheus/prometheus/web/api/v1"/>
    <import path="github.com/prometheus/prometheus/web/blob"/>
    <import path="bitbucket.org/ww/goautoneg"/>
    <import path="github.com/golang/protobuf/proto"/>
    <import path="github.com/prometheus/client_golang/text"/>
    <import path="github.com/prometheus/client_model/go"/>
    <import path="bytes"/>
    <import path="compress/gzip"/>
    <import path="errors"/>
    <import path="strconv"/>
    <import path="golang.org/x/net/context"/>
    <import path="github.com/prometheus/prometheus/util/strutil"/>
    <import path="github.com/prometheus/prometheus/util/httputil"/>
    <import path="regexp"/>
    <import path="github.com/julienschmidt/httprouter"/>
    <import path="compress/zlib"/>
    <import path="syscall"/>
    <import path="math"/>
    <import path="html/template"/>
    <import path="github.com/prometheus/prometheus/storage/remote/influxdb"/>
    <import path="github.com/prometheus/prometheus/storage/remote/opentsdb"/>
    <import path="github.com/prometheus/prometheus/util/testutil"/>
    <import path="container/list"/>
    <import path="sync/atomic"/>
    <import path="github.com/prometheus/prometheus/storage/metric"/>
    <import path="bufio"/>
    <import path="encoding/binary"/>
    <import path="path"/>
    <import path="github.com/prometheus/prometheus/storage/local/codable"/>
    <import path="github.com/prometheus/prometheus/storage/local/index"/>
    <import path="github.com/prometheus/prometheus/util/flock"/>
    <import path="encoding"/>
    <import path="github.com/syndtr/goleveldb/leveldb"/>
    <import path="github.com/syndtr/goleveldb/leveldb/filter"/>
    <import path="github.com/syndtr/goleveldb/leveldb/iterator"/>
    <import path="github.com/syndtr/goleveldb/leveldb/opt"/>
    <import path="github.com/syndtr/goleveldb/leveldb/util"/>
    <import path="github.com/prometheus/prometheus/notification"/>
    <import path="github.com/prometheus/prometheus/storage"/>
    <import path="github.com/prometheus/prometheus/retrieval/discovery"/>
    <import path="math/rand"/>
    <import path="github.com/prometheus/client_golang/extraction"/>
    <import path="hash/fnv"/>
    <import path="github.com/samuel/go-zookeeper/zk"/>
    <import path="gopkg.in/fsnotify.v1"/>
    <import path="gopkg.in/yaml.v2"/>
    <import path="github.com/miekg/dns"/>
    <import path="github.com/hashicorp/consul/api"/>
    <import path="runtime"/>
    <import path="unicode"/>
    <import path="unicode/utf8"/>
    <import path="container/heap"/>
    <import path="github.com/prometheus/prometheus/util/stats"/>
    <import path="github.com/prometheus/prometheus/util/cli"/>
    <import path="flag"/>
    <import path="net/http/pprof"/>
    <import path="os/signal"/>
    <import path="github.com/prometheus/prometheus/storage/remote"/>
    <import path="github.com/prometheus/prometheus/web"/>
    <import path="reflect"/>
    <import path="encoding/base64"/>
    <import path="unsafe"/>
    <import path="hash/crc32"/>
    <import path="github.com/syndtr/goleveldb/leveldb/storage"/>
    <import path="github.com/syndtr/goleveldb/leveldb/cache"/>
    <import path="github.com/syndtr/goleveldb/leveldb/table"/>
    <import path="github.com/syndtr/goleveldb/leveldb/journal"/>
    <import path="github.com/syndtr/goleveldb/leveldb/errors"/>
    <import path="github.com/syndtr/goleveldb/leveldb/memdb"/>
    <import path="github.com/syndtr/goleveldb/leveldb/comparer"/>
    <import path="github.com/onsi/ginkgo/config"/>
    <import path="github.com/onsi/gomega"/>
    <import path="github.com/onsi/ginkgo"/>
    <import path="github.com/syndtr/gosnappy/snappy"/>
    <import path="crypto/sha1"/>
    <import path="log"/>
    <import path="os/exec"/>
    <import path="math/big"/>
    <import path="crypto/rand"/>
    <import path="encoding/hex"/>
    <import path="github.com/Sirupsen/logrus"/>
    <import path="github.com/matttproud/golang_protobuf_extensions/pbutil"/>
    <import path="hash"/>
    <import path="github.com/beorn7/perks/quantile"/>
    <import path="github.com/prometheus/procfs"/>
    <import path="runtime/debug"/>
    <import path="expvar"/>
    <import path="mime"/>
    <import path="crypto/hmac"/>
    <import path="crypto/md5"/>
    <import path="crypto/sha256"/>
    <import path="crypto/sha512"/>
    <import path="crypto/x509"/>
    <import path="crypto"/>
    <import path="crypto/dsa"/>
    <import path="crypto/ecdsa"/>
    <import path="crypto/rsa"/>
    <import path="text/scanner"/>
    <import path="encoding/base32"/>
    <import path="crypto/elliptic"/>
    <import path="crypto/tls"/>
    <import path="github.com/golang/protobuf/proto/testdata"/>
    <import path="log/syslog"/>
    <import path="github.com/getsentry/raven-go"/>
    <import path="github.com/bugsnag/bugsnag-go"/>
    <import path="github.com/tobi/airbrake-go"/>
    <import path="github.com/Sirupsen/logrus/hooks/airbrake"/>
  </imports>
</project>
