<?xml version='1.0' encoding='ASCII'?>
<project ipprefix="" commit="commit" nvr="golang-github-hashicorp-go-msgpack-0-0.1.git71c2886.fc24">
  <packages>
    <package importpath="github.com/hashicorp/go-msgpack/codec">
      <types>
        <type type="struct" name="SimpleHandle">
          <field type="ident" def="BasicHandle" name=""/>
        </type>
        <type name="Rpc" type="interface">
          <method name="ServerCodec">
            <paramsList>
              <type type="selector">
                <prefix value="io"/>
                <item value="ReadWriteCloser"/>
              </type>
              <type type="ident" def="Handle"/>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="rpc"/>
                <item value="ServerCodec"/>
              </type>
            </resultsList>
          </method>
          <method name="ClientCodec">
            <paramsList>
              <type type="selector">
                <prefix value="io"/>
                <item value="ReadWriteCloser"/>
              </type>
              <type type="ident" def="Handle"/>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="rpc"/>
                <item value="ClientCodec"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="RpcCodecBuffered" type="interface">
          <method name="BufferedReader">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="bufio"/>
                  <item value="Reader"/>
                </type>
              </type>
            </resultsList>
          </method>
          <method name="BufferedWriter">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="bufio"/>
                  <item value="Writer"/>
                </type>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="MsgpackSpecRpcMultiArgs" type="slice">
          <elmtype type="interface"/>
        </type>
        <type type="struct" name="MsgpackHandle">
          <field type="ident" def="BasicHandle" name=""/>
          <field type="ident" def="bool" name="RawToString"/>
          <field type="ident" def="bool" name="WriteExt"/>
        </type>
        <type name="MapBySlice" type="interface">
          <method name="MapBySlice">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="BasicHandle">
          <field type="ident" def="extHandle" name=""/>
          <field type="ident" def="EncodeOptions" name=""/>
          <field type="ident" def="DecodeOptions" name=""/>
        </type>
        <type name="Handle" type="interface">
          <method name="writeExt">
            <paramsList/>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="getBasicHandle">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="BasicHandle"/>
              </type>
            </resultsList>
          </method>
          <method name="newEncDriver">
            <paramsList>
              <type type="ident" def="encWriter"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="encDriver"/>
            </resultsList>
          </method>
          <method name="newDecDriver">
            <paramsList>
              <type type="ident" def="decReader"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="decDriver"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="RawExt">
          <field type="ident" def="byte" name="Tag"/>
          <field type="slice" name="Data">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type name="AsSymbolFlag" type="ident">
          <type type="ident" def="uint8"/>
        </type>
        <type type="struct" name="EncodeOptions">
          <field type="ident" def="bool" name="StructToArray"/>
          <field type="ident" def="AsSymbolFlag" name="AsSymbols"/>
        </type>
        <type type="struct" name="Encoder">
          <field type="ident" def="encWriter" name="w"/>
          <field type="ident" def="encDriver" name="e"/>
          <field type="pointer" name="h">
            <type type="ident" def="BasicHandle"/>
          </field>
          <field type="ident" def="Handle" name="hh"/>
          <field type="map" name="f">
            <keytype type="ident" def="uintptr"/>
            <valtype type="ident" def="encFn"/>
          </field>
          <field type="slice" name="x">
            <elmtype type="ident" def="uintptr"/>
          </field>
          <field type="slice" name="s">
            <elmtype type="ident" def="encFn"/>
          </field>
        </type>
        <type type="struct" name="DecodeOptions">
          <field type="selector" name="MapType">
            <prefix value="reflect"/>
            <item value="Type"/>
          </field>
          <field type="selector" name="SliceType">
            <prefix value="reflect"/>
            <item value="Type"/>
          </field>
          <field type="ident" def="bool" name="ErrorIfNoField"/>
        </type>
        <type type="struct" name="Decoder">
          <field type="ident" def="decReader" name="r"/>
          <field type="ident" def="decDriver" name="d"/>
          <field type="pointer" name="h">
            <type type="ident" def="BasicHandle"/>
          </field>
          <field type="map" name="f">
            <keytype type="ident" def="uintptr"/>
            <valtype type="ident" def="decFn"/>
          </field>
          <field type="slice" name="x">
            <elmtype type="ident" def="uintptr"/>
          </field>
          <field type="slice" name="s">
            <elmtype type="ident" def="decFn"/>
          </field>
        </type>
        <type type="struct" name="BincHandle">
          <field type="ident" def="BasicHandle" name=""/>
        </type>
      </types>
      <functions>
        <function name="BufferedReader">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rpcCodec"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="bufio"/>
                <item value="Reader"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="BufferedWriter">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rpcCodec"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="bufio"/>
                <item value="Writer"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rpcCodec"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadResponseBody">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rpcCodec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteRequest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="goRpcCodec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rpc"/>
                <item value="Request"/>
              </type>
            </type>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteResponse">
          <recvList>
            <type type="pointer">
              <type type="ident" def="goRpcCodec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rpc"/>
                <item value="Response"/>
              </type>
            </type>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadResponseHeader">
          <recvList>
            <type type="pointer">
              <type type="ident" def="goRpcCodec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rpc"/>
                <item value="Response"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadRequestHeader">
          <recvList>
            <type type="pointer">
              <type type="ident" def="goRpcCodec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rpc"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadRequestBody">
          <recvList>
            <type type="pointer">
              <type type="ident" def="goRpcCodec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ServerCodec">
          <recvList>
            <type type="ident" def="goRpc"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="ReadWriteCloser"/>
            </type>
            <type type="ident" def="Handle"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="rpc"/>
              <item value="ServerCodec"/>
            </type>
          </resultsList>
        </function>
        <function name="ClientCodec">
          <recvList>
            <type type="ident" def="goRpc"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="ReadWriteCloser"/>
            </type>
            <type type="ident" def="Handle"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="rpc"/>
              <item value="ClientCodec"/>
            </type>
          </resultsList>
        </function>
        <function name="WriteRequest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="msgpackSpecRpcCodec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rpc"/>
                <item value="Request"/>
              </type>
            </type>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteResponse">
          <recvList>
            <type type="pointer">
              <type type="ident" def="msgpackSpecRpcCodec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rpc"/>
                <item value="Response"/>
              </type>
            </type>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadResponseHeader">
          <recvList>
            <type type="pointer">
              <type type="ident" def="msgpackSpecRpcCodec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rpc"/>
                <item value="Response"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadRequestHeader">
          <recvList>
            <type type="pointer">
              <type type="ident" def="msgpackSpecRpcCodec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rpc"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadRequestBody">
          <recvList>
            <type type="pointer">
              <type type="ident" def="msgpackSpecRpcCodec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ServerCodec">
          <recvList>
            <type type="ident" def="msgpackSpecRpc"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="ReadWriteCloser"/>
            </type>
            <type type="ident" def="Handle"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="rpc"/>
              <item value="ServerCodec"/>
            </type>
          </resultsList>
        </function>
        <function name="ClientCodec">
          <recvList>
            <type type="ident" def="msgpackSpecRpc"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="ReadWriteCloser"/>
            </type>
            <type type="ident" def="Handle"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="rpc"/>
              <item value="ClientCodec"/>
            </type>
          </resultsList>
        </function>
        <function name="AddExt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="extHandle"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="reflect"/>
              <item value="Type"/>
            </type>
            <type type="ident" def="byte"/>
            <type type="func">
              <paramsList>
                <type type="selector">
                  <prefix value="reflect"/>
                  <item value="Value"/>
                </type>
              </paramsList>
              <resultsList>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
            <type type="func">
              <paramsList>
                <type type="selector">
                  <prefix value="reflect"/>
                  <item value="Value"/>
                </type>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="sfiSortedByEncName"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="sfiSortedByEncName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="sfiSortedByEncName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="WriteByte">
          <recvList>
            <type type="pointer">
              <type type="ident" def="simpleIoEncWriterWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="byte"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="simpleIoEncWriterWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="simpleIoEncWriterWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewEncoder">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="Handle"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Encoder"/>
            </type>
          </resultsList>
        </function>
        <function name="NewEncoderBytes">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="ident" def="Handle"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Encoder"/>
            </type>
          </resultsList>
        </function>
        <function name="Encode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Encoder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewDecoder">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="Handle"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Decoder"/>
            </type>
          </resultsList>
        </function>
        <function name="NewDecoderBytes">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="Handle"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Decoder"/>
            </type>
          </resultsList>
        </function>
        <function name="Decode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Decoder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="GoRpc"/>
        <name value="MsgpackSpecRpc"/>
        <name value="AsSymbolDefault"/>
        <name value="AsSymbolAll"/>
        <name value="AsSymbolNone"/>
        <name value="AsSymbolMapStringKeysFlag"/>
        <name value="AsSymbolStructFieldNameFlag"/>
      </names>
    </package>
  </packages>
  <imports>
    <import path="time"/>
    <import path="math"/>
    <import path="bufio"/>
    <import path="io"/>
    <import path="net/rpc"/>
    <import path="sync"/>
    <import path="fmt"/>
    <import path="errors"/>
    <import path="reflect"/>
    <import path="encoding/binary"/>
    <import path="sort"/>
    <import path="strings"/>
    <import path="unicode"/>
    <import path="unicode/utf8"/>
  </imports>
</project>
