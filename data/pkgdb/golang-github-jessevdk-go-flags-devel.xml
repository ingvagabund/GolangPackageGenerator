<?xml version='1.0' encoding='ASCII'?>
<project ipprefix="" commit="commit" nvr="golang-github-jessevdk-go-flags-0-0.2.git5e11878.fc24">
  <packages>
    <package importpath="github.com/jessevdk/go-flags">
      <types>
        <type type="struct" name="Parser">
          <field type="pointer" name="">
            <type type="ident" def="Command"/>
          </field>
          <field type="ident" def="string" name="Usage"/>
          <field type="ident" def="Options" name="Options"/>
          <field type="ident" def="string" name="NamespaceDelimiter"/>
          <field type="func" name="UnknownOptionHandler">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ident" def="SplitArgument"/>
              <type type="slice">
                <elmtype type="ident" def="string"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="string"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </field>
          <field type="ident" def="error" name="internalError"/>
        </type>
        <type name="SplitArgument" type="interface">
          <method name="Value">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
        </type>
        <type name="Options" type="ident">
          <type type="ident" def="uint"/>
        </type>
        <type type="struct" name="Option">
          <field type="ident" def="string" name="Description"/>
          <field type="ident" def="rune" name="ShortName"/>
          <field type="ident" def="string" name="LongName"/>
          <field type="slice" name="Default">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="string" name="EnvDefaultKey"/>
          <field type="ident" def="string" name="EnvDefaultDelim"/>
          <field type="ident" def="bool" name="OptionalArgument"/>
          <field type="slice" name="OptionalValue">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="bool" name="Required"/>
          <field type="ident" def="string" name="ValueName"/>
          <field type="ident" def="string" name="DefaultMask"/>
          <field type="pointer" name="group">
            <type type="ident" def="Group"/>
          </field>
          <field type="selector" name="field">
            <prefix value="reflect"/>
            <item value="StructField"/>
          </field>
          <field type="selector" name="value">
            <prefix value="reflect"/>
            <item value="Value"/>
          </field>
          <field type="ident" def="bool" name="iniQuote"/>
          <field type="ident" def="multiTag" name="tag"/>
          <field type="ident" def="bool" name="isSet"/>
        </type>
        <type type="struct" name="IniError">
          <field type="ident" def="string" name="Message"/>
          <field type="ident" def="string" name="File"/>
          <field type="ident" def="uint" name="LineNumber"/>
        </type>
        <type name="IniOptions" type="ident">
          <type type="ident" def="uint"/>
        </type>
        <type type="struct" name="IniParser">
          <field type="pointer" name="parser">
            <type type="ident" def="Parser"/>
          </field>
        </type>
        <type type="struct" name="Group">
          <field type="ident" def="string" name="ShortDescription"/>
          <field type="ident" def="string" name="LongDescription"/>
          <field type="ident" def="string" name="Namespace"/>
          <field type="interface" name="parent"/>
          <field type="slice" name="options">
            <elmtype type="pointer">
              <type type="ident" def="Option"/>
            </elmtype>
          </field>
          <field type="slice" name="groups">
            <elmtype type="pointer">
              <type type="ident" def="Group"/>
            </elmtype>
          </field>
          <field type="ident" def="bool" name="isBuiltinHelp"/>
          <field type="interface" name="data"/>
        </type>
        <type name="ErrorType" type="ident">
          <type type="ident" def="uint"/>
        </type>
        <type type="struct" name="Error">
          <field type="ident" def="ErrorType" name="Type"/>
          <field type="ident" def="string" name="Message"/>
        </type>
        <type name="Marshaler" type="interface">
          <method name="MarshalFlag">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Unmarshaler" type="interface">
          <method name="UnmarshalFlag">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Completion">
          <field type="ident" def="string" name="Item"/>
          <field type="ident" def="string" name="Description"/>
        </type>
        <type name="Completer" type="interface">
          <method name="Complete">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="Completion"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="Filename" type="ident">
          <type type="ident" def="string"/>
        </type>
        <type type="struct" name="Command">
          <field type="pointer" name="">
            <type type="ident" def="Group"/>
          </field>
          <field type="ident" def="string" name="Name"/>
          <field type="pointer" name="Active">
            <type type="ident" def="Command"/>
          </field>
          <field type="ident" def="bool" name="SubcommandsOptional"/>
          <field type="slice" name="Aliases">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="bool" name="ArgsRequired"/>
          <field type="slice" name="commands">
            <elmtype type="pointer">
              <type type="ident" def="Command"/>
            </elmtype>
          </field>
          <field type="ident" def="bool" name="hasBuiltinHelpGroup"/>
          <field type="slice" name="args">
            <elmtype type="pointer">
              <type type="ident" def="Arg"/>
            </elmtype>
          </field>
        </type>
        <type name="Commander" type="interface">
          <method name="Execute">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="string"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Usage" type="interface">
          <method name="Usage">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Arg">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Description"/>
          <field type="selector" name="value">
            <prefix value="reflect"/>
            <item value="Value"/>
          </field>
          <field type="ident" def="multiTag" name="tag"/>
        </type>
      </types>
      <functions>
        <function name="Value">
          <recvList>
            <type type="ident" def="strArgument"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Parse">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ParseArgs">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewParser">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ident" def="Options"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </resultsList>
        </function>
        <function name="NewNamedParser">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="Options"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </resultsList>
        </function>
        <function name="Parse">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ParseArgs">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="LongNameWithNamespace">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Option"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Option"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Option"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="Parse">
          <recvList>
            <type type="pointer">
              <type type="ident" def="multiTag"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="multiTag"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetMany">
          <recvList>
            <type type="pointer">
              <type type="ident" def="multiTag"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="Set">
          <recvList>
            <type type="pointer">
              <type type="ident" def="multiTag"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetMany">
          <recvList>
            <type type="pointer">
              <type type="ident" def="multiTag"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="WriteManPage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IniError"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewIniParser">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="IniParser"/>
            </type>
          </resultsList>
        </function>
        <function name="IniParse">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ParseFile">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IniParser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Parse">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IniParser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteFile">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IniParser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="IniOptions"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IniParser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="IniOptions"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="WriteHelp">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AddGroup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Group"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Group"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Groups">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Group"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Group"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Options">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Group"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Option"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Find">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Group"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Group"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="ErrorType"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Error"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="completions"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="completions"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="completions"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Complete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Filename"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Completion"/>
            </type>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="commandList"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="commandList"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="commandList"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AddCommand">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Command"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Command"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="AddGroup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Command"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Group"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Commands">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Command"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Command"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Find">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Command"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Command"/>
            </type>
          </resultsList>
        </function>
        <function name="Args">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Command"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Arg"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="None"/>
        <name value="HelpFlag"/>
        <name value="PassDoubleDash"/>
        <name value="IgnoreUnknown"/>
        <name value="PrintErrors"/>
        <name value="PassAfterNonOption"/>
        <name value="Default"/>
        <name value="IniNone"/>
        <name value="IniIncludeDefaults"/>
        <name value="IniCommentDefaults"/>
        <name value="IniIncludeComments"/>
        <name value="IniDefault"/>
        <name value="ErrNotPointerToStruct"/>
        <name value="ErrUnknown"/>
        <name value="ErrExpectedArgument"/>
        <name value="ErrUnknownFlag"/>
        <name value="ErrUnknownGroup"/>
        <name value="ErrMarshal"/>
        <name value="ErrHelp"/>
        <name value="ErrNoArgumentForBool"/>
        <name value="ErrRequired"/>
        <name value="ErrShortNameTooLong"/>
        <name value="ErrDuplicatedFlag"/>
        <name value="ErrTag"/>
        <name value="ErrCommandRequired"/>
        <name value="ErrUnknownCommand"/>
      </names>
    </package>
  </packages>
  <imports>
    <import path="syscall"/>
    <import path="unsafe"/>
    <import path="bytes"/>
    <import path="fmt"/>
    <import path="os"/>
    <import path="sort"/>
    <import path="strings"/>
    <import path="unicode/utf8"/>
    <import path="path"/>
    <import path="reflect"/>
    <import path="strconv"/>
    <import path="io"/>
    <import path="time"/>
    <import path="bufio"/>
    <import path="runtime"/>
    <import path="errors"/>
    <import path="path/filepath"/>
    <import path="github.com/jessevdk/go-flags"/>
  </imports>
</project>
