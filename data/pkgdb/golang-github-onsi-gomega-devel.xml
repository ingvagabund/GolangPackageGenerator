<?xml version='1.0' encoding='ASCII'?>
<project ipprefix="" commit="commit" nvr="golang-github-onsi-gomega-0-0.5.git8adf9e1.fc24">
  <packages>
    <package importpath="github.com/onsi/gomega/internal/testingtsupport">
      <types/>
      <functions>
        <function name="BuildTestingTGomegaFailHandler">
          <recvList/>
          <paramsList>
            <type type="ident" def="gomegaTestingT"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaFailHandler"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/gomega">
      <types>
        <type name="GomegaAsyncAssertion" type="interface">
          <method name="Should">
            <paramsList>
              <type type="selector">
                <prefix value="types"/>
                <item value="GomegaMatcher"/>
              </type>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="ShouldNot">
            <paramsList>
              <type type="selector">
                <prefix value="types"/>
                <item value="GomegaMatcher"/>
              </type>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
        </type>
        <type name="GomegaAssertion" type="interface">
          <method name="Should">
            <paramsList>
              <type type="selector">
                <prefix value="types"/>
                <item value="GomegaMatcher"/>
              </type>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="ShouldNot">
            <paramsList>
              <type type="selector">
                <prefix value="types"/>
                <item value="GomegaMatcher"/>
              </type>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="To">
            <paramsList>
              <type type="selector">
                <prefix value="types"/>
                <item value="GomegaMatcher"/>
              </type>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="ToNot">
            <paramsList>
              <type type="selector">
                <prefix value="types"/>
                <item value="GomegaMatcher"/>
              </type>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="NotTo">
            <paramsList>
              <type type="selector">
                <prefix value="types"/>
                <item value="GomegaMatcher"/>
              </type>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
        </type>
        <type name="OmegaMatcher" type="selector">
          <prefix value="types"/>
          <item value="GomegaMatcher"/>
        </type>
      </types>
      <functions>
        <function name="Equal">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="BeEquivalentTo">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="BeNil">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="BeTrue">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="BeFalse">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="HaveOccurred">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="Succeed">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="MatchError">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="BeClosed">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="Receive">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="BeSent">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="MatchRegexp">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="ContainSubstring">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="HavePrefix">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="HaveSuffix">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="MatchJSON">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="BeEmpty">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="HaveLen">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="BeZero">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="ContainElement">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="ConsistOf">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="HaveKey">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="HaveKeyWithValue">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="BeNumerically">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="BeTemporally">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
            <type type="ellipsis">
              <type type="selector">
                <prefix value="time"/>
                <item value="Duration"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="BeAssignableToTypeOf">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="Panic">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="RegisterFailHandler">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaFailHandler"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RegisterTestingT">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaTestingT"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="InterceptGomegaFailures">
          <recvList/>
          <paramsList>
            <type type="func">
              <paramsList/>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="&#937;">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="GomegaAssertion"/>
          </resultsList>
        </function>
        <function name="Expect">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="GomegaAssertion"/>
          </resultsList>
        </function>
        <function name="ExpectWithOffset">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="GomegaAssertion"/>
          </resultsList>
        </function>
        <function name="Eventually">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="GomegaAsyncAssertion"/>
          </resultsList>
        </function>
        <function name="EventuallyWithOffset">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="GomegaAsyncAssertion"/>
          </resultsList>
        </function>
        <function name="Consistently">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="GomegaAsyncAssertion"/>
          </resultsList>
        </function>
        <function name="ConsistentlyWithOffset">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="GomegaAsyncAssertion"/>
          </resultsList>
        </function>
        <function name="SetDefaultEventuallyTimeout">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetDefaultEventuallyPollingInterval">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetDefaultConsistentlyDuration">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetDefaultConsistentlyPollingInterval">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="GOMEGA_VERSION"/>
      </names>
    </package>
    <package importpath="github.com/onsi/gomega/internal/fakematcher">
      <types>
        <type type="struct" name="FakeMatcher">
          <field type="interface" name="ReceivedActual"/>
          <field type="ident" def="bool" name="MatchesToReturn"/>
          <field type="ident" def="error" name="ErrToReturn"/>
        </type>
      </types>
      <functions>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/gomega/matchers/support/goraph/util">
      <types/>
      <functions>
        <function name="Odd">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/gomega/gbytes">
      <types>
        <type name="BufferProvider" type="interface">
          <method name="Buffer">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="Buffer"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Buffer">
          <field type="slice" name="contents">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="uint64" name="readCursor"/>
          <field type="pointer" name="lock">
            <type type="selector">
              <prefix value="sync"/>
              <item value="Mutex"/>
            </type>
          </field>
          <field type="channel" dir="3" name="detectCloser">
            <type type="interface"/>
          </field>
          <field type="ident" def="bool" name="closed"/>
        </type>
      </types>
      <functions>
        <function name="Say">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="sayMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="sayMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="sayMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="sayMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MatchMayChangeInTheFuture">
          <recvList>
            <type type="pointer">
              <type type="ident" def="sayMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewBuffer">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </resultsList>
        </function>
        <function name="BufferWithBytes">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Closed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Contents">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Detect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="channel" dir="3">
              <type type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="CancelDetects">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/gomega/matchers/support/goraph/bipartitegraph">
      <types>
        <type type="struct" name="BipartiteGraph">
          <field type="ident" def="NodeOrderedSet" name="Left"/>
          <field type="ident" def="NodeOrderedSet" name="Right"/>
          <field type="ident" def="EdgeSet" name="Edges"/>
        </type>
      </types>
      <functions>
        <function name="LargestMatching">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BipartiteGraph"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="EdgeSet"/>
          </resultsList>
        </function>
        <function name="NewBipartiteGraph">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="func">
              <paramsList>
                <type type="interface"/>
                <type type="interface"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="bool"/>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="BipartiteGraph"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/gomega/format">
      <types/>
      <functions>
        <function name="Message">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Object">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ident" def="uint"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="IndentString">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="uint"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="MaxDepth"/>
        <name value="UseStringerRepresentation"/>
        <name value="Indent"/>
      </names>
    </package>
    <package importpath="github.com/onsi/gomega/internal/assertion">
      <types>
        <type type="struct" name="Assertion">
          <field type="interface" name="actualInput"/>
          <field type="selector" name="fail">
            <prefix value="types"/>
            <item value="GomegaFailHandler"/>
          </field>
          <field type="ident" def="int" name="offset"/>
          <field type="slice" name="extra">
            <elmtype type="interface"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaFailHandler"/>
            </type>
            <type type="ident" def="int"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Assertion"/>
            </type>
          </resultsList>
        </function>
        <function name="Should">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Assertion"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="ShouldNot">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Assertion"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="To">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Assertion"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="ToNot">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Assertion"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NotTo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Assertion"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/gomega/ghttp">
      <types>
        <type type="struct" name="Server">
          <field type="pointer" name="HTTPTestServer">
            <type type="selector">
              <prefix value="httptest"/>
              <item value="Server"/>
            </type>
          </field>
          <field type="ident" def="bool" name="AllowUnhandledRequests"/>
          <field type="ident" def="int" name="UnhandledRequestStatusCode"/>
          <field type="slice" name="receivedRequests">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </elmtype>
          </field>
          <field type="slice" name="requestHandlers">
            <elmtype type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </elmtype>
          </field>
          <field type="slice" name="routedHandlers">
            <elmtype type="ident" def="routedHandler"/>
          </field>
          <field type="pointer" name="writeLock">
            <type type="selector">
              <prefix value="sync"/>
              <item value="Mutex"/>
            </type>
          </field>
          <field type="ident" def="int" name="calls"/>
        </type>
      </types>
      <functions>
        <function name="NewServer">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </resultsList>
        </function>
        <function name="NewUnstartedServer">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </resultsList>
        </function>
        <function name="NewTLSServer">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </resultsList>
        </function>
        <function name="Start">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="URL">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Addr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ServeHTTP">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ReceivedRequests">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="http"/>
                  <item value="Request"/>
                </type>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="RouteToHandler">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AppendHandlers">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="selector">
                <prefix value="http"/>
                <item value="HandlerFunc"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetHandler">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetHandler">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="WrapHandler">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="CloseClientConnections">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="CombineHandlers">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="selector">
                <prefix value="http"/>
                <item value="HandlerFunc"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="VerifyRequest">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="VerifyContentType">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="VerifyBasicAuth">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="VerifyHeader">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="Header"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="VerifyHeaderKV">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="VerifyJSON">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="VerifyJSONRepresenting">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="RespondWith">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="selector">
                <prefix value="http"/>
                <item value="Header"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="RespondWithPtr">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="int"/>
            </type>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="selector">
                <prefix value="http"/>
                <item value="Header"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="RespondWithJSONEncoded">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="selector">
                <prefix value="http"/>
                <item value="Header"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="RespondWithJSONEncodedPtr">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="int"/>
            </type>
            <type type="pointer">
              <type type="interface"/>
            </type>
            <type type="ellipsis">
              <type type="selector">
                <prefix value="http"/>
                <item value="Header"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/gomega/matchers/support/goraph/node">
      <types>
        <type type="struct" name="Node">
          <field type="ident" def="int" name="Id"/>
        </type>
        <type name="NodeOrderedSet" type="slice">
          <elmtype type="ident" def="Node"/>
        </type>
      </types>
      <functions/>
      <names/>
    </package>
    <package importpath="github.com/onsi/gomega/matchers/support/goraph/edge">
      <types>
        <type type="struct" name="Edge">
          <field type="ident" def="Node" name="Node1"/>
          <field type="ident" def="Node" name="Node2"/>
        </type>
        <type name="EdgeSet" type="slice">
          <elmtype type="ident" def="Edge"/>
        </type>
      </types>
      <functions>
        <function name="Free">
          <recvList>
            <type type="ident" def="EdgeSet"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Node"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Contains">
          <recvList>
            <type type="ident" def="EdgeSet"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Edge"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="FindByNodes">
          <recvList>
            <type type="ident" def="EdgeSet"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Node"/>
            <type type="ident" def="Node"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Edge"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="SymmetricDifference">
          <recvList>
            <type type="ident" def="EdgeSet"/>
          </recvList>
          <paramsList>
            <type type="ident" def="EdgeSet"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="EdgeSet"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/gomega/internal/asyncassertion">
      <types>
        <type name="AsyncAssertionType" type="ident">
          <type type="ident" def="uint"/>
        </type>
        <type type="struct" name="AsyncAssertion">
          <field type="ident" def="AsyncAssertionType" name="asyncType"/>
          <field type="interface" name="actualInput"/>
          <field type="selector" name="timeoutInterval">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="pollingInterval">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="fail">
            <prefix value="types"/>
            <item value="GomegaFailHandler"/>
          </field>
          <field type="ident" def="int" name="offset"/>
        </type>
      </types>
      <functions>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="ident" def="AsyncAssertionType"/>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaFailHandler"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="AsyncAssertion"/>
            </type>
          </resultsList>
        </function>
        <function name="Should">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AsyncAssertion"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="ShouldNot">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AsyncAssertion"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="GomegaMatcher"/>
            </type>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="AsyncAssertionTypeEventually"/>
        <name value="AsyncAssertionTypeConsistently"/>
      </names>
    </package>
    <package importpath="github.com/onsi/gomega/gexec">
      <types>
        <type type="struct" name="Session">
          <field type="pointer" name="Command">
            <type type="selector">
              <prefix value="exec"/>
              <item value="Cmd"/>
            </type>
          </field>
          <field type="pointer" name="Out">
            <type type="selector">
              <prefix value="gbytes"/>
              <item value="Buffer"/>
            </type>
          </field>
          <field type="pointer" name="Err">
            <type type="selector">
              <prefix value="gbytes"/>
              <item value="Buffer"/>
            </type>
          </field>
          <field type="channel" dir="2" name="Exited">
            <type type="struct" name=""/>
          </field>
          <field type="pointer" name="lock">
            <type type="selector">
              <prefix value="sync"/>
              <item value="Mutex"/>
            </type>
          </field>
          <field type="ident" def="int" name="exitCode"/>
        </type>
        <type type="struct" name="PrefixedWriter">
          <field type="slice" name="prefix">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="selector" name="writer">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="pointer" name="lock">
            <type type="selector">
              <prefix value="sync"/>
              <item value="Mutex"/>
            </type>
          </field>
          <field type="ident" def="bool" name="atStartOfLine"/>
        </type>
        <type name="Exiter" type="interface">
          <method name="ExitCode">
            <paramsList/>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="Start">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="exec"/>
                <item value="Cmd"/>
              </type>
            </type>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Buffer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gbytes"/>
                <item value="Buffer"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="ExitCode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Wait">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </resultsList>
        </function>
        <function name="Kill">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </resultsList>
        </function>
        <function name="Interrupt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </resultsList>
        </function>
        <function name="Terminate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </resultsList>
        </function>
        <function name="Signal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="os"/>
              <item value="Signal"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </resultsList>
        </function>
        <function name="NewPrefixedWriter">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PrefixedWriter"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PrefixedWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Exit">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="int"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="exitMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="exitMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="exitMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="exitMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MatchMayChangeInTheFuture">
          <recvList>
            <type type="pointer">
              <type type="ident" def="exitMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Build">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="BuildIn">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CleanupBuildArtifacts">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="INVALID_EXIT_CODE"/>
      </names>
    </package>
    <package importpath="github.com/onsi/gomega/matchers">
      <types>
        <type type="struct" name="SucceedMatcher"/>
        <type type="struct" name="ReceiveMatcher">
          <field type="interface" name="Arg"/>
          <field type="selector" name="receivedValue">
            <prefix value="reflect"/>
            <item value="Value"/>
          </field>
          <field type="ident" def="bool" name="channelClosed"/>
        </type>
        <type type="struct" name="PanicMatcher"/>
        <type type="struct" name="MatchRegexpMatcher">
          <field type="ident" def="string" name="Regexp"/>
          <field type="slice" name="Args">
            <elmtype type="interface"/>
          </field>
        </type>
        <type type="struct" name="MatchJSONMatcher">
          <field type="interface" name="JSONToMatch"/>
        </type>
        <type type="struct" name="MatchErrorMatcher">
          <field type="interface" name="Expected"/>
        </type>
        <type type="struct" name="HaveSuffixMatcher">
          <field type="ident" def="string" name="Suffix"/>
          <field type="slice" name="Args">
            <elmtype type="interface"/>
          </field>
        </type>
        <type type="struct" name="HavePrefixMatcher">
          <field type="ident" def="string" name="Prefix"/>
          <field type="slice" name="Args">
            <elmtype type="interface"/>
          </field>
        </type>
        <type type="struct" name="HaveOccurredMatcher"/>
        <type type="struct" name="HaveLenMatcher">
          <field type="ident" def="int" name="Count"/>
        </type>
        <type type="struct" name="HaveKeyWithValueMatcher">
          <field type="interface" name="Key"/>
          <field type="interface" name="Value"/>
        </type>
        <type type="struct" name="HaveKeyMatcher">
          <field type="interface" name="Key"/>
        </type>
        <type type="struct" name="EqualMatcher">
          <field type="interface" name="Expected"/>
        </type>
        <type type="struct" name="ContainSubstringMatcher">
          <field type="ident" def="string" name="Substr"/>
          <field type="slice" name="Args">
            <elmtype type="interface"/>
          </field>
        </type>
        <type type="struct" name="ContainElementMatcher">
          <field type="interface" name="Element"/>
        </type>
        <type type="struct" name="ConsistOfMatcher">
          <field type="slice" name="Elements">
            <elmtype type="interface"/>
          </field>
        </type>
        <type type="struct" name="BeZeroMatcher"/>
        <type type="struct" name="BeTrueMatcher"/>
        <type type="struct" name="BeTemporallyMatcher">
          <field type="ident" def="string" name="Comparator"/>
          <field type="selector" name="CompareTo">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="slice" name="Threshold">
            <elmtype type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="BeSentMatcher">
          <field type="interface" name="Arg"/>
          <field type="ident" def="bool" name="channelClosed"/>
        </type>
        <type type="struct" name="BeNumericallyMatcher">
          <field type="ident" def="string" name="Comparator"/>
          <field type="slice" name="CompareTo">
            <elmtype type="interface"/>
          </field>
        </type>
        <type type="struct" name="BeNilMatcher"/>
        <type type="struct" name="BeFalseMatcher"/>
        <type type="struct" name="BeEquivalentToMatcher">
          <field type="interface" name="Expected"/>
        </type>
        <type type="struct" name="BeEmptyMatcher"/>
        <type type="struct" name="BeClosedMatcher"/>
        <type type="struct" name="AssignableToTypeOfMatcher">
          <field type="interface" name="Expected"/>
        </type>
      </types>
      <functions>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SucceedMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SucceedMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SucceedMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ReceiveMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ReceiveMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ReceiveMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MatchMayChangeInTheFuture">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ReceiveMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PanicMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PanicMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PanicMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MatchRegexpMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MatchRegexpMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MatchRegexpMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MatchJSONMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MatchJSONMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MatchJSONMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MatchErrorMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MatchErrorMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MatchErrorMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HaveSuffixMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HaveSuffixMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HaveSuffixMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HavePrefixMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HavePrefixMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HavePrefixMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HaveOccurredMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HaveOccurredMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HaveOccurredMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HaveLenMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HaveLenMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HaveLenMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HaveKeyWithValueMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HaveKeyWithValueMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HaveKeyWithValueMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HaveKeyMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HaveKeyMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HaveKeyMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EqualMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EqualMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EqualMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainSubstringMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainSubstringMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainSubstringMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainElementMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainElementMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainElementMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ConsistOfMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ConsistOfMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ConsistOfMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeZeroMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeZeroMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeZeroMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeTrueMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeTrueMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeTrueMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeTemporallyMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeTemporallyMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeTemporallyMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeSentMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeSentMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeSentMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MatchMayChangeInTheFuture">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeSentMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeNumericallyMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeNumericallyMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeNumericallyMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeNilMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeNilMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeNilMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeFalseMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeFalseMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeFalseMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeEquivalentToMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeEquivalentToMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeEquivalentToMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeEmptyMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeEmptyMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeEmptyMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeClosedMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeClosedMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BeClosedMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AssignableToTypeOfMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AssignableToTypeOfMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NegatedFailureMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AssignableToTypeOfMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/gomega/types">
      <types>
        <type name="GomegaFailHandler" type="func">
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="ident" def="int"/>
            </type>
          </paramsList>
          <resultsList/>
        </type>
        <type name="GomegaTestingT" type="interface">
          <method name="Errorf">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type name="GomegaMatcher" type="interface">
          <method name="Match">
            <paramsList>
              <type type="interface"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="FailureMessage">
            <paramsList>
              <type type="interface"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="NegatedFailureMessage">
            <paramsList>
              <type type="interface"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
      </types>
      <functions/>
      <names/>
    </package>
  </packages>
  <imports>
    <import path="time"/>
    <import path="github.com/onsi/gomega/matchers"/>
    <import path="github.com/onsi/gomega/types"/>
    <import path="fmt"/>
    <import path="reflect"/>
    <import path="github.com/onsi/gomega/internal/assertion"/>
    <import path="github.com/onsi/gomega/internal/asyncassertion"/>
    <import path="github.com/onsi/gomega/internal/testingtsupport"/>
    <import path="github.com/onsi/gomega/format"/>
    <import path="regexp"/>
    <import path="bytes"/>
    <import path="encoding/json"/>
    <import path="strings"/>
    <import path="github.com/onsi/gomega/matchers/support/goraph/bipartitegraph"/>
    <import path="math"/>
    <import path="github.com/onsi/gomega/matchers/support/goraph/node"/>
    <import path="github.com/onsi/gomega/matchers/support/goraph/edge"/>
    <import path="github.com/onsi/gomega/matchers/support/goraph/util"/>
    <import path="errors"/>
    <import path="runtime/debug"/>
    <import path="io/ioutil"/>
    <import path="net/http"/>
    <import path="net/http/httptest"/>
    <import path="sync"/>
    <import path="github.com/onsi/gomega"/>
    <import path="encoding/base64"/>
    <import path="io"/>
    <import path="os"/>
    <import path="os/exec"/>
    <import path="syscall"/>
    <import path="github.com/onsi/gomega/gbytes"/>
    <import path="path"/>
    <import path="path/filepath"/>
    <import path="runtime"/>
    <import path="math/rand"/>
    <import path="strconv"/>
  </imports>
</project>
