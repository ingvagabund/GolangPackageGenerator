<?xml version='1.0' encoding='ASCII'?>
<project ipprefix="" commit="commit" nvr="golang-googlecode-go-crypto-0-0.6.gitc57d4a7.fc24">
  <packages>
    <package importpath="golang.org/x/crypto/openpgp/armor">
      <types>
        <type type="struct" name="Block">
          <field type="ident" def="string" name="Type"/>
          <field type="map" name="Header">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
          <field type="selector" name="Body">
            <prefix value="io"/>
            <item value="Reader"/>
          </field>
          <field type="ident" def="lineReader" name="lReader"/>
          <field type="ident" def="openpgpReader" name="oReader"/>
        </type>
      </types>
      <functions>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lineBreaker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lineBreaker"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="encoding"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="encoding"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Encode">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="string"/>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="WriteCloser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lineReader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="openpgpReader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Decode">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Block"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ArmorCorrupt"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/otr">
      <types>
        <type name="SecurityChange" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="Conversation">
          <field type="pointer" name="PrivateKey">
            <type type="ident" def="PrivateKey"/>
          </field>
          <field type="selector" name="Rand">
            <prefix value="io"/>
            <item value="Reader"/>
          </field>
          <field type="ident" def="int" name="FragmentSize"/>
          <field type="array" name="SSID">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="PublicKey" name="TheirPublicKey"/>
          <field type="ident" def="int" name="state"/>
          <field type="ident" def="int" name="authState"/>
          <field type="array" name="r">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="pointer" name="x">
            <type type="selector">
              <prefix value="big"/>
              <item value="Int"/>
            </type>
          </field>
          <field type="pointer" name="y">
            <type type="selector">
              <prefix value="big"/>
              <item value="Int"/>
            </type>
          </field>
          <field type="pointer" name="gx">
            <type type="selector">
              <prefix value="big"/>
              <item value="Int"/>
            </type>
          </field>
          <field type="pointer" name="gy">
            <type type="selector">
              <prefix value="big"/>
              <item value="Int"/>
            </type>
          </field>
          <field type="slice" name="gxBytes">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="array" name="digest">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="akeKeys" name="revealKeys"/>
          <field type="ident" def="akeKeys" name="sigKeys"/>
          <field type="ident" def="uint32" name="myKeyId"/>
          <field type="pointer" name="myCurrentDHPub">
            <type type="selector">
              <prefix value="big"/>
              <item value="Int"/>
            </type>
          </field>
          <field type="pointer" name="myCurrentDHPriv">
            <type type="selector">
              <prefix value="big"/>
              <item value="Int"/>
            </type>
          </field>
          <field type="pointer" name="myLastDHPub">
            <type type="selector">
              <prefix value="big"/>
              <item value="Int"/>
            </type>
          </field>
          <field type="pointer" name="myLastDHPriv">
            <type type="selector">
              <prefix value="big"/>
              <item value="Int"/>
            </type>
          </field>
          <field type="ident" def="uint32" name="theirKeyId"/>
          <field type="pointer" name="theirCurrentDHPub">
            <type type="selector">
              <prefix value="big"/>
              <item value="Int"/>
            </type>
          </field>
          <field type="pointer" name="theirLastDHPub">
            <type type="selector">
              <prefix value="big"/>
              <item value="Int"/>
            </type>
          </field>
          <field type="array" name="keySlots">
            <elmtype type="ident" def="keySlot"/>
          </field>
          <field type="array" name="myCounter">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="array" name="theirLastCtr">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="oldMACs">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="int" name="k"/>
          <field type="ident" def="int" name="n"/>
          <field type="slice" name="frag">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="smpState" name="smp"/>
        </type>
        <type type="struct" name="PublicKey">
          <field type="selector" name="">
            <prefix value="dsa"/>
            <item value="PublicKey"/>
          </field>
        </type>
        <type type="struct" name="PrivateKey">
          <field type="ident" def="PublicKey" name=""/>
          <field type="selector" name="">
            <prefix value="dsa"/>
            <item value="PrivateKey"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Error">
          <recvList>
            <type type="ident" def="smpFailure"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Receive">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conversation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="SecurityChange"/>
            <type type="slice">
              <elmtype type="slice">
                <elmtype type="ident" def="byte"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Send">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conversation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="slice">
                <elmtype type="ident" def="byte"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SMPQuestion">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conversation"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Authenticate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conversation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="slice">
                <elmtype type="ident" def="byte"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="End">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conversation"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="slice">
                <elmtype type="ident" def="byte"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="IsEncrypted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Conversation"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Parse">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Serialize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Fingerprint">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Verify">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Serialize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Parse">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Generate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Import">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="NoChange"/>
        <name value="NewKeys"/>
        <name value="SMPSecretNeeded"/>
        <name value="SMPComplete"/>
        <name value="SMPFailed"/>
        <name value="ConversationEnded"/>
        <name value="QueryMessage"/>
        <name value="ErrorPrefix"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/hkdf">
      <types/>
      <functions>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="hkdf"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="selector">
                  <prefix value="hash"/>
                  <item value="Hash"/>
                </type>
              </resultsList>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/crypto/ocsp">
      <types>
        <type type="struct" name="Request">
          <field type="selector" name="HashAlgorithm">
            <prefix value="crypto"/>
            <item value="Hash"/>
          </field>
          <field type="slice" name="IssuerNameHash">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="IssuerKeyHash">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="pointer" name="SerialNumber">
            <type type="selector">
              <prefix value="big"/>
              <item value="Int"/>
            </type>
          </field>
        </type>
        <type type="struct" name="Response">
          <field type="ident" def="int" name="Status"/>
          <field type="pointer" name="SerialNumber">
            <type type="selector">
              <prefix value="big"/>
              <item value="Int"/>
            </type>
          </field>
          <field type="selector" name="ProducedAt">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="selector" name="ThisUpdate">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="selector" name="NextUpdate">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="selector" name="RevokedAt">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="int" name="RevocationReason"/>
          <field type="pointer" name="Certificate">
            <type type="selector">
              <prefix value="x509"/>
              <item value="Certificate"/>
            </type>
          </field>
          <field type="slice" name="TBSResponseData">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="Signature">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="selector" name="SignatureAlgorithm">
            <prefix value="x509"/>
            <item value="SignatureAlgorithm"/>
          </field>
        </type>
        <type name="ParseError" type="ident">
          <type type="ident" def="string"/>
        </type>
        <type type="struct" name="RequestOptions">
          <field type="selector" name="Hash">
            <prefix value="crypto"/>
            <item value="Hash"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="CheckSignatureFrom">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Response"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="Certificate"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="ParseError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ParseRequest">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Request"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ParseResponse">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="Certificate"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Response"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CreateRequest">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="Certificate"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="Certificate"/>
              </type>
            </type>
            <type type="pointer">
              <type type="ident" def="RequestOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CreateResponse">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="Certificate"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="x509"/>
                <item value="Certificate"/>
              </type>
            </type>
            <type type="ident" def="Response"/>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="Signer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Good"/>
        <name value="Revoked"/>
        <name value="Unknown"/>
        <name value="ServerFailed"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/pbkdf2">
      <types/>
      <functions>
        <function name="Key">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="selector">
                  <prefix value="hash"/>
                  <item value="Hash"/>
                </type>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/crypto/sha3">
      <types>
        <type name="ShakeHash" type="interface">
          <method name="Clone">
            <paramsList/>
            <resultsList>
              <type type="ident" def="ShakeHash"/>
            </resultsList>
          </method>
          <method name="Reset">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
      </types>
      <functions>
        <function name="Clone">
          <recvList>
            <type type="pointer">
              <type type="ident" def="state"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ShakeHash"/>
          </resultsList>
        </function>
        <function name="NewShake128">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ShakeHash"/>
          </resultsList>
        </function>
        <function name="NewShake256">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ShakeHash"/>
          </resultsList>
        </function>
        <function name="ShakeSum128">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ShakeSum256">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="BlockSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="state"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Size">
          <recvList>
            <type type="pointer">
              <type type="ident" def="state"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="state"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="state"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="state"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sum">
          <recvList>
            <type type="pointer">
              <type type="ident" def="state"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="New224">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="hash"/>
              <item value="Hash"/>
            </type>
          </resultsList>
        </function>
        <function name="New256">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="hash"/>
              <item value="Hash"/>
            </type>
          </resultsList>
        </function>
        <function name="New384">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="hash"/>
              <item value="Hash"/>
            </type>
          </resultsList>
        </function>
        <function name="New512">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="hash"/>
              <item value="Hash"/>
            </type>
          </resultsList>
        </function>
        <function name="Sum224">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="array">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Sum256">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="array">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Sum384">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="array">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Sum512">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="array">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/crypto/nacl/box">
      <types/>
      <functions>
        <function name="GenerateKey">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Precompute">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Seal">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="SealAfterPrecomputation">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Open">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="OpenAfterPrecomputation">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Overhead"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/blowfish">
      <types>
        <type type="struct" name="Cipher">
          <field type="array" name="p">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="array" name="s0">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="array" name="s1">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="array" name="s2">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="array" name="s3">
            <elmtype type="ident" def="uint32"/>
          </field>
        </type>
        <type name="KeySizeError" type="ident">
          <type type="ident" def="int"/>
        </type>
      </types>
      <functions>
        <function name="Error">
          <recvList>
            <type type="ident" def="KeySizeError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewCipher">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewSaltedCipher">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="BlockSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Encrypt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Decrypt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ExpandKey">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="BlockSize"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/ssh/testdata">
      <types/>
      <functions/>
      <names>
        <name value="PEMBytes"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/openpgp/errors">
      <types>
        <type name="StructuralError" type="ident">
          <type type="ident" def="string"/>
        </type>
        <type name="UnsupportedError" type="ident">
          <type type="ident" def="string"/>
        </type>
        <type name="InvalidArgumentError" type="ident">
          <type type="ident" def="string"/>
        </type>
        <type name="SignatureError" type="ident">
          <type type="ident" def="string"/>
        </type>
        <type name="UnknownPacketTypeError" type="ident">
          <type type="ident" def="uint8"/>
        </type>
      </types>
      <functions>
        <function name="Error">
          <recvList>
            <type type="ident" def="StructuralError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="UnsupportedError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="InvalidArgumentError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="SignatureError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="keyIncorrectError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="UnknownPacketTypeError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ErrKeyIncorrect"/>
        <name value="ErrUnknownIssuer"/>
        <name value="ErrKeyRevoked"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/twofish">
      <types>
        <type type="struct" name="Cipher">
          <field type="array" name="s">
            <elmtype type="array">
              <elmtype type="ident" def="uint32"/>
            </elmtype>
          </field>
          <field type="array" name="k">
            <elmtype type="ident" def="uint32"/>
          </field>
        </type>
        <type name="KeySizeError" type="ident">
          <type type="ident" def="int"/>
        </type>
      </types>
      <functions>
        <function name="Error">
          <recvList>
            <type type="ident" def="KeySizeError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewCipher">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="BlockSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Encrypt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Decrypt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="BlockSize"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/salsa20/salsa">
      <types/>
      <functions>
        <function name="XORKeyStream">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="XORKeyStream">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Core208">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="HSalsa20">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="Sigma"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/xtea">
      <types>
        <type type="struct" name="Cipher">
          <field type="array" name="table">
            <elmtype type="ident" def="uint32"/>
          </field>
        </type>
        <type name="KeySizeError" type="ident">
          <type type="ident" def="int"/>
        </type>
      </types>
      <functions>
        <function name="Error">
          <recvList>
            <type type="ident" def="KeySizeError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewCipher">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="BlockSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Encrypt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Decrypt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="BlockSize"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/poly1305">
      <types/>
      <functions>
        <function name="Sum">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Sum">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Verify">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="TagSize"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/salsa20">
      <types/>
      <functions>
        <function name="XORKeyStream">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/crypto/openpgp/packet">
      <types>
        <type type="struct" name="UserId">
          <field type="ident" def="string" name="Id"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Comment"/>
          <field type="ident" def="string" name="Email"/>
        </type>
        <type type="struct" name="UserAttribute">
          <field type="slice" name="Contents">
            <elmtype type="pointer">
              <type type="ident" def="OpaqueSubpacket"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="SymmetricallyEncrypted">
          <field type="ident" def="bool" name="MDC"/>
          <field type="selector" name="contents">
            <prefix value="io"/>
            <item value="Reader"/>
          </field>
          <field type="slice" name="prefix">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="SymmetricKeyEncrypted">
          <field type="ident" def="CipherFunction" name="CipherFunc"/>
          <field type="ident" def="bool" name="Encrypted"/>
          <field type="slice" name="Key">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="func" name="s2k">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList/>
          </field>
          <field type="slice" name="encryptedKey">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="SignatureV3">
          <field type="ident" def="SignatureType" name="SigType"/>
          <field type="selector" name="CreationTime">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="uint64" name="IssuerKeyId"/>
          <field type="ident" def="PublicKeyAlgorithm" name="PubKeyAlgo"/>
          <field type="selector" name="Hash">
            <prefix value="crypto"/>
            <item value="Hash"/>
          </field>
          <field type="array" name="HashTag">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="parsedMPI" name="RSASignature"/>
          <field type="ident" def="parsedMPI" name="DSASigR"/>
          <field type="ident" def="parsedMPI" name="DSASigS"/>
        </type>
        <type type="struct" name="Signature">
          <field type="ident" def="SignatureType" name="SigType"/>
          <field type="ident" def="PublicKeyAlgorithm" name="PubKeyAlgo"/>
          <field type="selector" name="Hash">
            <prefix value="crypto"/>
            <item value="Hash"/>
          </field>
          <field type="slice" name="HashSuffix">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="array" name="HashTag">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="selector" name="CreationTime">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="parsedMPI" name="RSASignature"/>
          <field type="ident" def="parsedMPI" name="DSASigR"/>
          <field type="ident" def="parsedMPI" name="DSASigS"/>
          <field type="ident" def="parsedMPI" name="ECDSASigR"/>
          <field type="ident" def="parsedMPI" name="ECDSASigS"/>
          <field type="slice" name="rawSubpackets">
            <elmtype type="ident" def="outputSubpacket"/>
          </field>
          <field type="pointer" name="SigLifetimeSecs">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="KeyLifetimeSecs">
            <type type="ident" def="uint32"/>
          </field>
          <field type="slice" name="PreferredSymmetric">
            <elmtype type="ident" def="uint8"/>
          </field>
          <field type="slice" name="PreferredHash">
            <elmtype type="ident" def="uint8"/>
          </field>
          <field type="slice" name="PreferredCompression">
            <elmtype type="ident" def="uint8"/>
          </field>
          <field type="pointer" name="IssuerKeyId">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="IsPrimaryId">
            <type type="ident" def="bool"/>
          </field>
          <field type="ident" def="bool" name="FlagsValid"/>
          <field type="ident" def="bool" name="FlagCertify"/>
          <field type="ident" def="bool" name="FlagSign"/>
          <field type="ident" def="bool" name="FlagEncryptCommunications"/>
          <field type="ident" def="bool" name="FlagEncryptStorage"/>
          <field type="pointer" name="RevocationReason">
            <type type="ident" def="uint8"/>
          </field>
          <field type="ident" def="string" name="RevocationReasonText"/>
          <field type="ident" def="bool" name="MDC"/>
          <field type="slice" name="outSubpackets">
            <elmtype type="ident" def="outputSubpacket"/>
          </field>
        </type>
        <type type="struct" name="Reader">
          <field type="slice" name="q">
            <elmtype type="ident" def="Packet"/>
          </field>
          <field type="slice" name="readers">
            <elmtype type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="PublicKeyV3">
          <field type="selector" name="CreationTime">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="uint16" name="DaysToExpire"/>
          <field type="ident" def="PublicKeyAlgorithm" name="PubKeyAlgo"/>
          <field type="pointer" name="PublicKey">
            <type type="selector">
              <prefix value="rsa"/>
              <item value="PublicKey"/>
            </type>
          </field>
          <field type="array" name="Fingerprint">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="uint64" name="KeyId"/>
          <field type="ident" def="bool" name="IsSubkey"/>
          <field type="ident" def="parsedMPI" name="n"/>
          <field type="ident" def="parsedMPI" name="e"/>
        </type>
        <type type="struct" name="PublicKey">
          <field type="selector" name="CreationTime">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="PublicKeyAlgorithm" name="PubKeyAlgo"/>
          <field type="interface" name="PublicKey"/>
          <field type="array" name="Fingerprint">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="uint64" name="KeyId"/>
          <field type="ident" def="bool" name="IsSubkey"/>
          <field type="ident" def="parsedMPI" name="n"/>
          <field type="ident" def="parsedMPI" name="e"/>
          <field type="ident" def="parsedMPI" name="p"/>
          <field type="ident" def="parsedMPI" name="q"/>
          <field type="ident" def="parsedMPI" name="g"/>
          <field type="ident" def="parsedMPI" name="y"/>
          <field type="pointer" name="ec">
            <type type="ident" def="ecdsaKey"/>
          </field>
          <field type="pointer" name="ecdh">
            <type type="ident" def="ecdhKdf"/>
          </field>
        </type>
        <type type="struct" name="PrivateKey">
          <field type="ident" def="PublicKey" name=""/>
          <field type="ident" def="bool" name="Encrypted"/>
          <field type="slice" name="encryptedData">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="CipherFunction" name="cipher"/>
          <field type="func" name="s2k">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList/>
          </field>
          <field type="interface" name="PrivateKey"/>
          <field type="ident" def="bool" name="sha1Checksum"/>
          <field type="slice" name="iv">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type name="Packet" type="interface">
          <method name="parse">
            <paramsList>
              <type type="selector">
                <prefix value="io"/>
                <item value="Reader"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="SignatureType" type="ident">
          <type type="ident" def="uint8"/>
        </type>
        <type name="PublicKeyAlgorithm" type="ident">
          <type type="ident" def="uint8"/>
        </type>
        <type name="CipherFunction" type="ident">
          <type type="ident" def="uint8"/>
        </type>
        <type name="CompressionAlgo" type="ident">
          <type type="ident" def="uint8"/>
        </type>
        <type type="struct" name="OpaquePacket">
          <field type="ident" def="uint8" name="Tag"/>
          <field type="ident" def="error" name="Reason"/>
          <field type="slice" name="Contents">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="OpaqueReader">
          <field type="selector" name="r">
            <prefix value="io"/>
            <item value="Reader"/>
          </field>
        </type>
        <type type="struct" name="OpaqueSubpacket">
          <field type="ident" def="uint8" name="SubType"/>
          <field type="slice" name="Contents">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="OnePassSignature">
          <field type="ident" def="SignatureType" name="SigType"/>
          <field type="selector" name="Hash">
            <prefix value="crypto"/>
            <item value="Hash"/>
          </field>
          <field type="ident" def="PublicKeyAlgorithm" name="PubKeyAlgo"/>
          <field type="ident" def="uint64" name="KeyId"/>
          <field type="ident" def="bool" name="IsLast"/>
        </type>
        <type name="OCFBResyncOption" type="ident">
          <type type="ident" def="bool"/>
        </type>
        <type type="struct" name="LiteralData">
          <field type="ident" def="bool" name="IsBinary"/>
          <field type="ident" def="string" name="FileName"/>
          <field type="ident" def="uint32" name="Time"/>
          <field type="selector" name="Body">
            <prefix value="io"/>
            <item value="Reader"/>
          </field>
        </type>
        <type type="struct" name="EncryptedKey">
          <field type="ident" def="uint64" name="KeyId"/>
          <field type="ident" def="PublicKeyAlgorithm" name="Algo"/>
          <field type="ident" def="CipherFunction" name="CipherFunc"/>
          <field type="slice" name="Key">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="encryptedMPI1">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="encryptedMPI2">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Config">
          <field type="selector" name="Rand">
            <prefix value="io"/>
            <item value="Reader"/>
          </field>
          <field type="selector" name="DefaultHash">
            <prefix value="crypto"/>
            <item value="Hash"/>
          </field>
          <field type="ident" def="CipherFunction" name="DefaultCipher"/>
          <field type="func" name="Time">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="time"/>
                <item value="Time"/>
              </type>
            </resultsList>
          </field>
          <field type="ident" def="CompressionAlgo" name="DefaultCompressionAlgo"/>
          <field type="pointer" name="CompressionConfig">
            <type type="ident" def="CompressionConfig"/>
          </field>
          <field type="ident" def="int" name="S2KCount"/>
        </type>
        <type type="struct" name="Compressed">
          <field type="selector" name="Body">
            <prefix value="io"/>
            <item value="Reader"/>
          </field>
        </type>
        <type type="struct" name="CompressionConfig">
          <field type="ident" def="int" name="Level"/>
        </type>
      </types>
      <functions>
        <function name="NewUserId">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="UserId"/>
            </type>
          </resultsList>
        </function>
        <function name="Serialize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UserId"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewUserAttributePhoto">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="selector">
                <prefix value="image"/>
                <item value="Image"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="UserAttribute"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewUserAttribute">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="pointer">
                <type type="ident" def="OpaqueSubpacket"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="UserAttribute"/>
            </type>
          </resultsList>
        </function>
        <function name="Serialize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UserAttribute"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ImageData">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UserAttribute"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="slice">
                <elmtype type="ident" def="byte"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Decrypt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SymmetricallyEncrypted"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="CipherFunction"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="ReadCloser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="ident" def="seReader"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="seReader"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="seMDCReader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="seMDCReader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="seMDCWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="seMDCWriter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="ident" def="noOpCloser"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="noOpCloser"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SerializeSymmetricallyEncrypted">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="CipherFunction"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="WriteCloser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Decrypt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SymmetricKeyEncrypted"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SerializeSymmetricKeyEncrypted">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Serialize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SignatureV3"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="KeyExpired">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="hash"/>
              <item value="Hash"/>
            </type>
            <type type="pointer">
              <type type="ident" def="PrivateKey"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SignUserId">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
            <type type="pointer">
              <type type="ident" def="PrivateKey"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SignKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
            <type type="pointer">
              <type type="ident" def="PrivateKey"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Serialize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Packet"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Push">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Unread">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Packet"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewReader">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </resultsList>
        </function>
        <function name="SerializeSignaturePrefix">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKeyV3"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Serialize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKeyV3"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CanSign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKeyV3"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="VerifySignatureV3">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKeyV3"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="hash"/>
              <item value="Hash"/>
            </type>
            <type type="pointer">
              <type type="ident" def="SignatureV3"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="VerifyUserIdSignatureV3">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKeyV3"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="PublicKeyV3"/>
            </type>
            <type type="pointer">
              <type type="ident" def="SignatureV3"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="VerifyKeySignatureV3">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKeyV3"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="PublicKeyV3"/>
            </type>
            <type type="pointer">
              <type type="ident" def="SignatureV3"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="KeyIdString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKeyV3"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="KeyIdShortString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKeyV3"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="BitLength">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKeyV3"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint16"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewRSAPublicKey">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="rsa"/>
                <item value="PublicKey"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </resultsList>
        </function>
        <function name="NewDSAPublicKey">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="dsa"/>
                <item value="PublicKey"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </resultsList>
        </function>
        <function name="SerializeSignaturePrefix">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Serialize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CanSign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="VerifySignature">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="hash"/>
              <item value="Hash"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="VerifySignatureV3">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="hash"/>
              <item value="Hash"/>
            </type>
            <type type="pointer">
              <type type="ident" def="SignatureV3"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="VerifyKeySignature">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="VerifyRevocationSignature">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="VerifyUserIdSignature">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="VerifyUserIdSignatureV3">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
            <type type="pointer">
              <type type="ident" def="SignatureV3"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="KeyIdString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="KeyIdShortString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="BitLength">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint16"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewRSAPrivateKey">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="rsa"/>
                <item value="PrivateKey"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PrivateKey"/>
            </type>
          </resultsList>
        </function>
        <function name="NewDSAPrivateKey">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="dsa"/>
                <item value="PrivateKey"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PrivateKey"/>
            </type>
          </resultsList>
        </function>
        <function name="Serialize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Decrypt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="partialLengthReader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="partialLengthWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="partialLengthWriter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="spanReader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Packet"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CanEncrypt">
          <recvList>
            <type type="ident" def="PublicKeyAlgorithm"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="CanSign">
          <recvList>
            <type type="ident" def="PublicKeyAlgorithm"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="KeySize">
          <recvList>
            <type type="ident" def="CipherFunction"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Serialize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OpaquePacket"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Parse">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OpaquePacket"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Packet"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewOpaqueReader">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="OpaqueReader"/>
            </type>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OpaqueReader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="OpaquePacket"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="OpaqueSubpackets">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="OpaqueSubpacket"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Serialize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OpaqueSubpacket"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Serialize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OnePassSignature"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewOCFBEncrypter">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="cipher"/>
              <item value="Block"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="OCFBResyncOption"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="cipher"/>
              <item value="Stream"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="XORKeyStream">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ocfbEncrypter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewOCFBDecrypter">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="cipher"/>
              <item value="Block"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="OCFBResyncOption"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="cipher"/>
              <item value="Stream"/>
            </type>
          </resultsList>
        </function>
        <function name="XORKeyStream">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ocfbDecrypter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ForEyesOnly">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LiteralData"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="SerializeLiteral">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="WriteCloser"/>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
            <type type="ident" def="uint32"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="WriteCloser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Decrypt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="EncryptedKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="PrivateKey"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SerializeEncryptedKey">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
            <type type="ident" def="CipherFunction"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Random">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </resultsList>
        </function>
        <function name="Hash">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="Hash"/>
            </type>
          </resultsList>
        </function>
        <function name="Cipher">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="CipherFunction"/>
          </resultsList>
        </function>
        <function name="Now">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </resultsList>
        </function>
        <function name="Compression">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="CompressionAlgo"/>
          </resultsList>
        </function>
        <function name="PasswordHashIterations">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="ident" def="compressedWriteCloser"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="compressedWriteCloser"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SerializeCompressed">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="WriteCloser"/>
            </type>
            <type type="ident" def="CompressionAlgo"/>
            <type type="pointer">
              <type type="ident" def="CompressionConfig"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="WriteCloser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="UserAttrImageSubpacket"/>
        <name value="KeyFlagCertify"/>
        <name value="KeyFlagSign"/>
        <name value="KeyFlagEncryptCommunications"/>
        <name value="KeyFlagEncryptStorage"/>
        <name value="SigTypeBinary"/>
        <name value="SigTypeText"/>
        <name value="SigTypeGenericCert"/>
        <name value="SigTypePersonaCert"/>
        <name value="SigTypeCasualCert"/>
        <name value="SigTypePositiveCert"/>
        <name value="SigTypeSubkeyBinding"/>
        <name value="SigTypeDirectSignature"/>
        <name value="SigTypeKeyRevocation"/>
        <name value="SigTypeSubkeyRevocation"/>
        <name value="PubKeyAlgoRSA"/>
        <name value="PubKeyAlgoRSAEncryptOnly"/>
        <name value="PubKeyAlgoRSASignOnly"/>
        <name value="PubKeyAlgoElGamal"/>
        <name value="PubKeyAlgoDSA"/>
        <name value="PubKeyAlgoECDH"/>
        <name value="PubKeyAlgoECDSA"/>
        <name value="Cipher3DES"/>
        <name value="CipherCAST5"/>
        <name value="CipherAES128"/>
        <name value="CipherAES192"/>
        <name value="CipherAES256"/>
        <name value="CompressionNone"/>
        <name value="CompressionZIP"/>
        <name value="CompressionZLIB"/>
        <name value="OCFBResync"/>
        <name value="OCFBNoResync"/>
        <name value="NoCompression"/>
        <name value="BestSpeed"/>
        <name value="BestCompression"/>
        <name value="DefaultCompression"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/scrypt">
      <types/>
      <functions>
        <function name="Key">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/crypto/openpgp/elgamal">
      <types>
        <type type="struct" name="PublicKey">
          <field type="pointer" name="G">
            <type type="selector">
              <prefix value="big"/>
              <item value="Int"/>
            </type>
          </field>
          <field type="pointer" name="P">
            <type type="selector">
              <prefix value="big"/>
              <item value="Int"/>
            </type>
          </field>
          <field type="pointer" name="Y">
            <type type="selector">
              <prefix value="big"/>
              <item value="Int"/>
            </type>
          </field>
        </type>
        <type type="struct" name="PrivateKey">
          <field type="ident" def="PublicKey" name=""/>
          <field type="pointer" name="X">
            <type type="selector">
              <prefix value="big"/>
              <item value="Int"/>
            </type>
          </field>
        </type>
      </types>
      <functions>
        <function name="Encrypt">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="pointer">
              <type type="ident" def="PublicKey"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Decrypt">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="PrivateKey"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/crypto/openpgp/s2k">
      <types>
        <type type="struct" name="Config">
          <field type="selector" name="Hash">
            <prefix value="crypto"/>
            <item value="Hash"/>
          </field>
          <field type="ident" def="int" name="S2KCount"/>
        </type>
      </types>
      <functions>
        <function name="Simple">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="selector">
              <prefix value="hash"/>
              <item value="Hash"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Salted">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="selector">
              <prefix value="hash"/>
              <item value="Hash"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Iterated">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="selector">
              <prefix value="hash"/>
              <item value="Hash"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Parse">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="func">
              <paramsList>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
              </paramsList>
              <resultsList/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Serialize">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="HashIdToHash">
          <recvList/>
          <paramsList>
            <type type="ident" def="byte"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="Hash"/>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="HashIdToString">
          <recvList/>
          <paramsList>
            <type type="ident" def="byte"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="HashToHashId">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="crypto"/>
              <item value="Hash"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="byte"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/crypto/curve25519">
      <types/>
      <functions>
        <function name="ScalarMult">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ScalarBaseMult">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/crypto/md4">
      <types/>
      <functions>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="digest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="New">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="hash"/>
              <item value="Hash"/>
            </type>
          </resultsList>
        </function>
        <function name="Size">
          <recvList>
            <type type="pointer">
              <type type="ident" def="digest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="BlockSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="digest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="digest"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sum">
          <recvList>
            <type type="pointer">
              <type type="ident" def="digest"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Size"/>
        <name value="BlockSize"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/nacl/secretbox">
      <types/>
      <functions>
        <function name="Seal">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Open">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
            <type type="pointer">
              <type type="array">
                <elmtype type="ident" def="byte"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Overhead"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/cast5">
      <types>
        <type type="struct" name="Cipher">
          <field type="array" name="masking">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="array" name="rotate">
            <elmtype type="ident" def="uint8"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewCipher">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="BlockSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Encrypt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Decrypt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="BlockSize"/>
        <name value="KeySize"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/ssh/terminal">
      <types>
        <type type="struct" name="State">
          <field type="ident" def="uint32" name="mode"/>
        </type>
        <type type="struct" name="State">
          <field type="selector" name="termios">
            <prefix value="syscall"/>
            <item value="Termios"/>
          </field>
        </type>
        <type type="struct" name="EscapeCodes">
          <field type="slice" name="Black">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="Red">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="Green">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="Yellow">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="Blue">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="Magenta">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="Cyan">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="White">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="Reset">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Terminal">
          <field type="func" name="AutoCompleteCallback">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ident" def="int"/>
              <type type="ident" def="rune"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="string"/>
              <type type="ident" def="int"/>
              <type type="ident" def="bool"/>
            </resultsList>
          </field>
          <field type="pointer" name="Escape">
            <type type="ident" def="EscapeCodes"/>
          </field>
          <field type="selector" name="lock">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="selector" name="c">
            <prefix value="io"/>
            <item value="ReadWriter"/>
          </field>
          <field type="slice" name="prompt">
            <elmtype type="ident" def="rune"/>
          </field>
          <field type="slice" name="line">
            <elmtype type="ident" def="rune"/>
          </field>
          <field type="ident" def="int" name="pos"/>
          <field type="ident" def="bool" name="echo"/>
          <field type="ident" def="bool" name="pasteActive"/>
          <field type="ident" def="int" name="cursorX"/>
          <field type="ident" def="int" name="cursorY"/>
          <field type="ident" def="int" name="maxLine"/>
          <field type="ident" def="int" name="termWidth"/>
          <field type="ident" def="int" name="termHeight"/>
          <field type="slice" name="outBuf">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="remainder">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="array" name="inBuf">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="stRingBuffer" name="history"/>
          <field type="ident" def="int" name="historyIndex"/>
          <field type="ident" def="string" name="historyPending"/>
        </type>
      </types>
      <functions>
        <function name="IsTerminal">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="MakeRaw">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="State"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetState">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="State"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Restore">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="pointer">
              <type type="ident" def="State"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetSize">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadPassword">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="IsTerminal">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="MakeRaw">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="State"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetState">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="State"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Restore">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="pointer">
              <type type="ident" def="State"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetSize">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadPassword">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewTerminal">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="ReadWriter"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Terminal"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Terminal"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadPassword">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Terminal"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadLine">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Terminal"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetPrompt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Terminal"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Terminal"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="SetBracketedPasteMode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Terminal"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="stRingBuffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NthPreviousEntry">
          <recvList>
            <type type="pointer">
              <type type="ident" def="stRingBuffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ErrPasteIndicator"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/ssh">
      <types>
        <type name="Signal" type="ident">
          <type type="ident" def="string"/>
        </type>
        <type name="TerminalModes" type="map">
          <keytype type="ident" def="uint8"/>
          <valtype type="ident" def="uint32"/>
        </type>
        <type type="struct" name="Session">
          <field type="selector" name="Stdin">
            <prefix value="io"/>
            <item value="Reader"/>
          </field>
          <field type="selector" name="Stdout">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="selector" name="Stderr">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="ident" def="Channel" name="ch"/>
          <field type="ident" def="bool" name="started"/>
          <field type="slice" name="copyFuncs">
            <elmtype type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </elmtype>
          </field>
          <field type="channel" dir="3" name="errors">
            <type type="ident" def="error"/>
          </field>
          <field type="ident" def="bool" name="stdinpipe"/>
          <field type="ident" def="bool" name="stdoutpipe"/>
          <field type="ident" def="bool" name="stderrpipe"/>
          <field type="selector" name="stdinPipeWriter">
            <prefix value="io"/>
            <item value="WriteCloser"/>
          </field>
          <field type="channel" dir="3" name="exitStatus">
            <type type="ident" def="error"/>
          </field>
        </type>
        <type type="struct" name="ExitError">
          <field type="ident" def="Waitmsg" name=""/>
        </type>
        <type type="struct" name="Waitmsg">
          <field type="ident" def="int" name="status"/>
          <field type="ident" def="string" name="signal"/>
          <field type="ident" def="string" name="msg"/>
          <field type="ident" def="string" name="lang"/>
        </type>
        <type type="struct" name="Permissions">
          <field type="map" name="CriticalOptions">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
          <field type="map" name="Extensions">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="ServerConfig">
          <field type="ident" def="Config" name=""/>
          <field type="slice" name="hostKeys">
            <elmtype type="ident" def="Signer"/>
          </field>
          <field type="ident" def="bool" name="NoClientAuth"/>
          <field type="func" name="PasswordCallback">
            <paramsList>
              <type type="ident" def="ConnMetadata"/>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="Permissions"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </field>
          <field type="func" name="PublicKeyCallback">
            <paramsList>
              <type type="ident" def="ConnMetadata"/>
              <type type="ident" def="PublicKey"/>
            </paramsList>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="Permissions"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </field>
          <field type="func" name="KeyboardInteractiveCallback">
            <paramsList>
              <type type="ident" def="ConnMetadata"/>
              <type type="ident" def="KeyboardInteractiveChallenge"/>
            </paramsList>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="Permissions"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </field>
          <field type="func" name="AuthLogCallback">
            <paramsList>
              <type type="ident" def="ConnMetadata"/>
              <type type="ident" def="string"/>
              <type type="ident" def="error"/>
            </paramsList>
            <resultsList/>
          </field>
          <field type="ident" def="string" name="ServerVersion"/>
        </type>
        <type type="struct" name="ServerConn">
          <field type="ident" def="Conn" name=""/>
          <field type="pointer" name="Permissions">
            <type type="ident" def="Permissions"/>
          </field>
        </type>
        <type name="PublicKey" type="interface">
          <method name="Type">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="Marshal">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
          <method name="Verify">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="pointer">
                <type type="ident" def="Signature"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Signer" type="interface">
          <method name="PublicKey">
            <paramsList/>
            <resultsList>
              <type type="ident" def="PublicKey"/>
            </resultsList>
          </method>
          <method name="Sign">
            <paramsList>
              <type type="selector">
                <prefix value="io"/>
                <item value="Reader"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="Signature"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="OpenChannelError">
          <field type="ident" def="RejectionReason" name="Reason"/>
          <field type="ident" def="string" name="Message"/>
        </type>
        <type name="ConnMetadata" type="interface">
          <method name="User">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="SessionID">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
          <method name="ClientVersion">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
          <method name="ServerVersion">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
          <method name="RemoteAddr">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="net"/>
                <item value="Addr"/>
              </type>
            </resultsList>
          </method>
          <method name="LocalAddr">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="net"/>
                <item value="Addr"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="Conn" type="interface">
          <method name="SendRequest">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ident" def="bool"/>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="OpenChannel">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="Channel"/>
              <type type="channel" dir="2">
                <type type="pointer">
                  <type type="ident" def="Request"/>
                </type>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Close">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Wait">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Config">
          <field type="selector" name="Rand">
            <prefix value="io"/>
            <item value="Reader"/>
          </field>
          <field type="ident" def="uint64" name="RekeyThreshold"/>
          <field type="slice" name="KeyExchanges">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="Ciphers">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="MACs">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type name="AuthMethod" type="interface">
          <method name="auth">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="string"/>
              <type type="ident" def="packetConn"/>
              <type type="selector">
                <prefix value="io"/>
                <item value="Reader"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
              <type type="slice">
                <elmtype type="ident" def="string"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="method">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type name="KeyboardInteractiveChallenge" type="func">
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="bool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </type>
        <type type="struct" name="Client">
          <field type="ident" def="Conn" name=""/>
          <field type="ident" def="forwardList" name="forwards"/>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="map" name="channelHandlers">
            <keytype type="ident" def="string"/>
            <valtype type="channel" dir="3">
              <type type="ident" def="NewChannel"/>
            </valtype>
          </field>
        </type>
        <type type="struct" name="ClientConfig">
          <field type="ident" def="Config" name=""/>
          <field type="ident" def="string" name="User"/>
          <field type="slice" name="Auth">
            <elmtype type="ident" def="AuthMethod"/>
          </field>
          <field type="func" name="HostKeyCallback">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="selector">
                <prefix value="net"/>
                <item value="Addr"/>
              </type>
              <type type="ident" def="PublicKey"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </field>
          <field type="ident" def="string" name="ClientVersion"/>
        </type>
        <type name="NewChannel" type="interface">
          <method name="Accept">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Channel"/>
              <type type="channel" dir="2">
                <type type="pointer">
                  <type type="ident" def="Request"/>
                </type>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Reject">
            <paramsList>
              <type type="ident" def="RejectionReason"/>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="ChannelType">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="ExtraData">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="Channel" type="interface">
          <method name="Read">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Write">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Close">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="CloseWrite">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="SendRequest">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ident" def="bool"/>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Stderr">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="io"/>
                <item value="ReadWriter"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Request">
          <field type="ident" def="string" name="Type"/>
          <field type="ident" def="bool" name="WantReply"/>
          <field type="slice" name="Payload">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="pointer" name="ch">
            <type type="ident" def="channel"/>
          </field>
          <field type="pointer" name="mux">
            <type type="ident" def="mux"/>
          </field>
        </type>
        <type name="RejectionReason" type="ident">
          <type type="ident" def="uint32"/>
        </type>
        <type type="struct" name="Signature">
          <field type="ident" def="string" name="Format"/>
          <field type="slice" name="Blob">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Certificate">
          <field type="slice" name="Nonce">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="PublicKey" name="Key"/>
          <field type="ident" def="uint64" name="Serial"/>
          <field type="ident" def="uint32" name="CertType"/>
          <field type="ident" def="string" name="KeyId"/>
          <field type="slice" name="ValidPrincipals">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="uint64" name="ValidAfter"/>
          <field type="ident" def="uint64" name="ValidBefore"/>
          <field type="ident" def="Permissions" name=""/>
          <field type="slice" name="Reserved">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="PublicKey" name="SignatureKey"/>
          <field type="pointer" name="Signature">
            <type type="ident" def="Signature"/>
          </field>
        </type>
        <type type="struct" name="CertChecker">
          <field type="slice" name="SupportedCriticalOptions">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="func" name="IsAuthority">
            <paramsList>
              <type type="ident" def="PublicKey"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </field>
          <field type="func" name="Clock">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="time"/>
                <item value="Time"/>
              </type>
            </resultsList>
          </field>
          <field type="func" name="UserKeyFallback">
            <paramsList>
              <type type="ident" def="ConnMetadata"/>
              <type type="ident" def="PublicKey"/>
            </paramsList>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="Permissions"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </field>
          <field type="func" name="HostKeyFallback">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="selector">
                <prefix value="net"/>
                <item value="Addr"/>
              </type>
              <type type="ident" def="PublicKey"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </field>
          <field type="func" name="IsRevoked">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="Certificate"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </field>
        </type>
      </types>
      <functions>
        <function name="Listen">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Listener"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ListenTCP">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="net"/>
                <item value="TCPAddr"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Listener"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Accept">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tcpListener"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Conn"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tcpListener"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Addr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tcpListener"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Addr"/>
            </type>
          </resultsList>
        </function>
        <function name="Dial">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Conn"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DialTCP">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="net"/>
                <item value="TCPAddr"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="net"/>
                <item value="TCPAddr"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Conn"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="LocalAddr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tcpChanConn"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Addr"/>
            </type>
          </resultsList>
        </function>
        <function name="RemoteAddr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tcpChanConn"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Addr"/>
            </type>
          </resultsList>
        </function>
        <function name="SetDeadline">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tcpChanConn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetReadDeadline">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tcpChanConn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetWriteDeadline">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tcpChanConn"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SendRequest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="bool"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Setenv">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RequestPty">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="TerminalModes"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RequestSubsystem">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Signal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Signal"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Start">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Output">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="singleWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CombinedOutput">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Shell">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Wait">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="sessionStdin"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="StdinPipe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="WriteCloser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="StdoutPipe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="StderrPipe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ExitError"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ExitStatus">
          <recvList>
            <type type="ident" def="Waitmsg"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Signal">
          <recvList>
            <type type="ident" def="Waitmsg"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Msg">
          <recvList>
            <type type="ident" def="Waitmsg"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Lang">
          <recvList>
            <type type="ident" def="Waitmsg"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Waitmsg"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="AddHostKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ServerConfig"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Signer"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewServerConn">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Conn"/>
            </type>
            <type type="pointer">
              <type type="ident" def="ServerConfig"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="ServerConn"/>
            </type>
            <type type="channel" dir="2">
              <type type="ident" def="NewChannel"/>
            </type>
            <type type="channel" dir="2">
              <type type="pointer">
                <type type="ident" def="Request"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Challenge">
          <recvList>
            <type type="pointer">
              <type type="ident" def="sshClientKeyboardInteractive"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="bool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Wait">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mux"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SendRequest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mux"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="bool"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Disconnect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mux"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint32"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mux"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="OpenChannel">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mux"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Channel"/>
            <type type="channel" dir="2">
              <type type="pointer">
                <type type="ident" def="Request"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="disconnectMsg"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Unmarshal">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Marshal">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="ident" def="truncatingMAC"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sum">
          <recvList>
            <type type="ident" def="truncatingMAC"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="ident" def="truncatingMAC"/>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Size">
          <recvList>
            <type type="ident" def="truncatingMAC"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="BlockSize">
          <recvList>
            <type type="ident" def="truncatingMAC"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="ParseAuthorizedKey">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="PublicKey"/>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ParsePublicKey">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="PublicKey"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalAuthorizedKey">
          <recvList/>
          <paramsList>
            <type type="ident" def="PublicKey"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Marshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Verify">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PublicKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPrivateKey"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="PublicKey"/>
          </resultsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="rsaPrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dsaPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Marshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dsaPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Verify">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dsaPublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PublicKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dsaPrivateKey"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="PublicKey"/>
          </resultsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dsaPrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecdsaPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Marshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecdsaPublicKey"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Verify">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecdsaPublicKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PublicKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecdsaPrivateKey"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="PublicKey"/>
          </resultsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecdsaPrivateKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewSignerFromKey">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Signer"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewPublicKey">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="PublicKey"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ParsePrivateKey">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Signer"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ParseRawPrivateKey">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="interface"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ParseDSAPrivateKey">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="dsa"/>
                <item value="PrivateKey"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Client">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dhGroup"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="packetConn"/>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="pointer">
              <type type="ident" def="handshakeMagics"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="kexResult"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Server">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dhGroup"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="packetConn"/>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="pointer">
              <type type="ident" def="handshakeMagics"/>
            </type>
            <type type="ident" def="Signer"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="kexResult"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Client">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecdh"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="packetConn"/>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="pointer">
              <type type="ident" def="handshakeMagics"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="kexResult"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Server">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ecdh"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="packetConn"/>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="pointer">
              <type type="ident" def="handshakeMagics"/>
            </type>
            <type type="ident" def="Signer"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="kexResult"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="handshakeTransport"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OpenChannelError"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="DiscardRequests">
          <recvList/>
          <paramsList>
            <type type="channel" dir="2">
              <type type="pointer">
                <type type="ident" def="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="connection"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="User">
          <recvList>
            <type type="pointer">
              <type type="ident" def="sshConn"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="RemoteAddr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="sshConn"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Addr"/>
            </type>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="sshConn"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="LocalAddr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="sshConn"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Addr"/>
            </type>
          </resultsList>
        </function>
        <function name="SessionID">
          <recvList>
            <type type="pointer">
              <type type="ident" def="sshConn"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="ClientVersion">
          <recvList>
            <type type="pointer">
              <type type="ident" def="sshConn"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="ServerVersion">
          <recvList>
            <type type="pointer">
              <type type="ident" def="sshConn"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="SetDefaults">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Config"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Password">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="AuthMethod"/>
          </resultsList>
        </function>
        <function name="PasswordCallback">
          <recvList/>
          <paramsList>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="string"/>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="AuthMethod"/>
          </resultsList>
        </function>
        <function name="PublicKeys">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="Signer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="AuthMethod"/>
          </resultsList>
        </function>
        <function name="PublicKeysCallback">
          <recvList/>
          <paramsList>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="slice">
                  <elmtype type="ident" def="Signer"/>
                </type>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="AuthMethod"/>
          </resultsList>
        </function>
        <function name="KeyboardInteractive">
          <recvList/>
          <paramsList>
            <type type="ident" def="KeyboardInteractiveChallenge"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="AuthMethod"/>
          </resultsList>
        </function>
        <function name="HandleChannelOpen">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="channel" dir="2">
              <type type="ident" def="NewChannel"/>
            </type>
          </resultsList>
        </function>
        <function name="NewClient">
          <recvList/>
          <paramsList>
            <type type="ident" def="Conn"/>
            <type type="channel" dir="2">
              <type type="ident" def="NewChannel"/>
            </type>
            <type type="channel" dir="2">
              <type type="pointer">
                <type type="ident" def="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </resultsList>
        </function>
        <function name="NewClientConn">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Conn"/>
            </type>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="ClientConfig"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Conn"/>
            <type type="channel" dir="2">
              <type type="ident" def="NewChannel"/>
            </type>
            <type type="channel" dir="2">
              <type type="pointer">
                <type type="ident" def="Request"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewSession">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Session"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Dial">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="ClientConfig"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Client"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="XORKeyStream">
          <recvList>
            <type type="ident" def="noneCipher"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Reply">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Request"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="bool"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="RejectionReason"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="WriteExtended">
          <recvList>
            <type type="pointer">
              <type type="ident" def="channel"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="uint32"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadExtended">
          <recvList>
            <type type="pointer">
              <type type="ident" def="channel"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="uint32"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="extChannel"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="extChannel"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Accept">
          <recvList>
            <type type="pointer">
              <type type="ident" def="channel"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Channel"/>
            <type type="channel" dir="2">
              <type type="pointer">
                <type type="ident" def="Request"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Reject">
          <recvList>
            <type type="pointer">
              <type type="ident" def="channel"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="RejectionReason"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="channel"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="channel"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CloseWrite">
          <recvList>
            <type type="pointer">
              <type type="ident" def="channel"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="channel"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Extended">
          <recvList>
            <type type="pointer">
              <type type="ident" def="channel"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint32"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="ReadWriter"/>
            </type>
          </resultsList>
        </function>
        <function name="Stderr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="channel"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="ReadWriter"/>
            </type>
          </resultsList>
        </function>
        <function name="SendRequest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="channel"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="bool"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ChannelType">
          <recvList>
            <type type="pointer">
              <type type="ident" def="channel"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ExtraData">
          <recvList>
            <type type="pointer">
              <type type="ident" def="channel"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="NewCertSigner">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Certificate"/>
            </type>
            <type type="ident" def="Signer"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Signer"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="openSSHCertSigner"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PublicKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="openSSHCertSigner"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="PublicKey"/>
          </resultsList>
        </function>
        <function name="CheckHostKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CertChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="net"/>
              <item value="Addr"/>
            </type>
            <type type="ident" def="PublicKey"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Authenticate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CertChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="ConnMetadata"/>
            <type type="ident" def="PublicKey"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Permissions"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CheckCert">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CertChecker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="Certificate"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SignCert">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Certificate"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="Signer"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Marshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Certificate"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Certificate"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Verify">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Certificate"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Signature"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="SIGABRT"/>
        <name value="SIGALRM"/>
        <name value="SIGFPE"/>
        <name value="SIGHUP"/>
        <name value="SIGILL"/>
        <name value="SIGINT"/>
        <name value="SIGKILL"/>
        <name value="SIGPIPE"/>
        <name value="SIGQUIT"/>
        <name value="SIGSEGV"/>
        <name value="SIGTERM"/>
        <name value="SIGUSR1"/>
        <name value="SIGUSR2"/>
        <name value="VINTR"/>
        <name value="VQUIT"/>
        <name value="VERASE"/>
        <name value="VKILL"/>
        <name value="VEOF"/>
        <name value="VEOL"/>
        <name value="VEOL2"/>
        <name value="VSTART"/>
        <name value="VSTOP"/>
        <name value="VSUSP"/>
        <name value="VDSUSP"/>
        <name value="VREPRINT"/>
        <name value="VWERASE"/>
        <name value="VLNEXT"/>
        <name value="VFLUSH"/>
        <name value="VSWTCH"/>
        <name value="VSTATUS"/>
        <name value="VDISCARD"/>
        <name value="IGNPAR"/>
        <name value="PARMRK"/>
        <name value="INPCK"/>
        <name value="ISTRIP"/>
        <name value="INLCR"/>
        <name value="IGNCR"/>
        <name value="ICRNL"/>
        <name value="IUCLC"/>
        <name value="IXON"/>
        <name value="IXANY"/>
        <name value="IXOFF"/>
        <name value="IMAXBEL"/>
        <name value="ISIG"/>
        <name value="ICANON"/>
        <name value="XCASE"/>
        <name value="ECHO"/>
        <name value="ECHOE"/>
        <name value="ECHOK"/>
        <name value="ECHONL"/>
        <name value="NOFLSH"/>
        <name value="TOSTOP"/>
        <name value="IEXTEN"/>
        <name value="ECHOCTL"/>
        <name value="ECHOKE"/>
        <name value="PENDIN"/>
        <name value="OPOST"/>
        <name value="OLCUC"/>
        <name value="ONLCR"/>
        <name value="OCRNL"/>
        <name value="ONOCR"/>
        <name value="ONLRET"/>
        <name value="CS7"/>
        <name value="CS8"/>
        <name value="PARENB"/>
        <name value="PARODD"/>
        <name value="TTY_OP_ISPEED"/>
        <name value="TTY_OP_OSPEED"/>
        <name value="KeyAlgoRSA"/>
        <name value="KeyAlgoDSA"/>
        <name value="KeyAlgoECDSA256"/>
        <name value="KeyAlgoECDSA384"/>
        <name value="KeyAlgoECDSA521"/>
        <name value="Prohibited"/>
        <name value="ConnectionFailed"/>
        <name value="UnknownChannelType"/>
        <name value="ResourceShortage"/>
        <name value="CertAlgoRSAv01"/>
        <name value="CertAlgoDSAv01"/>
        <name value="CertAlgoECDSA256v01"/>
        <name value="CertAlgoECDSA384v01"/>
        <name value="CertAlgoECDSA521v01"/>
        <name value="UserCert"/>
        <name value="HostCert"/>
        <name value="CertTimeInfinity"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/bcrypt">
      <types>
        <type name="HashVersionTooNewError" type="ident">
          <type type="ident" def="byte"/>
        </type>
        <type name="InvalidHashPrefixError" type="ident">
          <type type="ident" def="byte"/>
        </type>
        <type name="InvalidCostError" type="ident">
          <type type="ident" def="int"/>
        </type>
      </types>
      <functions>
        <function name="Error">
          <recvList>
            <type type="ident" def="HashVersionTooNewError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="InvalidHashPrefixError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="InvalidCostError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GenerateFromPassword">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CompareHashAndPassword">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Cost">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Hash">
          <recvList>
            <type type="pointer">
              <type type="ident" def="hashed"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="hashed"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="MinCost"/>
        <name value="MaxCost"/>
        <name value="DefaultCost"/>
        <name value="ErrMismatchedHashAndPassword"/>
        <name value="ErrHashTooShort"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/xts">
      <types>
        <type type="struct" name="Cipher">
          <field type="selector" name="k1">
            <prefix value="cipher"/>
            <item value="Block"/>
          </field>
          <field type="selector" name="k2">
            <prefix value="cipher"/>
            <item value="Block"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewCipher">
          <recvList/>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
              </paramsList>
              <resultsList>
                <type type="selector">
                  <prefix value="cipher"/>
                  <item value="Block"/>
                </type>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Encrypt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Decrypt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cipher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/crypto/ripemd160">
      <types/>
      <functions>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="digest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="New">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="hash"/>
              <item value="Hash"/>
            </type>
          </resultsList>
        </function>
        <function name="Size">
          <recvList>
            <type type="pointer">
              <type type="ident" def="digest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="BlockSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="digest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="digest"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sum">
          <recvList>
            <type type="pointer">
              <type type="ident" def="digest"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Size"/>
        <name value="BlockSize"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/openpgp/clearsign">
      <types>
        <type type="struct" name="Block">
          <field type="selector" name="Headers">
            <prefix value="textproto"/>
            <item value="MIMEHeader"/>
          </field>
          <field type="slice" name="Plaintext">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="Bytes">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="pointer" name="ArmoredSignature">
            <type type="selector">
              <prefix value="armor"/>
              <item value="Block"/>
            </type>
          </field>
        </type>
      </types>
      <functions>
        <function name="Decode">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Block"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dashEscaper"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dashEscaper"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Encode">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="packet"/>
                <item value="PrivateKey"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="packet"/>
                <item value="Config"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="WriteCloser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/crypto/ssh/agent">
      <types>
        <type name="Agent" type="interface">
          <method name="List">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="pointer">
                  <type type="ident" def="Key"/>
                </elmtype>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Sign">
            <paramsList>
              <type type="selector">
                <prefix value="ssh"/>
                <item value="PublicKey"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="ssh"/>
                  <item value="Signature"/>
                </type>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Add">
            <paramsList>
              <type type="interface"/>
              <type type="pointer">
                <type type="selector">
                  <prefix value="ssh"/>
                  <item value="Certificate"/>
                </type>
              </type>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Remove">
            <paramsList>
              <type type="selector">
                <prefix value="ssh"/>
                <item value="PublicKey"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="RemoveAll">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Lock">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Unlock">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Signers">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="selector">
                  <prefix value="ssh"/>
                  <item value="Signer"/>
                </elmtype>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Key">
          <field type="ident" def="string" name="Format"/>
          <field type="slice" name="Blob">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="string" name="Comment"/>
        </type>
      </types>
      <functions>
        <function name="ServeAgent">
          <recvList/>
          <paramsList>
            <type type="ident" def="Agent"/>
            <type type="selector">
              <prefix value="io"/>
              <item value="ReadWriter"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewKeyring">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Agent"/>
          </resultsList>
        </function>
        <function name="RemoveAll">
          <recvList>
            <type type="pointer">
              <type type="ident" def="keyring"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Remove">
          <recvList>
            <type type="pointer">
              <type type="ident" def="keyring"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="ssh"/>
              <item value="PublicKey"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Lock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="keyring"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Unlock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="keyring"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="List">
          <recvList>
            <type type="pointer">
              <type type="ident" def="keyring"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Key"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="keyring"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="ssh"/>
                <item value="Certificate"/>
              </type>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="keyring"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="ssh"/>
              <item value="PublicKey"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ssh"/>
                <item value="Signature"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Signers">
          <recvList>
            <type type="pointer">
              <type type="ident" def="keyring"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="ssh"/>
                <item value="Signer"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RequestAgentForwarding">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ssh"/>
                <item value="Session"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ForwardToAgent">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ssh"/>
                <item value="Client"/>
              </type>
            </type>
            <type type="ident" def="Agent"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ForwardToRemote">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ssh"/>
                <item value="Client"/>
              </type>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Key"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Key"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Marshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Key"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Verify">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Key"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="ssh"/>
                <item value="Signature"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewClient">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="ReadWriter"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Agent"/>
          </resultsList>
        </function>
        <function name="RemoveAll">
          <recvList>
            <type type="pointer">
              <type type="ident" def="client"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Remove">
          <recvList>
            <type type="pointer">
              <type type="ident" def="client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="ssh"/>
              <item value="PublicKey"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Lock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Unlock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="List">
          <recvList>
            <type type="pointer">
              <type type="ident" def="client"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Key"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="ssh"/>
              <item value="PublicKey"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ssh"/>
                <item value="Signature"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="client"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="ssh"/>
                <item value="Certificate"/>
              </type>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Signers">
          <recvList>
            <type type="pointer">
              <type type="ident" def="client"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="ssh"/>
                <item value="Signer"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PublicKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="agentKeyringSigner"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="ssh"/>
              <item value="PublicKey"/>
            </type>
          </resultsList>
        </function>
        <function name="Sign">
          <recvList>
            <type type="pointer">
              <type type="ident" def="agentKeyringSigner"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="ssh"/>
                <item value="Signature"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/crypto/bn256">
      <types>
        <type type="struct" name="G1">
          <field type="pointer" name="p">
            <type type="ident" def="curvePoint"/>
          </field>
        </type>
        <type type="struct" name="G2">
          <field type="pointer" name="p">
            <type type="ident" def="twistPoint"/>
          </field>
        </type>
        <type type="struct" name="GT">
          <field type="pointer" name="p">
            <type type="ident" def="gfP12"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Set">
          <recvList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="IsOnCurve">
          <recvList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="SetInfinity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="IsInfinity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Double">
          <recvList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Mul">
          <recvList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
          </resultsList>
        </function>
        <function name="MakeAffine">
          <recvList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
          </resultsList>
        </function>
        <function name="Negative">
          <recvList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="twistPoint"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Set">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </resultsList>
        </function>
        <function name="SetZero">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </resultsList>
        </function>
        <function name="SetOne">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </resultsList>
        </function>
        <function name="Minimal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="IsZero">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="IsOne">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Negative">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </resultsList>
        </function>
        <function name="Frobenius">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </resultsList>
        </function>
        <function name="FrobeniusP2">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </resultsList>
        </function>
        <function name="Sub">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </resultsList>
        </function>
        <function name="Double">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </resultsList>
        </function>
        <function name="Mul">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </resultsList>
        </function>
        <function name="MulScalar">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </resultsList>
        </function>
        <function name="MulGFP">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </resultsList>
        </function>
        <function name="MulTau">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Square">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </resultsList>
        </function>
        <function name="Invert">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Set">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </resultsList>
        </function>
        <function name="SetZero">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </resultsList>
        </function>
        <function name="SetOne">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </resultsList>
        </function>
        <function name="Minimal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="IsZero">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="IsOne">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Conjugate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </resultsList>
        </function>
        <function name="Negative">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </resultsList>
        </function>
        <function name="Sub">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </resultsList>
        </function>
        <function name="Double">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </resultsList>
        </function>
        <function name="Exp">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </resultsList>
        </function>
        <function name="Mul">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </resultsList>
        </function>
        <function name="MulScalar">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </resultsList>
        </function>
        <function name="MulXi">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </resultsList>
        </function>
        <function name="Square">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </resultsList>
        </function>
        <function name="Invert">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP2"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Set">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </resultsList>
        </function>
        <function name="SetZero">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </resultsList>
        </function>
        <function name="SetOne">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </resultsList>
        </function>
        <function name="Minimal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="IsZero">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="IsOne">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Conjugate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </resultsList>
        </function>
        <function name="Negative">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </resultsList>
        </function>
        <function name="Frobenius">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </resultsList>
        </function>
        <function name="FrobeniusP2">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </resultsList>
        </function>
        <function name="Sub">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </resultsList>
        </function>
        <function name="Mul">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </resultsList>
        </function>
        <function name="MulScalar">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
            <type type="pointer">
              <type type="ident" def="gfP6"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </resultsList>
        </function>
        <function name="Exp">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </resultsList>
        </function>
        <function name="Square">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </resultsList>
        </function>
        <function name="Invert">
          <recvList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="gfP12"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Set">
          <recvList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="IsOnCurve">
          <recvList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="SetInfinity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="IsInfinity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Double">
          <recvList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Mul">
          <recvList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
          </resultsList>
        </function>
        <function name="MakeAffine">
          <recvList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
          </resultsList>
        </function>
        <function name="Negative">
          <recvList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="curvePoint"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RandomG1">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ScalarBaseMult">
          <recvList>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
          </resultsList>
        </function>
        <function name="ScalarMult">
          <recvList>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
          </resultsList>
        </function>
        <function name="Neg">
          <recvList>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
          </resultsList>
        </function>
        <function name="Marshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Unmarshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="RandomG2">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
            <type type="pointer">
              <type type="ident" def="G2"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="G2"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ScalarBaseMult">
          <recvList>
            <type type="pointer">
              <type type="ident" def="G2"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="G2"/>
            </type>
          </resultsList>
        </function>
        <function name="ScalarMult">
          <recvList>
            <type type="pointer">
              <type type="ident" def="G2"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="G2"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="G2"/>
            </type>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="G2"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="G2"/>
            </type>
            <type type="pointer">
              <type type="ident" def="G2"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="G2"/>
            </type>
          </resultsList>
        </function>
        <function name="Marshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="G2"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Unmarshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="G2"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="G2"/>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GT"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ScalarMult">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GT"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="GT"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GT"/>
            </type>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GT"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="GT"/>
            </type>
            <type type="pointer">
              <type type="ident" def="GT"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GT"/>
            </type>
          </resultsList>
        </function>
        <function name="Neg">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GT"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="GT"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GT"/>
            </type>
          </resultsList>
        </function>
        <function name="Marshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GT"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Unmarshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GT"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GT"/>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Pair">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="G1"/>
            </type>
            <type type="pointer">
              <type type="ident" def="G2"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GT"/>
            </type>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="big"/>
                <item value="Int"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Count">
          <recvList>
            <type type="pointer">
              <type type="ident" def="bnPool"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Order"/>
      </names>
    </package>
    <package importpath="golang.org/x/crypto/ssh/test">
      <types/>
      <functions/>
      <names/>
    </package>
    <package importpath="golang.org/x/crypto/openpgp">
      <types>
        <type type="struct" name="FileHints">
          <field type="ident" def="bool" name="IsBinary"/>
          <field type="ident" def="string" name="FileName"/>
          <field type="selector" name="ModTime">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
        </type>
        <type type="struct" name="MessageDetails">
          <field type="ident" def="bool" name="IsEncrypted"/>
          <field type="slice" name="EncryptedToKeyIds">
            <elmtype type="ident" def="uint64"/>
          </field>
          <field type="ident" def="bool" name="IsSymmetricallyEncrypted"/>
          <field type="ident" def="Key" name="DecryptedWith"/>
          <field type="ident" def="bool" name="IsSigned"/>
          <field type="ident" def="uint64" name="SignedByKeyId"/>
          <field type="pointer" name="SignedBy">
            <type type="ident" def="Key"/>
          </field>
          <field type="pointer" name="LiteralData">
            <type type="selector">
              <prefix value="packet"/>
              <item value="LiteralData"/>
            </type>
          </field>
          <field type="selector" name="UnverifiedBody">
            <prefix value="io"/>
            <item value="Reader"/>
          </field>
          <field type="ident" def="error" name="SignatureError"/>
          <field type="pointer" name="Signature">
            <type type="selector">
              <prefix value="packet"/>
              <item value="Signature"/>
            </type>
          </field>
          <field type="selector" name="decrypted">
            <prefix value="io"/>
            <item value="ReadCloser"/>
          </field>
        </type>
        <type name="PromptFunction" type="func">
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="Key"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </type>
        <type type="struct" name="Entity">
          <field type="pointer" name="PrimaryKey">
            <type type="selector">
              <prefix value="packet"/>
              <item value="PublicKey"/>
            </type>
          </field>
          <field type="pointer" name="PrivateKey">
            <type type="selector">
              <prefix value="packet"/>
              <item value="PrivateKey"/>
            </type>
          </field>
          <field type="map" name="Identities">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="Identity"/>
            </valtype>
          </field>
          <field type="slice" name="Revocations">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="packet"/>
                <item value="Signature"/>
              </type>
            </elmtype>
          </field>
          <field type="slice" name="Subkeys">
            <elmtype type="ident" def="Subkey"/>
          </field>
        </type>
        <type type="struct" name="Identity">
          <field type="ident" def="string" name="Name"/>
          <field type="pointer" name="UserId">
            <type type="selector">
              <prefix value="packet"/>
              <item value="UserId"/>
            </type>
          </field>
          <field type="pointer" name="SelfSignature">
            <type type="selector">
              <prefix value="packet"/>
              <item value="Signature"/>
            </type>
          </field>
          <field type="slice" name="Signatures">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="packet"/>
                <item value="Signature"/>
              </type>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="Subkey">
          <field type="pointer" name="PublicKey">
            <type type="selector">
              <prefix value="packet"/>
              <item value="PublicKey"/>
            </type>
          </field>
          <field type="pointer" name="PrivateKey">
            <type type="selector">
              <prefix value="packet"/>
              <item value="PrivateKey"/>
            </type>
          </field>
          <field type="pointer" name="Sig">
            <type type="selector">
              <prefix value="packet"/>
              <item value="Signature"/>
            </type>
          </field>
        </type>
        <type type="struct" name="Key">
          <field type="pointer" name="Entity">
            <type type="ident" def="Entity"/>
          </field>
          <field type="pointer" name="PublicKey">
            <type type="selector">
              <prefix value="packet"/>
              <item value="PublicKey"/>
            </type>
          </field>
          <field type="pointer" name="PrivateKey">
            <type type="selector">
              <prefix value="packet"/>
              <item value="PrivateKey"/>
            </type>
          </field>
          <field type="pointer" name="SelfSignature">
            <type type="selector">
              <prefix value="packet"/>
              <item value="Signature"/>
            </type>
          </field>
        </type>
        <type name="KeyRing" type="interface">
          <method name="KeysById">
            <paramsList>
              <type type="ident" def="uint64"/>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="Key"/>
              </type>
            </resultsList>
          </method>
          <method name="KeysByIdUsage">
            <paramsList>
              <type type="ident" def="uint64"/>
              <type type="ident" def="byte"/>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="Key"/>
              </type>
            </resultsList>
          </method>
          <method name="DecryptionKeys">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="Key"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="EntityList" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="Entity"/>
          </elmtype>
        </type>
      </types>
      <functions>
        <function name="DetachSign">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Entity"/>
            </type>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="packet"/>
                <item value="Config"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ArmoredDetachSign">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Entity"/>
            </type>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="packet"/>
                <item value="Config"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DetachSignText">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Entity"/>
            </type>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="packet"/>
                <item value="Config"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ArmoredDetachSignText">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="ident" def="Entity"/>
            </type>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="packet"/>
                <item value="Config"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SymmetricallyEncrypt">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="ident" def="FileHints"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="packet"/>
                <item value="Config"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="WriteCloser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Encrypt">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Entity"/>
              </elmtype>
            </type>
            <type type="pointer">
              <type type="ident" def="Entity"/>
            </type>
            <type type="pointer">
              <type type="ident" def="FileHints"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="packet"/>
                <item value="Config"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="WriteCloser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="ident" def="signatureWriter"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="signatureWriter"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="ident" def="noOpCloser"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="noOpCloser"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadMessage">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="KeyRing"/>
            <type type="ident" def="PromptFunction"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="packet"/>
                <item value="Config"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="MessageDetails"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="ident" def="checkReader"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="signatureCheckReader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CheckDetachedSignature">
          <recvList/>
          <paramsList>
            <type type="ident" def="KeyRing"/>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Entity"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CheckArmoredDetachedSignature">
          <recvList/>
          <paramsList>
            <type type="ident" def="KeyRing"/>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Entity"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="KeysById">
          <recvList>
            <type type="ident" def="EntityList"/>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Key"/>
            </type>
          </resultsList>
        </function>
        <function name="KeysByIdUsage">
          <recvList>
            <type type="ident" def="EntityList"/>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="byte"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Key"/>
            </type>
          </resultsList>
        </function>
        <function name="DecryptionKeys">
          <recvList>
            <type type="ident" def="EntityList"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Key"/>
            </type>
          </resultsList>
        </function>
        <function name="ReadArmoredKeyRing">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="EntityList"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadKeyRing">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="EntityList"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadEntity">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="packet"/>
                <item value="Reader"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Entity"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewEntity">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="packet"/>
                <item value="Config"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Entity"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SerializePrivate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entity"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="packet"/>
                <item value="Config"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Serialize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entity"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SignIdentity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Entity"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="ident" def="Entity"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="packet"/>
                <item value="Config"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewCanonicalTextHash">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="hash"/>
              <item value="Hash"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="hash"/>
              <item value="Hash"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="canonicalTextHash"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sum">
          <recvList>
            <type type="pointer">
              <type type="ident" def="canonicalTextHash"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="canonicalTextHash"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Size">
          <recvList>
            <type type="pointer">
              <type type="ident" def="canonicalTextHash"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="BlockSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="canonicalTextHash"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="SignatureType"/>
        <name value="PublicKeyType"/>
        <name value="PrivateKeyType"/>
      </names>
    </package>
  </packages>
  <imports>
    <import path="crypto/cipher"/>
    <import path="errors"/>
    <import path="strconv"/>
    <import path="bufio"/>
    <import path="io"/>
    <import path="fmt"/>
    <import path="math/rand"/>
    <import path="net"/>
    <import path="strings"/>
    <import path="sync"/>
    <import path="time"/>
    <import path="bytes"/>
    <import path="io/ioutil"/>
    <import path="encoding/binary"/>
    <import path="log"/>
    <import path="sync/atomic"/>
    <import path="math/big"/>
    <import path="reflect"/>
    <import path="crypto/hmac"/>
    <import path="crypto/sha1"/>
    <import path="hash"/>
    <import path="crypto"/>
    <import path="crypto/dsa"/>
    <import path="crypto/ecdsa"/>
    <import path="crypto/elliptic"/>
    <import path="crypto/rsa"/>
    <import path="crypto/x509"/>
    <import path="encoding/asn1"/>
    <import path="encoding/base64"/>
    <import path="encoding/pem"/>
    <import path="crypto/rand"/>
    <import path="crypto/sha256"/>
    <import path="crypto/sha512"/>
    <import path="crypto/aes"/>
    <import path="crypto/rc4"/>
    <import path="crypto/subtle"/>
    <import path="sort"/>
    <import path="syscall"/>
    <import path="unsafe"/>
    <import path="unicode/utf8"/>
    <import path="golang.org/x/crypto/ssh"/>
    <import path="golang.org/x/crypto/pbkdf2"/>
    <import path="golang.org/x/crypto/salsa20/salsa"/>
    <import path="math"/>
    <import path="encoding/hex"/>
    <import path="golang.org/x/crypto/openpgp/armor"/>
    <import path="golang.org/x/crypto/openpgp/errors"/>
    <import path="golang.org/x/crypto/openpgp/packet"/>
    <import path="golang.org/x/crypto/openpgp/s2k"/>
    <import path="image"/>
    <import path="image/jpeg"/>
    <import path="crypto/md5"/>
    <import path="golang.org/x/crypto/openpgp/elgamal"/>
    <import path="crypto/des"/>
    <import path="golang.org/x/crypto/cast5"/>
    <import path="compress/bzip2"/>
    <import path="compress/flate"/>
    <import path="compress/zlib"/>
    <import path="net/textproto"/>
    <import path="crypto/x509/pkix"/>
    <import path="golang.org/x/crypto/poly1305"/>
    <import path="golang.org/x/crypto/curve25519"/>
    <import path="golang.org/x/crypto/nacl/secretbox"/>
    <import path="golang.org/x/crypto/blowfish"/>
  </imports>
</project>
