<?xml version='1.0' encoding='ASCII'?>
<project ipprefix="" commit="commit" nvr="golang-github-BurntSushi-toml-0-0.4.git2ceedfe.fc24">
  <packages>
    <package importpath="github.com/BurntSushi/toml">
      <types>
        <type name="TextMarshaler" type="interface">
          <method name="MarshalText">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="TextUnmarshaler" type="interface">
          <method name="UnmarshalText">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="TextMarshaler" type="selector">
          <prefix value="encoding"/>
          <item value="TextMarshaler"/>
        </type>
        <type name="TextUnmarshaler" type="selector">
          <prefix value="encoding"/>
          <item value="TextUnmarshaler"/>
        </type>
        <type type="struct" name="Encoder">
          <field type="ident" def="string" name="Indent"/>
          <field type="ident" def="bool" name="hasWritten"/>
          <field type="pointer" name="w">
            <type type="selector">
              <prefix value="bufio"/>
              <item value="Writer"/>
            </type>
          </field>
        </type>
        <type type="struct" name="MetaData">
          <field type="map" name="mapping">
            <keytype type="ident" def="string"/>
            <valtype type="interface"/>
          </field>
          <field type="map" name="types">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="tomlType"/>
          </field>
          <field type="slice" name="keys">
            <elmtype type="ident" def="Key"/>
          </field>
          <field type="map" name="decoded">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="bool"/>
          </field>
          <field type="ident" def="Key" name="context"/>
        </type>
        <type name="Key" type="slice">
          <elmtype type="ident" def="string"/>
        </type>
        <type type="struct" name="Primitive">
          <field type="interface" name="undecoded"/>
          <field type="ident" def="Key" name="context"/>
        </type>
      </types>
      <functions>
        <function name="Len">
          <recvList>
            <type type="ident" def="byName"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byName"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="byIndex"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="byIndex"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="byIndex"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="tomlBaseType"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="parseError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="itemType"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="item"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewEncoder">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Encoder"/>
            </type>
          </resultsList>
        </function>
        <function name="Encode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Encoder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="IsDefined">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetaData"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetaData"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Key"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Keys">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetaData"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Key"/>
            </type>
          </resultsList>
        </function>
        <function name="Undecoded">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetaData"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Key"/>
            </type>
          </resultsList>
        </function>
        <function name="PrimitiveDecode">
          <recvList/>
          <paramsList>
            <type type="ident" def="Primitive"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PrimitiveDecode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetaData"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Primitive"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Decode">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="MetaData"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodeFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="MetaData"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodeReader">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="MetaData"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
  </packages>
  <imports>
    <import path="reflect"/>
    <import path="sort"/>
    <import path="sync"/>
    <import path="fmt"/>
    <import path="log"/>
    <import path="strconv"/>
    <import path="strings"/>
    <import path="time"/>
    <import path="unicode/utf8"/>
    <import path="encoding"/>
    <import path="bufio"/>
    <import path="errors"/>
    <import path="io"/>
    <import path="io/ioutil"/>
    <import path="math"/>
    <import path="flag"/>
    <import path="os"/>
    <import path="path"/>
    <import path="text/tabwriter"/>
    <import path="github.com/BurntSushi/toml"/>
    <import path="encoding/json"/>
  </imports>
</project>
