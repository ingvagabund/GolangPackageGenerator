<?xml version='1.0' encoding='ASCII'?>
<project ipprefix="" commit="commit" nvr="golang-github-prometheus-client_golang-0.6.0-2.fc24">
  <packages>
    <package importpath="github.com/prometheus/client_golang/extraction">
      <types>
        <type type="struct" name="ProcessOptions">
          <field type="selector" name="Timestamp">
            <prefix value="model"/>
            <item value="Timestamp"/>
          </field>
        </type>
        <type name="Ingester" type="interface">
          <method name="Ingest">
            <paramsList>
              <type type="selector">
                <prefix value="model"/>
                <item value="Samples"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Processor" type="interface">
          <method name="ProcessSingle">
            <paramsList>
              <type type="selector">
                <prefix value="io"/>
                <item value="Reader"/>
              </type>
              <type type="ident" def="Ingester"/>
              <type type="pointer">
                <type type="ident" def="ProcessOptions"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="ProcessSingle">
          <recvList>
            <type type="pointer">
              <type type="ident" def="processor004"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="Ingester"/>
            <type type="pointer">
              <type type="ident" def="ProcessOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ProcessSingle">
          <recvList>
            <type type="pointer">
              <type type="ident" def="processor002"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="Ingester"/>
            <type type="pointer">
              <type type="ident" def="ProcessOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ProcessSingle">
          <recvList>
            <type type="pointer">
              <type type="ident" def="processor001"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="Ingester"/>
            <type type="pointer">
              <type type="ident" def="ProcessOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Now">
          <recvList>
            <type type="pointer">
              <type type="ident" def="clock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </resultsList>
        </function>
        <function name="ProcessSingle">
          <recvList>
            <type type="pointer">
              <type type="ident" def="metricFamilyProcessor"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="Ingester"/>
            <type type="pointer">
              <type type="ident" def="ProcessOptions"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ProcessorForRequestHeader">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="Header"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Processor"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Processor004"/>
        <name value="Processor002"/>
        <name value="Processor001"/>
        <name value="MetricFamilyProcessor"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/client_golang/prometheus">
      <types>
        <type type="struct" name="MetricVec">
          <field type="selector" name="mtx">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="map" name="children">
            <keytype type="ident" def="uint64"/>
            <valtype type="ident" def="Metric"/>
          </field>
          <field type="pointer" name="desc">
            <type type="ident" def="Desc"/>
          </field>
          <field type="selector" name="hash">
            <prefix value="hash"/>
            <item value="Hash64"/>
          </field>
          <field type="selector" name="buf">
            <prefix value="bytes"/>
            <item value="Buffer"/>
          </field>
          <field type="func" name="newMetric">
            <paramsList>
              <type type="ellipsis">
                <type type="ident" def="string"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="Metric"/>
            </resultsList>
          </field>
        </type>
        <type name="ValueType" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type name="Untyped" type="interface">
          <method name="Set">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Inc">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Dec">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Add">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Sub">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type name="UntypedOpts" type="ident">
          <type type="ident" def="Opts"/>
        </type>
        <type type="struct" name="UntypedVec">
          <field type="ident" def="MetricVec" name=""/>
        </type>
        <type name="UntypedFunc" type="interface"/>
        <type name="Summary" type="interface">
          <method name="Observe">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="SummaryOpts">
          <field type="ident" def="string" name="Namespace"/>
          <field type="ident" def="string" name="Subsystem"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Help"/>
          <field type="ident" def="Labels" name="ConstLabels"/>
          <field type="map" name="Objectives">
            <keytype type="ident" def="float64"/>
            <valtype type="ident" def="float64"/>
          </field>
          <field type="selector" name="MaxAge">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="uint32" name="AgeBuckets"/>
          <field type="ident" def="uint32" name="BufCap"/>
        </type>
        <type type="struct" name="SummaryVec">
          <field type="ident" def="MetricVec" name=""/>
        </type>
        <type name="Metric" type="interface">
          <method name="Desc">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="Desc"/>
              </type>
            </resultsList>
          </method>
          <method name="Write">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="dto"/>
                  <item value="Metric"/>
                </type>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Opts">
          <field type="ident" def="string" name="Namespace"/>
          <field type="ident" def="string" name="Subsystem"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Help"/>
          <field type="ident" def="Labels" name="ConstLabels"/>
        </type>
        <type name="LabelPairSorter" type="slice">
          <elmtype type="pointer">
            <type type="selector">
              <prefix value="dto"/>
              <item value="LabelPair"/>
            </type>
          </elmtype>
        </type>
        <type name="Histogram" type="interface">
          <method name="Observe">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="HistogramOpts">
          <field type="ident" def="string" name="Namespace"/>
          <field type="ident" def="string" name="Subsystem"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Help"/>
          <field type="ident" def="Labels" name="ConstLabels"/>
          <field type="slice" name="Buckets">
            <elmtype type="ident" def="float64"/>
          </field>
        </type>
        <type type="struct" name="HistogramVec">
          <field type="ident" def="MetricVec" name=""/>
        </type>
        <type name="Gauge" type="interface">
          <method name="Set">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Inc">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Dec">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Add">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Sub">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type name="GaugeOpts" type="ident">
          <type type="ident" def="Opts"/>
        </type>
        <type type="struct" name="GaugeVec">
          <field type="ident" def="MetricVec" name=""/>
        </type>
        <type name="GaugeFunc" type="interface"/>
        <type type="struct" name="ExpvarCollector">
          <field type="map" name="exports">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="Desc"/>
            </valtype>
          </field>
        </type>
        <type name="Labels" type="map">
          <keytype type="ident" def="string"/>
          <valtype type="ident" def="string"/>
        </type>
        <type type="struct" name="Desc">
          <field type="ident" def="string" name="fqName"/>
          <field type="ident" def="string" name="help"/>
          <field type="slice" name="constLabelPairs">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="LabelPair"/>
              </type>
            </elmtype>
          </field>
          <field type="slice" name="variableLabels">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="uint64" name="id"/>
          <field type="ident" def="uint64" name="dimHash"/>
          <field type="ident" def="error" name="err"/>
        </type>
        <type name="Counter" type="interface">
          <method name="Set">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Inc">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Add">
            <paramsList>
              <type type="ident" def="float64"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type name="CounterOpts" type="ident">
          <type type="ident" def="Opts"/>
        </type>
        <type type="struct" name="CounterVec">
          <field type="ident" def="MetricVec" name=""/>
        </type>
        <type name="CounterFunc" type="interface"/>
        <type name="Collector" type="interface">
          <method name="Describe">
            <paramsList>
              <type type="channel" dir="1">
                <type type="pointer">
                  <type type="ident" def="Desc"/>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Collect">
            <paramsList>
              <type type="channel" dir="1">
                <type type="ident" def="Metric"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="SelfCollector">
          <field type="ident" def="Metric" name="self"/>
        </type>
      </types>
      <functions>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="ident" def="Desc"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="ident" def="Metric"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetMetricWithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetMetricWith">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
          </resultsList>
        </function>
        <function name="With">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
          </resultsList>
        </function>
        <function name="DeleteLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricVec"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Desc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="value"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="Set">
          <recvList>
            <type type="pointer">
              <type type="ident" def="value"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Inc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="value"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Dec">
          <recvList>
            <type type="pointer">
              <type type="ident" def="value"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="value"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Sub">
          <recvList>
            <type type="pointer">
              <type type="ident" def="value"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="value"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Desc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="valueFunc"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="valueFunc"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewConstMetric">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
            <type type="ident" def="ValueType"/>
            <type type="ident" def="float64"/>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MustNewConstMetric">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
            <type type="ident" def="ValueType"/>
            <type type="ident" def="float64"/>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
          </resultsList>
        </function>
        <function name="Desc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="constMetric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="constMetric"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewUntyped">
          <recvList/>
          <paramsList>
            <type type="ident" def="UntypedOpts"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Untyped"/>
          </resultsList>
        </function>
        <function name="NewUntypedVec">
          <recvList/>
          <paramsList>
            <type type="ident" def="UntypedOpts"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="UntypedVec"/>
            </type>
          </resultsList>
        </function>
        <function name="GetMetricWithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UntypedVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Untyped"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetMetricWith">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UntypedVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Untyped"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UntypedVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Untyped"/>
          </resultsList>
        </function>
        <function name="With">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UntypedVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Untyped"/>
          </resultsList>
        </function>
        <function name="NewUntypedFunc">
          <recvList/>
          <paramsList>
            <type type="ident" def="UntypedOpts"/>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="float64"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="UntypedFunc"/>
          </resultsList>
        </function>
        <function name="NewSummary">
          <recvList/>
          <paramsList>
            <type type="ident" def="SummaryOpts"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Summary"/>
          </resultsList>
        </function>
        <function name="Desc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="summary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="Observe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="summary"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="summary"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="quantSort"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="quantSort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="quantSort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewSummaryVec">
          <recvList/>
          <paramsList>
            <type type="ident" def="SummaryOpts"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="SummaryVec"/>
            </type>
          </resultsList>
        </function>
        <function name="GetMetricWithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SummaryVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Summary"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetMetricWith">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SummaryVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Summary"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SummaryVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Summary"/>
          </resultsList>
        </function>
        <function name="With">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SummaryVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Summary"/>
          </resultsList>
        </function>
        <function name="Desc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="constSummary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="constSummary"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewConstSummary">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
            <type type="ident" def="uint64"/>
            <type type="ident" def="float64"/>
            <type type="map">
              <keytype type="ident" def="float64"/>
              <valtype type="ident" def="float64"/>
            </type>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MustNewConstSummary">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
            <type type="ident" def="uint64"/>
            <type type="ident" def="float64"/>
            <type type="map">
              <keytype type="ident" def="float64"/>
              <valtype type="ident" def="float64"/>
            </type>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
          </resultsList>
        </function>
        <function name="Handler">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="Handler"/>
            </type>
          </resultsList>
        </function>
        <function name="UninstrumentedHandler">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="Handler"/>
            </type>
          </resultsList>
        </function>
        <function name="Register">
          <recvList/>
          <paramsList>
            <type type="ident" def="Collector"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MustRegister">
          <recvList/>
          <paramsList>
            <type type="ident" def="Collector"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RegisterOrGet">
          <recvList/>
          <paramsList>
            <type type="ident" def="Collector"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Collector"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MustRegisterOrGet">
          <recvList/>
          <paramsList>
            <type type="ident" def="Collector"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Collector"/>
          </resultsList>
        </function>
        <function name="Unregister">
          <recvList/>
          <paramsList>
            <type type="ident" def="Collector"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="SetMetricFamilyInjectionHook">
          <recvList/>
          <paramsList>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="slice">
                  <elmtype type="pointer">
                    <type type="selector">
                      <prefix value="dto"/>
                      <item value="MetricFamily"/>
                    </type>
                  </elmtype>
                </type>
              </resultsList>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PanicOnCollectError">
          <recvList/>
          <paramsList>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="EnableCollectChecks">
          <recvList/>
          <paramsList>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Register">
          <recvList>
            <type type="pointer">
              <type type="ident" def="registry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Collector"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Collector"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RegisterOrGet">
          <recvList>
            <type type="pointer">
              <type type="ident" def="registry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Collector"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Collector"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Unregister">
          <recvList>
            <type type="pointer">
              <type type="ident" def="registry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Collector"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Push">
          <recvList>
            <type type="pointer">
              <type type="ident" def="registry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ServeHTTP">
          <recvList>
            <type type="pointer">
              <type type="ident" def="registry"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="ResponseWriter"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="http"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="metricSorter"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="metricSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="metricSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Push">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PushAdd">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PushCollectors">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="ident" def="Collector"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="PushAddCollectors">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="ident" def="Collector"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewProcessCollector">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="processCollector"/>
            </type>
          </resultsList>
        </function>
        <function name="NewProcessCollectorPIDFn">
          <recvList/>
          <paramsList>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="int"/>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="processCollector"/>
            </type>
          </resultsList>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="processCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="ident" def="Desc"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="processCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="ident" def="Metric"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="BuildFQName">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="LabelPairSorter"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="LabelPairSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="LabelPairSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="hashSorter"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="hashSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="hashSorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewInvalidMetric">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
          </resultsList>
        </function>
        <function name="Desc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="invalidMetric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="invalidMetric"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Now">
          <recvList>
            <type type="ident" def="nowFunc"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
          </resultsList>
        </function>
        <function name="InstrumentHandler">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="http"/>
              <item value="Handler"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="InstrumentHandlerFunc">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="func">
              <paramsList>
                <type type="selector">
                  <prefix value="http"/>
                  <item value="ResponseWriter"/>
                </type>
                <type type="pointer">
                  <type type="selector">
                    <prefix value="http"/>
                    <item value="Request"/>
                  </type>
                </type>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="InstrumentHandlerWithOpts">
          <recvList/>
          <paramsList>
            <type type="ident" def="SummaryOpts"/>
            <type type="selector">
              <prefix value="http"/>
              <item value="Handler"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="InstrumentHandlerFuncWithOpts">
          <recvList/>
          <paramsList>
            <type type="ident" def="SummaryOpts"/>
            <type type="func">
              <paramsList>
                <type type="selector">
                  <prefix value="http"/>
                  <item value="ResponseWriter"/>
                </type>
                <type type="pointer">
                  <type type="selector">
                    <prefix value="http"/>
                    <item value="Request"/>
                  </type>
                </type>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="http"/>
              <item value="HandlerFunc"/>
            </type>
          </resultsList>
        </function>
        <function name="WriteHeader">
          <recvList>
            <type type="pointer">
              <type type="ident" def="responseWriterDelegator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="responseWriterDelegator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CloseNotify">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fancyResponseWriterDelegator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="channel" dir="2">
              <type type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="Flush">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fancyResponseWriterDelegator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Hijack">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fancyResponseWriterDelegator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="net"/>
              <item value="Conn"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="bufio"/>
                <item value="ReadWriter"/>
              </type>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadFrom">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fancyResponseWriterDelegator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="LinearBuckets">
          <recvList/>
          <paramsList>
            <type type="ident" def="float64"/>
            <type type="ident" def="float64"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="float64"/>
            </type>
          </resultsList>
        </function>
        <function name="ExponentialBuckets">
          <recvList/>
          <paramsList>
            <type type="ident" def="float64"/>
            <type type="ident" def="float64"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="float64"/>
            </type>
          </resultsList>
        </function>
        <function name="NewHistogram">
          <recvList/>
          <paramsList>
            <type type="ident" def="HistogramOpts"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Histogram"/>
          </resultsList>
        </function>
        <function name="Desc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="histogram"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="Observe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="histogram"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="histogram"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewHistogramVec">
          <recvList/>
          <paramsList>
            <type type="ident" def="HistogramOpts"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="HistogramVec"/>
            </type>
          </resultsList>
        </function>
        <function name="GetMetricWithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HistogramVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Histogram"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetMetricWith">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HistogramVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Histogram"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HistogramVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Histogram"/>
          </resultsList>
        </function>
        <function name="With">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HistogramVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Histogram"/>
          </resultsList>
        </function>
        <function name="Desc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="constHistogram"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="constHistogram"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewConstHistogram">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
            <type type="ident" def="uint64"/>
            <type type="ident" def="float64"/>
            <type type="map">
              <keytype type="ident" def="float64"/>
              <valtype type="ident" def="uint64"/>
            </type>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MustNewConstHistogram">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
            <type type="ident" def="uint64"/>
            <type type="ident" def="float64"/>
            <type type="map">
              <keytype type="ident" def="float64"/>
              <valtype type="ident" def="uint64"/>
            </type>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Metric"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="buckSort"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="buckSort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="buckSort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewGoCollector">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="goCollector"/>
            </type>
          </resultsList>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="goCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="ident" def="Desc"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="goCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="ident" def="Metric"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewGauge">
          <recvList/>
          <paramsList>
            <type type="ident" def="GaugeOpts"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Gauge"/>
          </resultsList>
        </function>
        <function name="NewGaugeVec">
          <recvList/>
          <paramsList>
            <type type="ident" def="GaugeOpts"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GaugeVec"/>
            </type>
          </resultsList>
        </function>
        <function name="GetMetricWithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GaugeVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Gauge"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetMetricWith">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GaugeVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Gauge"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GaugeVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Gauge"/>
          </resultsList>
        </function>
        <function name="With">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GaugeVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Gauge"/>
          </resultsList>
        </function>
        <function name="NewGaugeFunc">
          <recvList/>
          <paramsList>
            <type type="ident" def="GaugeOpts"/>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="float64"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="GaugeFunc"/>
          </resultsList>
        </function>
        <function name="NewExpvarCollector">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="pointer">
                <type type="ident" def="Desc"/>
              </valtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="ExpvarCollector"/>
            </type>
          </resultsList>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ExpvarCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="ident" def="Desc"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ExpvarCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="ident" def="Metric"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewDesc">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="NewInvalidDesc">
          <recvList/>
          <paramsList>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Desc"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewCounter">
          <recvList/>
          <paramsList>
            <type type="ident" def="CounterOpts"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Counter"/>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="counter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewCounterVec">
          <recvList/>
          <paramsList>
            <type type="ident" def="CounterOpts"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CounterVec"/>
            </type>
          </resultsList>
        </function>
        <function name="GetMetricWithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CounterVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Counter"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetMetricWith">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CounterVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Counter"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WithLabelValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CounterVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Counter"/>
          </resultsList>
        </function>
        <function name="With">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CounterVec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Labels"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Counter"/>
          </resultsList>
        </function>
        <function name="NewCounterFunc">
          <recvList/>
          <paramsList>
            <type type="ident" def="CounterOpts"/>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="float64"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="CounterFunc"/>
          </resultsList>
        </function>
        <function name="Init">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SelfCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Metric"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Describe">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SelfCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="pointer">
                <type type="ident" def="Desc"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Collect">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SelfCollector"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="1">
              <type type="ident" def="Metric"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="CounterValue"/>
        <name value="GaugeValue"/>
        <name value="UntypedValue"/>
        <name value="DefObjectives"/>
        <name value="DefMaxAge"/>
        <name value="DefAgeBuckets"/>
        <name value="DefBufCap"/>
        <name value="APIVersion"/>
        <name value="DelimitedTelemetryContentType"/>
        <name value="TextTelemetryContentType"/>
        <name value="ProtoTextTelemetryContentType"/>
        <name value="ProtoCompactTextTelemetryContentType"/>
        <name value="DefBuckets"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/client_golang/Godeps/_workspace/src/bitbucket.org/ww/goautoneg">
      <types>
        <type type="struct" name="Accept">
          <field type="ident" def="string" name="Type"/>
          <field type="ident" def="string" name="SubType"/>
          <field type="ident" def="float64" name="Q"/>
          <field type="map" name="Params">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Len">
          <recvList>
            <type type="ident" def="accept_slice"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="accept_slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="accept_slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ParseAccept">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Accept"/>
            </type>
          </resultsList>
        </function>
        <function name="Negotiate">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/client_golang/Godeps/_workspace/src/github.com/prometheus/client_model/go">
      <types>
        <type name="MetricType" type="ident">
          <type type="ident" def="int32"/>
        </type>
        <type type="struct" name="LabelPair">
          <field type="pointer" name="Name">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Value">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Gauge">
          <field type="pointer" name="Value">
            <type type="ident" def="float64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Counter">
          <field type="pointer" name="Value">
            <type type="ident" def="float64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Quantile">
          <field type="pointer" name="Quantile">
            <type type="ident" def="float64"/>
          </field>
          <field type="pointer" name="Value">
            <type type="ident" def="float64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Summary">
          <field type="pointer" name="SampleCount">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="SampleSum">
            <type type="ident" def="float64"/>
          </field>
          <field type="slice" name="Quantile">
            <elmtype type="pointer">
              <type type="ident" def="Quantile"/>
            </elmtype>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Untyped">
          <field type="pointer" name="Value">
            <type type="ident" def="float64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Histogram">
          <field type="pointer" name="SampleCount">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="SampleSum">
            <type type="ident" def="float64"/>
          </field>
          <field type="slice" name="Bucket">
            <elmtype type="pointer">
              <type type="ident" def="Bucket"/>
            </elmtype>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Bucket">
          <field type="pointer" name="CumulativeCount">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="UpperBound">
            <type type="ident" def="float64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Metric">
          <field type="slice" name="Label">
            <elmtype type="pointer">
              <type type="ident" def="LabelPair"/>
            </elmtype>
          </field>
          <field type="pointer" name="Gauge">
            <type type="ident" def="Gauge"/>
          </field>
          <field type="pointer" name="Counter">
            <type type="ident" def="Counter"/>
          </field>
          <field type="pointer" name="Summary">
            <type type="ident" def="Summary"/>
          </field>
          <field type="pointer" name="Untyped">
            <type type="ident" def="Untyped"/>
          </field>
          <field type="pointer" name="Histogram">
            <type type="ident" def="Histogram"/>
          </field>
          <field type="pointer" name="TimestampMs">
            <type type="ident" def="int64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MetricFamily">
          <field type="pointer" name="Name">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Help">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Type">
            <type type="ident" def="MetricType"/>
          </field>
          <field type="slice" name="Metric">
            <elmtype type="pointer">
              <type type="ident" def="Metric"/>
            </elmtype>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Enum">
          <recvList>
            <type type="ident" def="MetricType"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="MetricType"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="MetricType"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricType"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetValue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelPair"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Gauge"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Gauge"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetValue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Gauge"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Counter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Counter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetValue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Counter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Quantile"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Quantile"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetQuantile">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Quantile"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="GetValue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Quantile"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Summary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Summary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetSampleCount">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Summary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetSampleSum">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Summary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="GetQuantile">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Summary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Quantile"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Untyped"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Untyped"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetValue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Untyped"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Histogram"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Histogram"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetSampleCount">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Histogram"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetSampleSum">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Histogram"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="GetBucket">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Histogram"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Bucket"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Bucket"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Bucket"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetCumulativeCount">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Bucket"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetUpperBound">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Bucket"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetLabel">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="LabelPair"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="GetGauge">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Gauge"/>
            </type>
          </resultsList>
        </function>
        <function name="GetCounter">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Counter"/>
            </type>
          </resultsList>
        </function>
        <function name="GetSummary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Summary"/>
            </type>
          </resultsList>
        </function>
        <function name="GetUntyped">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Untyped"/>
            </type>
          </resultsList>
        </function>
        <function name="GetHistogram">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Histogram"/>
            </type>
          </resultsList>
        </function>
        <function name="GetTimestampMs">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Metric"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricFamily"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricFamily"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricFamily"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetHelp">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricFamily"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetType">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricFamily"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="MetricType"/>
          </resultsList>
        </function>
        <function name="GetMetric">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MetricFamily"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Metric"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="MetricType_COUNTER"/>
        <name value="MetricType_GAUGE"/>
        <name value="MetricType_SUMMARY"/>
        <name value="MetricType_UNTYPED"/>
        <name value="MetricType_HISTOGRAM"/>
        <name value="MetricType_name"/>
        <name value="MetricType_value"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/client_golang/Godeps/_workspace/src/github.com/matttproud/golang_protobuf_extensions/pbutil">
      <types/>
      <functions>
        <function name="WriteDelimited">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="selector">
              <prefix value="proto"/>
              <item value="Message"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadDelimited">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="selector">
              <prefix value="proto"/>
              <item value="Message"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/client_golang/Godeps/_workspace/src/github.com/golang/protobuf/proto/testdata">
      <types>
        <type name="FOO" type="ident">
          <type type="ident" def="int32"/>
        </type>
        <type name="GoTest_KIND" type="ident">
          <type type="ident" def="int32"/>
        </type>
        <type name="MyMessage_Color" type="ident">
          <type type="ident" def="int32"/>
        </type>
        <type name="Defaults_Color" type="ident">
          <type type="ident" def="int32"/>
        </type>
        <type name="RepeatedEnum_Color" type="ident">
          <type type="ident" def="int32"/>
        </type>
        <type type="struct" name="GoEnum">
          <field type="pointer" name="Foo">
            <type type="ident" def="FOO"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GoTestField">
          <field type="pointer" name="Label">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Type">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GoTest">
          <field type="pointer" name="Kind">
            <type type="ident" def="GoTest_KIND"/>
          </field>
          <field type="pointer" name="Table">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Param">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="RequiredField">
            <type type="ident" def="GoTestField"/>
          </field>
          <field type="slice" name="RepeatedField">
            <elmtype type="pointer">
              <type type="ident" def="GoTestField"/>
            </elmtype>
          </field>
          <field type="pointer" name="OptionalField">
            <type type="ident" def="GoTestField"/>
          </field>
          <field type="pointer" name="F_BoolRequired">
            <type type="ident" def="bool"/>
          </field>
          <field type="pointer" name="F_Int32Required">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="F_Int64Required">
            <type type="ident" def="int64"/>
          </field>
          <field type="pointer" name="F_Fixed32Required">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="F_Fixed64Required">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="F_Uint32Required">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="F_Uint64Required">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="F_FloatRequired">
            <type type="ident" def="float32"/>
          </field>
          <field type="pointer" name="F_DoubleRequired">
            <type type="ident" def="float64"/>
          </field>
          <field type="pointer" name="F_StringRequired">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="F_BytesRequired">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="pointer" name="F_Sint32Required">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="F_Sint64Required">
            <type type="ident" def="int64"/>
          </field>
          <field type="slice" name="F_BoolRepeated">
            <elmtype type="ident" def="bool"/>
          </field>
          <field type="slice" name="F_Int32Repeated">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="F_Int64Repeated">
            <elmtype type="ident" def="int64"/>
          </field>
          <field type="slice" name="F_Fixed32Repeated">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="slice" name="F_Fixed64Repeated">
            <elmtype type="ident" def="uint64"/>
          </field>
          <field type="slice" name="F_Uint32Repeated">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="slice" name="F_Uint64Repeated">
            <elmtype type="ident" def="uint64"/>
          </field>
          <field type="slice" name="F_FloatRepeated">
            <elmtype type="ident" def="float32"/>
          </field>
          <field type="slice" name="F_DoubleRepeated">
            <elmtype type="ident" def="float64"/>
          </field>
          <field type="slice" name="F_StringRepeated">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="F_BytesRepeated">
            <elmtype type="slice">
              <elmtype type="ident" def="byte"/>
            </elmtype>
          </field>
          <field type="slice" name="F_Sint32Repeated">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="F_Sint64Repeated">
            <elmtype type="ident" def="int64"/>
          </field>
          <field type="pointer" name="F_BoolOptional">
            <type type="ident" def="bool"/>
          </field>
          <field type="pointer" name="F_Int32Optional">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="F_Int64Optional">
            <type type="ident" def="int64"/>
          </field>
          <field type="pointer" name="F_Fixed32Optional">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="F_Fixed64Optional">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="F_Uint32Optional">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="F_Uint64Optional">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="F_FloatOptional">
            <type type="ident" def="float32"/>
          </field>
          <field type="pointer" name="F_DoubleOptional">
            <type type="ident" def="float64"/>
          </field>
          <field type="pointer" name="F_StringOptional">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="F_BytesOptional">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="pointer" name="F_Sint32Optional">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="F_Sint64Optional">
            <type type="ident" def="int64"/>
          </field>
          <field type="pointer" name="F_BoolDefaulted">
            <type type="ident" def="bool"/>
          </field>
          <field type="pointer" name="F_Int32Defaulted">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="F_Int64Defaulted">
            <type type="ident" def="int64"/>
          </field>
          <field type="pointer" name="F_Fixed32Defaulted">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="F_Fixed64Defaulted">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="F_Uint32Defaulted">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="F_Uint64Defaulted">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="F_FloatDefaulted">
            <type type="ident" def="float32"/>
          </field>
          <field type="pointer" name="F_DoubleDefaulted">
            <type type="ident" def="float64"/>
          </field>
          <field type="pointer" name="F_StringDefaulted">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="F_BytesDefaulted">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="pointer" name="F_Sint32Defaulted">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="F_Sint64Defaulted">
            <type type="ident" def="int64"/>
          </field>
          <field type="slice" name="F_BoolRepeatedPacked">
            <elmtype type="ident" def="bool"/>
          </field>
          <field type="slice" name="F_Int32RepeatedPacked">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="F_Int64RepeatedPacked">
            <elmtype type="ident" def="int64"/>
          </field>
          <field type="slice" name="F_Fixed32RepeatedPacked">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="slice" name="F_Fixed64RepeatedPacked">
            <elmtype type="ident" def="uint64"/>
          </field>
          <field type="slice" name="F_Uint32RepeatedPacked">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="slice" name="F_Uint64RepeatedPacked">
            <elmtype type="ident" def="uint64"/>
          </field>
          <field type="slice" name="F_FloatRepeatedPacked">
            <elmtype type="ident" def="float32"/>
          </field>
          <field type="slice" name="F_DoubleRepeatedPacked">
            <elmtype type="ident" def="float64"/>
          </field>
          <field type="slice" name="F_Sint32RepeatedPacked">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="F_Sint64RepeatedPacked">
            <elmtype type="ident" def="int64"/>
          </field>
          <field type="pointer" name="Requiredgroup">
            <type type="ident" def="GoTest_RequiredGroup"/>
          </field>
          <field type="slice" name="Repeatedgroup">
            <elmtype type="pointer">
              <type type="ident" def="GoTest_RepeatedGroup"/>
            </elmtype>
          </field>
          <field type="pointer" name="Optionalgroup">
            <type type="ident" def="GoTest_OptionalGroup"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GoTest_RequiredGroup">
          <field type="pointer" name="RequiredField">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GoTest_RepeatedGroup">
          <field type="pointer" name="RequiredField">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GoTest_OptionalGroup">
          <field type="pointer" name="RequiredField">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GoSkipTest">
          <field type="pointer" name="SkipInt32">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="SkipFixed32">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="SkipFixed64">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="SkipString">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Skipgroup">
            <type type="ident" def="GoSkipTest_SkipGroup"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GoSkipTest_SkipGroup">
          <field type="pointer" name="GroupInt32">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="GroupString">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="NonPackedTest">
          <field type="slice" name="A">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="PackedTest">
          <field type="slice" name="B">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MaxTag">
          <field type="pointer" name="LastField">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="OldMessage">
          <field type="pointer" name="Nested">
            <type type="ident" def="OldMessage_Nested"/>
          </field>
          <field type="pointer" name="Num">
            <type type="ident" def="int32"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="OldMessage_Nested">
          <field type="pointer" name="Name">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="NewMessage">
          <field type="pointer" name="Nested">
            <type type="ident" def="NewMessage_Nested"/>
          </field>
          <field type="pointer" name="Num">
            <type type="ident" def="int64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="NewMessage_Nested">
          <field type="pointer" name="Name">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="FoodGroup">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="InnerMessage">
          <field type="pointer" name="Host">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Port">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="Connected">
            <type type="ident" def="bool"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="OtherMessage">
          <field type="pointer" name="Key">
            <type type="ident" def="int64"/>
          </field>
          <field type="slice" name="Value">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="pointer" name="Weight">
            <type type="ident" def="float32"/>
          </field>
          <field type="pointer" name="Inner">
            <type type="ident" def="InnerMessage"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MyMessage">
          <field type="pointer" name="Count">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="Name">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Quote">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="Pet">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="pointer" name="Inner">
            <type type="ident" def="InnerMessage"/>
          </field>
          <field type="slice" name="Others">
            <elmtype type="pointer">
              <type type="ident" def="OtherMessage"/>
            </elmtype>
          </field>
          <field type="slice" name="RepInner">
            <elmtype type="pointer">
              <type type="ident" def="InnerMessage"/>
            </elmtype>
          </field>
          <field type="pointer" name="Bikeshed">
            <type type="ident" def="MyMessage_Color"/>
          </field>
          <field type="pointer" name="Somegroup">
            <type type="ident" def="MyMessage_SomeGroup"/>
          </field>
          <field type="slice" name="RepBytes">
            <elmtype type="slice">
              <elmtype type="ident" def="byte"/>
            </elmtype>
          </field>
          <field type="pointer" name="Bigfloat">
            <type type="ident" def="float64"/>
          </field>
          <field type="map" name="XXX_extensions">
            <keytype type="ident" def="int32"/>
            <valtype type="selector">
              <prefix value="proto"/>
              <item value="Extension"/>
            </valtype>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MyMessage_SomeGroup">
          <field type="pointer" name="GroupField">
            <type type="ident" def="int32"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Ext">
          <field type="pointer" name="Data">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MyMessageSet">
          <field type="map" name="XXX_extensions">
            <keytype type="ident" def="int32"/>
            <valtype type="selector">
              <prefix value="proto"/>
              <item value="Extension"/>
            </valtype>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Empty">
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MessageList">
          <field type="slice" name="Message">
            <elmtype type="pointer">
              <type type="ident" def="MessageList_Message"/>
            </elmtype>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MessageList_Message">
          <field type="pointer" name="Name">
            <type type="ident" def="string"/>
          </field>
          <field type="pointer" name="Count">
            <type type="ident" def="int32"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Strings">
          <field type="pointer" name="StringField">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="BytesField">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Defaults">
          <field type="pointer" name="F_Bool">
            <type type="ident" def="bool"/>
          </field>
          <field type="pointer" name="F_Int32">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="F_Int64">
            <type type="ident" def="int64"/>
          </field>
          <field type="pointer" name="F_Fixed32">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="F_Fixed64">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="F_Uint32">
            <type type="ident" def="uint32"/>
          </field>
          <field type="pointer" name="F_Uint64">
            <type type="ident" def="uint64"/>
          </field>
          <field type="pointer" name="F_Float">
            <type type="ident" def="float32"/>
          </field>
          <field type="pointer" name="F_Double">
            <type type="ident" def="float64"/>
          </field>
          <field type="pointer" name="F_String">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="F_Bytes">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="pointer" name="F_Sint32">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="F_Sint64">
            <type type="ident" def="int64"/>
          </field>
          <field type="pointer" name="F_Enum">
            <type type="ident" def="Defaults_Color"/>
          </field>
          <field type="pointer" name="F_Pinf">
            <type type="ident" def="float32"/>
          </field>
          <field type="pointer" name="F_Ninf">
            <type type="ident" def="float32"/>
          </field>
          <field type="pointer" name="F_Nan">
            <type type="ident" def="float32"/>
          </field>
          <field type="pointer" name="Sub">
            <type type="ident" def="SubDefaults"/>
          </field>
          <field type="pointer" name="StrZero">
            <type type="ident" def="string"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="SubDefaults">
          <field type="pointer" name="N">
            <type type="ident" def="int64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="RepeatedEnum">
          <field type="slice" name="Color">
            <elmtype type="ident" def="RepeatedEnum_Color"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MoreRepeated">
          <field type="slice" name="Bools">
            <elmtype type="ident" def="bool"/>
          </field>
          <field type="slice" name="BoolsPacked">
            <elmtype type="ident" def="bool"/>
          </field>
          <field type="slice" name="Ints">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="IntsPacked">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="Int64SPacked">
            <elmtype type="ident" def="int64"/>
          </field>
          <field type="slice" name="Strings">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="Fixeds">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GroupOld">
          <field type="pointer" name="G">
            <type type="ident" def="GroupOld_G"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GroupOld_G">
          <field type="pointer" name="X">
            <type type="ident" def="int32"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GroupNew">
          <field type="pointer" name="G">
            <type type="ident" def="GroupNew_G"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="GroupNew_G">
          <field type="pointer" name="X">
            <type type="ident" def="int32"/>
          </field>
          <field type="pointer" name="Y">
            <type type="ident" def="int32"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="FloatingPoint">
          <field type="pointer" name="F">
            <type type="ident" def="float64"/>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="MessageWithMap">
          <field type="map" name="NameMapping">
            <keytype type="ident" def="int32"/>
            <valtype type="ident" def="string"/>
          </field>
          <field type="map" name="MsgMapping">
            <keytype type="ident" def="int64"/>
            <valtype type="pointer">
              <type type="ident" def="FloatingPoint"/>
            </valtype>
          </field>
          <field type="map" name="ByteMapping">
            <keytype type="ident" def="bool"/>
            <valtype type="slice">
              <elmtype type="ident" def="byte"/>
            </valtype>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Enum">
          <recvList>
            <type type="ident" def="FOO"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="FOO"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="FOO"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FOO"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Enum">
          <recvList>
            <type type="ident" def="GoTest_KIND"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GoTest_KIND"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="GoTest_KIND"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_KIND"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Enum">
          <recvList>
            <type type="ident" def="MyMessage_Color"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="MyMessage_Color"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="MyMessage_Color"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage_Color"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Enum">
          <recvList>
            <type type="ident" def="Defaults_Color"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Defaults_Color"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Defaults_Color"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults_Color"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Enum">
          <recvList>
            <type type="ident" def="RepeatedEnum_Color"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="RepeatedEnum_Color"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="RepeatedEnum_Color"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RepeatedEnum_Color"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoEnum"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoEnum"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetFoo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoEnum"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="FOO"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTestField"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTestField"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetLabel">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTestField"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetType">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTestField"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetKind">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="GoTest_KIND"/>
          </resultsList>
        </function>
        <function name="GetTable">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetParam">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetRequiredField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GoTestField"/>
            </type>
          </resultsList>
        </function>
        <function name="GetRepeatedField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="GoTestField"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="GetOptionalField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GoTestField"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_BoolRequired">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetF_Int32Required">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetF_Int64Required">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetF_Fixed32Required">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetF_Fixed64Required">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetF_Uint32Required">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetF_Uint64Required">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetF_FloatRequired">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </function>
        <function name="GetF_DoubleRequired">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="GetF_StringRequired">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetF_BytesRequired">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Sint32Required">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetF_Sint64Required">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetF_BoolRepeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Int32Repeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Int64Repeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Fixed32Repeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Fixed64Repeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Uint32Repeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Uint64Repeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_FloatRepeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="float32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_DoubleRepeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="float64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_StringRepeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_BytesRepeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="slice">
                <elmtype type="ident" def="byte"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Sint32Repeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Sint64Repeated">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_BoolOptional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetF_Int32Optional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetF_Int64Optional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetF_Fixed32Optional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetF_Fixed64Optional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetF_Uint32Optional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetF_Uint64Optional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetF_FloatOptional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </function>
        <function name="GetF_DoubleOptional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="GetF_StringOptional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetF_BytesOptional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Sint32Optional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetF_Sint64Optional">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetF_BoolDefaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetF_Int32Defaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetF_Int64Defaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetF_Fixed32Defaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetF_Fixed64Defaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetF_Uint32Defaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetF_Uint64Defaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetF_FloatDefaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </function>
        <function name="GetF_DoubleDefaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="GetF_StringDefaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetF_BytesDefaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Sint32Defaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetF_Sint64Defaulted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetF_BoolRepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Int32RepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Int64RepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Fixed32RepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Fixed64RepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Uint32RepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Uint64RepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_FloatRepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="float32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_DoubleRepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="float64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Sint32RepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Sint64RepeatedPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetRequiredgroup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GoTest_RequiredGroup"/>
            </type>
          </resultsList>
        </function>
        <function name="GetRepeatedgroup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="GoTest_RepeatedGroup"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="GetOptionalgroup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GoTest_OptionalGroup"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_RequiredGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_RequiredGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetRequiredField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_RequiredGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_RepeatedGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_RepeatedGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetRequiredField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_RepeatedGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_OptionalGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_OptionalGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetRequiredField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoTest_OptionalGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetSkipInt32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetSkipFixed32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetSkipFixed64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetSkipString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetSkipgroup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest_SkipGroup"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest_SkipGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest_SkipGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetGroupInt32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest_SkipGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetGroupString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GoSkipTest_SkipGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NonPackedTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NonPackedTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetA">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NonPackedTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PackedTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PackedTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetB">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PackedTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MaxTag"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MaxTag"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetLastField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MaxTag"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OldMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OldMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetNested">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OldMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="OldMessage_Nested"/>
            </type>
          </resultsList>
        </function>
        <function name="GetNum">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OldMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OldMessage_Nested"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OldMessage_Nested"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OldMessage_Nested"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NewMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NewMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetNested">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NewMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="NewMessage_Nested"/>
            </type>
          </resultsList>
        </function>
        <function name="GetNum">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NewMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NewMessage_Nested"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NewMessage_Nested"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NewMessage_Nested"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetFoodGroup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NewMessage_Nested"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="InnerMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="InnerMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetHost">
          <recvList>
            <type type="pointer">
              <type type="ident" def="InnerMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetPort">
          <recvList>
            <type type="pointer">
              <type type="ident" def="InnerMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetConnected">
          <recvList>
            <type type="pointer">
              <type type="ident" def="InnerMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OtherMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OtherMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OtherMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetValue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OtherMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="GetWeight">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OtherMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </function>
        <function name="GetInner">
          <recvList>
            <type type="pointer">
              <type type="ident" def="OtherMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="InnerMessage"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ExtensionRangeArray">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="proto"/>
                <item value="ExtensionRange"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="ExtensionMap">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="selector">
                <prefix value="proto"/>
                <item value="Extension"/>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="GetCount">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetQuote">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetPet">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="GetInner">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="InnerMessage"/>
            </type>
          </resultsList>
        </function>
        <function name="GetOthers">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="OtherMessage"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="GetRepInner">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="InnerMessage"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="GetBikeshed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="MyMessage_Color"/>
          </resultsList>
        </function>
        <function name="GetSomegroup">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="MyMessage_SomeGroup"/>
            </type>
          </resultsList>
        </function>
        <function name="GetRepBytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="slice">
                <elmtype type="ident" def="byte"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="GetBigfloat">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage_SomeGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage_SomeGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetGroupField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessage_SomeGroup"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Ext"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Ext"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetData">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Ext"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessageSet"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessageSet"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Marshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessageSet"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Unmarshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessageSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessageSet"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessageSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ExtensionRangeArray">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="proto"/>
                <item value="ExtensionRange"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="ExtensionMap">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MyMessageSet"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="selector">
                <prefix value="proto"/>
                <item value="Extension"/>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Empty"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Empty"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageList"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageList"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetMessage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageList"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="MessageList_Message"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageList_Message"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageList_Message"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetName">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageList_Message"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetCount">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageList_Message"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Strings"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Strings"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetStringField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Strings"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetBytesField">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Strings"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetF_Bool">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetF_Int32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetF_Int64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetF_Fixed32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetF_Fixed64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetF_Uint32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="GetF_Uint64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="GetF_Float">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </function>
        <function name="GetF_Double">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="GetF_String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetF_Bytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="GetF_Sint32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetF_Sint64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetF_Enum">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Defaults_Color"/>
          </resultsList>
        </function>
        <function name="GetF_Pinf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </function>
        <function name="GetF_Ninf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </function>
        <function name="GetF_Nan">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float32"/>
          </resultsList>
        </function>
        <function name="GetSub">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="SubDefaults"/>
            </type>
          </resultsList>
        </function>
        <function name="GetStrZero">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Defaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SubDefaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SubDefaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetN">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SubDefaults"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RepeatedEnum"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RepeatedEnum"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetColor">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RepeatedEnum"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="RepeatedEnum_Color"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetBools">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="GetBoolsPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="GetInts">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetIntsPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="GetInt64SPacked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int64"/>
            </type>
          </resultsList>
        </function>
        <function name="GetStrings">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="GetFixeds">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MoreRepeated"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupOld"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupOld"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetG">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupOld"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GroupOld_G"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupOld_G"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupOld_G"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetX">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupOld_G"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupNew"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupNew"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetG">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupNew"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="GroupNew_G"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupNew_G"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupNew_G"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetX">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupNew_G"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetY">
          <recvList>
            <type type="pointer">
              <type type="ident" def="GroupNew_G"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FloatingPoint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FloatingPoint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetF">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FloatingPoint"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageWithMap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageWithMap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetNameMapping">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageWithMap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="GetMsgMapping">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageWithMap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="int64"/>
              <valtype type="pointer">
                <type type="ident" def="FloatingPoint"/>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="GetByteMapping">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageWithMap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="bool"/>
              <valtype type="slice">
                <elmtype type="ident" def="byte"/>
              </valtype>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="FOO_FOO1"/>
        <name value="FOO_name"/>
        <name value="FOO_value"/>
        <name value="GoTest_VOID"/>
        <name value="GoTest_BOOL"/>
        <name value="GoTest_BYTES"/>
        <name value="GoTest_FINGERPRINT"/>
        <name value="GoTest_FLOAT"/>
        <name value="GoTest_INT"/>
        <name value="GoTest_STRING"/>
        <name value="GoTest_TIME"/>
        <name value="GoTest_TUPLE"/>
        <name value="GoTest_ARRAY"/>
        <name value="GoTest_MAP"/>
        <name value="GoTest_TABLE"/>
        <name value="GoTest_FUNCTION"/>
        <name value="GoTest_KIND_name"/>
        <name value="GoTest_KIND_value"/>
        <name value="MyMessage_RED"/>
        <name value="MyMessage_GREEN"/>
        <name value="MyMessage_BLUE"/>
        <name value="MyMessage_Color_name"/>
        <name value="MyMessage_Color_value"/>
        <name value="Defaults_RED"/>
        <name value="Defaults_GREEN"/>
        <name value="Defaults_BLUE"/>
        <name value="Defaults_Color_name"/>
        <name value="Defaults_Color_value"/>
        <name value="RepeatedEnum_RED"/>
        <name value="RepeatedEnum_Color_name"/>
        <name value="RepeatedEnum_Color_value"/>
        <name value="Default_GoTest_F_BoolDefaulted"/>
        <name value="Default_GoTest_F_Int32Defaulted"/>
        <name value="Default_GoTest_F_Int64Defaulted"/>
        <name value="Default_GoTest_F_Fixed32Defaulted"/>
        <name value="Default_GoTest_F_Fixed64Defaulted"/>
        <name value="Default_GoTest_F_Uint32Defaulted"/>
        <name value="Default_GoTest_F_Uint64Defaulted"/>
        <name value="Default_GoTest_F_FloatDefaulted"/>
        <name value="Default_GoTest_F_DoubleDefaulted"/>
        <name value="Default_GoTest_F_StringDefaulted"/>
        <name value="Default_GoTest_F_BytesDefaulted"/>
        <name value="Default_GoTest_F_Sint32Defaulted"/>
        <name value="Default_GoTest_F_Sint64Defaulted"/>
        <name value="Default_InnerMessage_Port"/>
        <name value="E_Ext_More"/>
        <name value="E_Ext_Text"/>
        <name value="E_Ext_Number"/>
        <name value="Default_Defaults_F_Bool"/>
        <name value="Default_Defaults_F_Int32"/>
        <name value="Default_Defaults_F_Int64"/>
        <name value="Default_Defaults_F_Fixed32"/>
        <name value="Default_Defaults_F_Fixed64"/>
        <name value="Default_Defaults_F_Uint32"/>
        <name value="Default_Defaults_F_Uint64"/>
        <name value="Default_Defaults_F_Float"/>
        <name value="Default_Defaults_F_Double"/>
        <name value="Default_Defaults_F_String"/>
        <name value="Default_Defaults_F_Bytes"/>
        <name value="Default_Defaults_F_Sint32"/>
        <name value="Default_Defaults_F_Sint64"/>
        <name value="Default_Defaults_F_Enum"/>
        <name value="Default_Defaults_F_Pinf"/>
        <name value="Default_Defaults_F_Ninf"/>
        <name value="Default_Defaults_F_Nan"/>
        <name value="Default_SubDefaults_N"/>
        <name value="E_Greeting"/>
        <name value="E_X201"/>
        <name value="E_X202"/>
        <name value="E_X203"/>
        <name value="E_X204"/>
        <name value="E_X205"/>
        <name value="E_X206"/>
        <name value="E_X207"/>
        <name value="E_X208"/>
        <name value="E_X209"/>
        <name value="E_X210"/>
        <name value="E_X211"/>
        <name value="E_X212"/>
        <name value="E_X213"/>
        <name value="E_X214"/>
        <name value="E_X215"/>
        <name value="E_X216"/>
        <name value="E_X217"/>
        <name value="E_X218"/>
        <name value="E_X219"/>
        <name value="E_X220"/>
        <name value="E_X221"/>
        <name value="E_X222"/>
        <name value="E_X223"/>
        <name value="E_X224"/>
        <name value="E_X225"/>
        <name value="E_X226"/>
        <name value="E_X227"/>
        <name value="E_X228"/>
        <name value="E_X229"/>
        <name value="E_X230"/>
        <name value="E_X231"/>
        <name value="E_X232"/>
        <name value="E_X233"/>
        <name value="E_X234"/>
        <name value="E_X235"/>
        <name value="E_X236"/>
        <name value="E_X237"/>
        <name value="E_X238"/>
        <name value="E_X239"/>
        <name value="E_X240"/>
        <name value="E_X241"/>
        <name value="E_X242"/>
        <name value="E_X243"/>
        <name value="E_X244"/>
        <name value="E_X245"/>
        <name value="E_X246"/>
        <name value="E_X247"/>
        <name value="E_X248"/>
        <name value="E_X249"/>
        <name value="E_X250"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/client_golang/text">
      <types>
        <type type="struct" name="ParseError">
          <field type="ident" def="int" name="Line"/>
          <field type="ident" def="string" name="Msg"/>
        </type>
        <type type="struct" name="Parser">
          <field type="map" name="metricFamiliesByName">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="MetricFamily"/>
              </type>
            </valtype>
          </field>
          <field type="pointer" name="buf">
            <type type="selector">
              <prefix value="bufio"/>
              <item value="Reader"/>
            </type>
          </field>
          <field type="ident" def="error" name="err"/>
          <field type="ident" def="int" name="lineCount"/>
          <field type="ident" def="byte" name="currentByte"/>
          <field type="selector" name="currentToken">
            <prefix value="bytes"/>
            <item value="Buffer"/>
          </field>
          <field type="pointer" name="currentMF">
            <type type="selector">
              <prefix value="dto"/>
              <item value="MetricFamily"/>
            </type>
          </field>
          <field type="pointer" name="currentMetric">
            <type type="selector">
              <prefix value="dto"/>
              <item value="Metric"/>
            </type>
          </field>
          <field type="pointer" name="currentLabelPair">
            <type type="selector">
              <prefix value="dto"/>
              <item value="LabelPair"/>
            </type>
          </field>
          <field type="map" name="currentLabels">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="string"/>
          </field>
          <field type="map" name="summaries">
            <keytype type="ident" def="uint64"/>
            <valtype type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </valtype>
          </field>
          <field type="ident" def="float64" name="currentQuantile"/>
          <field type="map" name="histograms">
            <keytype type="ident" def="uint64"/>
            <valtype type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="Metric"/>
              </type>
            </valtype>
          </field>
          <field type="ident" def="float64" name="currentBucket"/>
          <field type="ident" def="bool" name="currentIsSummaryCount"/>
          <field type="ident" def="bool" name="currentIsSummarySum"/>
          <field type="ident" def="bool" name="currentIsHistogramCount"/>
          <field type="ident" def="bool" name="currentIsHistogramSum"/>
        </type>
      </types>
      <functions>
        <function name="WriteProtoDelimited">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="MetricFamily"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteProtoText">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="MetricFamily"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteProtoCompactText">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="MetricFamily"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="ParseError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="TextToMetricFamilies">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="pointer">
                <type type="selector">
                  <prefix value="dto"/>
                  <item value="MetricFamily"/>
                </type>
              </valtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MetricFamilyToText">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="dto"/>
                <item value="MetricFamily"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/client_golang/Godeps/_workspace/src/github.com/beorn7/perks/quantile">
      <types>
        <type type="struct" name="Sample">
          <field type="ident" def="float64" name="Value"/>
          <field type="ident" def="float64" name="Width"/>
          <field type="ident" def="float64" name="Delta"/>
        </type>
        <type name="Samples" type="slice">
          <elmtype type="ident" def="Sample"/>
        </type>
        <type type="struct" name="Stream">
          <field type="pointer" name="">
            <type type="ident" def="stream"/>
          </field>
          <field type="ident" def="Samples" name="b"/>
          <field type="ident" def="bool" name="sorted"/>
        </type>
      </types>
      <functions>
        <function name="Len">
          <recvList>
            <type type="ident" def="Samples"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="Samples"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="Samples"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewLowBiased">
          <recvList/>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </resultsList>
        </function>
        <function name="NewHighBiased">
          <recvList/>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </resultsList>
        </function>
        <function name="NewTargeted">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="float64"/>
              <valtype type="ident" def="float64"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </resultsList>
        </function>
        <function name="Insert">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Query">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="Merge">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Samples"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Samples">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Samples"/>
          </resultsList>
        </function>
        <function name="Count">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Stream"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/prometheus/client_golang/Godeps/_workspace/src/github.com/golang/protobuf/proto">
      <types>
        <type type="struct" name="ParseError">
          <field type="ident" def="string" name="Message"/>
          <field type="ident" def="int" name="Line"/>
          <field type="ident" def="int" name="Offset"/>
        </type>
        <type type="struct" name="StructProperties">
          <field type="slice" name="Prop">
            <elmtype type="pointer">
              <type type="ident" def="Properties"/>
            </elmtype>
          </field>
          <field type="ident" def="int" name="reqCount"/>
          <field type="ident" def="tagMap" name="decoderTags"/>
          <field type="map" name="decoderOrigNames">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="int"/>
          </field>
          <field type="slice" name="order">
            <elmtype type="ident" def="int"/>
          </field>
          <field type="ident" def="field" name="unrecField"/>
          <field type="ident" def="bool" name="extendable"/>
        </type>
        <type type="struct" name="Properties">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="OrigName"/>
          <field type="ident" def="string" name="Wire"/>
          <field type="ident" def="int" name="WireType"/>
          <field type="ident" def="int" name="Tag"/>
          <field type="ident" def="bool" name="Required"/>
          <field type="ident" def="bool" name="Optional"/>
          <field type="ident" def="bool" name="Repeated"/>
          <field type="ident" def="bool" name="Packed"/>
          <field type="ident" def="string" name="Enum"/>
          <field type="ident" def="bool" name="proto3"/>
          <field type="ident" def="string" name="Default"/>
          <field type="ident" def="bool" name="HasDefault"/>
          <field type="ident" def="uint64" name="def_uint64"/>
          <field type="ident" def="encoder" name="enc"/>
          <field type="ident" def="valueEncoder" name="valEnc"/>
          <field type="ident" def="field" name="field"/>
          <field type="slice" name="tagcode">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="array" name="tagbuf">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="selector" name="stype">
            <prefix value="reflect"/>
            <item value="Type"/>
          </field>
          <field type="pointer" name="sprop">
            <type type="ident" def="StructProperties"/>
          </field>
          <field type="ident" def="bool" name="isMarshaler"/>
          <field type="ident" def="bool" name="isUnmarshaler"/>
          <field type="selector" name="mtype">
            <prefix value="reflect"/>
            <item value="Type"/>
          </field>
          <field type="pointer" name="mkeyprop">
            <type type="ident" def="Properties"/>
          </field>
          <field type="pointer" name="mvalprop">
            <type type="ident" def="Properties"/>
          </field>
          <field type="ident" def="sizer" name="size"/>
          <field type="ident" def="valueSizer" name="valSize"/>
          <field type="ident" def="decoder" name="dec"/>
          <field type="ident" def="valueDecoder" name="valDec"/>
          <field type="ident" def="decoder" name="packedDec"/>
        </type>
        <type type="struct" name="MessageSet">
          <field type="slice" name="Item">
            <elmtype type="pointer">
              <type type="ident" def="_MessageSet_Item"/>
            </elmtype>
          </field>
          <field type="slice" name="XXX_unrecognized">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type name="Message" type="interface">
          <method name="Reset">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="ProtoMessage">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="Stats">
          <field type="ident" def="uint64" name="Emalloc"/>
          <field type="ident" def="uint64" name="Dmalloc"/>
          <field type="ident" def="uint64" name="Encode"/>
          <field type="ident" def="uint64" name="Decode"/>
          <field type="ident" def="uint64" name="Chit"/>
          <field type="ident" def="uint64" name="Cmiss"/>
          <field type="ident" def="uint64" name="Size"/>
        </type>
        <type type="struct" name="Buffer">
          <field type="slice" name="buf">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="int" name="index"/>
          <field type="slice" name="bools">
            <elmtype type="ident" def="bool"/>
          </field>
          <field type="slice" name="uint32s">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="slice" name="uint64s">
            <elmtype type="ident" def="uint64"/>
          </field>
          <field type="slice" name="int32s">
            <elmtype type="ident" def="int32"/>
          </field>
          <field type="slice" name="int64s">
            <elmtype type="ident" def="int64"/>
          </field>
          <field type="slice" name="float32s">
            <elmtype type="ident" def="float32"/>
          </field>
          <field type="slice" name="float64s">
            <elmtype type="ident" def="float64"/>
          </field>
        </type>
        <type type="struct" name="ExtensionRange">
          <field type="ident" def="int32" name="Start"/>
          <field type="ident" def="int32" name="End"/>
        </type>
        <type type="struct" name="ExtensionDesc">
          <field type="ident" def="Message" name="ExtendedType"/>
          <field type="interface" name="ExtensionType"/>
          <field type="ident" def="int32" name="Field"/>
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="Tag"/>
        </type>
        <type type="struct" name="Extension">
          <field type="pointer" name="desc">
            <type type="ident" def="ExtensionDesc"/>
          </field>
          <field type="interface" name="value"/>
          <field type="slice" name="enc">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="RequiredNotSetError">
          <field type="ident" def="string" name="field"/>
        </type>
        <type name="Marshaler" type="interface">
          <method name="Marshal">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Unmarshaler" type="interface">
          <method name="Unmarshal">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ParseError"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="token"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalText">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="textWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="textWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteByte">
          <recvList>
            <type type="pointer">
              <type type="ident" def="textWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="byte"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="int32Slice"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="int32Slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="int32Slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="MarshalText">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalTextString">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="CompactText">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CompactTextString">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StructProperties"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StructProperties"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="pointer">
              <type type="ident" def="StructProperties"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Properties"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Parse">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Properties"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Init">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Properties"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="reflect"/>
              <item value="Type"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="reflect"/>
                <item value="StructField"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetProperties">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="reflect"/>
              <item value="Type"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="StructProperties"/>
            </type>
          </resultsList>
        </function>
        <function name="RegisterEnum">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="ident" def="string"/>
            </type>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="int32"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="IsValid">
          <recvList>
            <type type="ident" def="field"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="structPointerSlice"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Index">
          <recvList>
            <type type="pointer">
              <type type="ident" def="structPointerSlice"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="structPointer"/>
          </resultsList>
        </function>
        <function name="Append">
          <recvList>
            <type type="pointer">
              <type type="ident" def="structPointerSlice"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="structPointer"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Append">
          <recvList>
            <type type="pointer">
              <type type="ident" def="word32Slice"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint32"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="word32Slice"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Index">
          <recvList>
            <type type="pointer">
              <type type="ident" def="word32Slice"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="Append">
          <recvList>
            <type type="pointer">
              <type type="ident" def="word64Slice"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="word64Slice"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Index">
          <recvList>
            <type type="pointer">
              <type type="ident" def="word64Slice"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="IsValid">
          <recvList>
            <type type="ident" def="field"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="structPointerSlice"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Index">
          <recvList>
            <type type="ident" def="structPointerSlice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="structPointer"/>
          </resultsList>
        </function>
        <function name="Append">
          <recvList>
            <type type="ident" def="structPointerSlice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="structPointer"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Append">
          <recvList>
            <type type="ident" def="word32Slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="uint32"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="word32Slice"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Index">
          <recvList>
            <type type="ident" def="word32Slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="Append">
          <recvList>
            <type type="ident" def="word64Slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="word64Slice"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Index">
          <recvList>
            <type type="ident" def="word64Slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="Has">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Unmarshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Marshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageSet"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MessageSet"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ProtoMessage">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="MarshalMessageSet">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="ident" def="Extension"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalMessageSet">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="ident" def="Extension"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MarshalMessageSetJSON">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="ident" def="Extension"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalMessageSetJSON">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="ident" def="Extension"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RegisterMessageSetType">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
            <type type="ident" def="int32"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetStats">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Stats"/>
          </resultsList>
        </function>
        <function name="NewBuffer">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetBuf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Bytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Bool">
          <recvList/>
          <paramsList>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="Int32">
          <recvList/>
          <paramsList>
            <type type="ident" def="int32"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="Int">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="int32"/>
            </type>
          </resultsList>
        </function>
        <function name="Int64">
          <recvList/>
          <paramsList>
            <type type="ident" def="int64"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="int64"/>
            </type>
          </resultsList>
        </function>
        <function name="Float32">
          <recvList/>
          <paramsList>
            <type type="ident" def="float32"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="float32"/>
            </type>
          </resultsList>
        </function>
        <function name="Float64">
          <recvList/>
          <paramsList>
            <type type="ident" def="float64"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="float64"/>
            </type>
          </resultsList>
        </function>
        <function name="Uint32">
          <recvList/>
          <paramsList>
            <type type="ident" def="uint32"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="Uint64">
          <recvList/>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="uint64"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="EnumName">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="ident" def="string"/>
            </type>
            <type type="ident" def="int32"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSONEnum">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="int32"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int32"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DebugPrint">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetDefaults">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="mapKeys"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="mapKeys"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="mapKeys"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="SetRawExtension">
          <recvList/>
          <paramsList>
            <type type="ident" def="extendableProto"/>
            <type type="ident" def="int32"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="HasExtension">
          <recvList/>
          <paramsList>
            <type type="ident" def="extendableProto"/>
            <type type="pointer">
              <type type="ident" def="ExtensionDesc"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="ClearExtension">
          <recvList/>
          <paramsList>
            <type type="ident" def="extendableProto"/>
            <type type="pointer">
              <type type="ident" def="ExtensionDesc"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetExtension">
          <recvList/>
          <paramsList>
            <type type="ident" def="extendableProto"/>
            <type type="pointer">
              <type type="ident" def="ExtensionDesc"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="interface"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetExtensions">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="ExtensionDesc"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetExtension">
          <recvList/>
          <paramsList>
            <type type="ident" def="extendableProto"/>
            <type type="pointer">
              <type type="ident" def="ExtensionDesc"/>
            </type>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RegisterExtension">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="ExtensionDesc"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RegisteredExtensions">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="int32"/>
              <valtype type="pointer">
                <type type="ident" def="ExtensionDesc"/>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="Equal">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RequiredNotSetError"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="EncodeVarint">
          <recvList/>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="EncodeVarint">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EncodeFixed64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EncodeFixed32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EncodeZigzag64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EncodeZigzag32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EncodeRawBytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EncodeStringBytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Marshal">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Marshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Size">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="DecodeVarint">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="DecodeVarint">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodeFixed64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodeFixed32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodeZigzag64">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodeZigzag32">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodeRawBytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodeStringBytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Unmarshal">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalMerge">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Unmarshal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Clone">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Message"/>
          </resultsList>
        </function>
        <function name="Merge">
          <recvList/>
          <paramsList>
            <type type="ident" def="Message"/>
            <type type="ident" def="Message"/>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="WireVarint"/>
        <name value="WireFixed64"/>
        <name value="WireBytes"/>
        <name value="WireStartGroup"/>
        <name value="WireEndGroup"/>
        <name value="WireFixed32"/>
        <name value="ErrNoMessageTypeId"/>
        <name value="ErrMissingExtension"/>
        <name value="ErrRepeatedHasNil"/>
        <name value="ErrNil"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/client_golang/model">
      <types>
        <type name="Timestamp" type="ident">
          <type type="ident" def="int64"/>
        </type>
        <type name="SampleValue" type="ident">
          <type type="ident" def="float64"/>
        </type>
        <type type="struct" name="Sample">
          <field type="ident" def="Metric" name="Metric"/>
          <field type="ident" def="SampleValue" name="Value"/>
          <field type="ident" def="Timestamp" name="Timestamp"/>
        </type>
        <type name="Samples" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="Sample"/>
          </elmtype>
        </type>
        <type name="Metric" type="map">
          <keytype type="ident" def="LabelName"/>
          <valtype type="ident" def="LabelValue"/>
        </type>
        <type type="struct" name="COWMetric">
          <field type="ident" def="bool" name="Copied"/>
          <field type="ident" def="Metric" name="Metric"/>
        </type>
        <type name="LabelValue" type="ident">
          <type type="ident" def="string"/>
        </type>
        <type name="LabelValues" type="slice">
          <elmtype type="ident" def="LabelValue"/>
        </type>
        <type name="LabelSet" type="map">
          <keytype type="ident" def="LabelName"/>
          <valtype type="ident" def="LabelValue"/>
        </type>
        <type name="LabelName" type="ident">
          <type type="ident" def="string"/>
        </type>
        <type name="LabelNames" type="slice">
          <elmtype type="ident" def="LabelName"/>
        </type>
        <type name="Fingerprint" type="ident">
          <type type="ident" def="uint64"/>
        </type>
        <type name="Fingerprints" type="slice">
          <elmtype type="ident" def="Fingerprint"/>
        </type>
        <type name="FingerprintSet" type="map">
          <keytype type="ident" def="Fingerprint"/>
          <valtype type="struct" name=""/>
        </type>
      </types>
      <functions>
        <function name="Equal">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Timestamp"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Before">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Timestamp"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="After">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Timestamp"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="native_time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Timestamp"/>
          </resultsList>
        </function>
        <function name="Sub">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Timestamp"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="native_time"/>
              <item value="Duration"/>
            </type>
          </resultsList>
        </function>
        <function name="Time">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="native_time"/>
              <item value="Time"/>
            </type>
          </resultsList>
        </function>
        <function name="Unix">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="UnixNano">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="ident" def="Timestamp"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Now">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Timestamp"/>
          </resultsList>
        </function>
        <function name="TimestampFromTime">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="native_time"/>
              <item value="Time"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Timestamp"/>
          </resultsList>
        </function>
        <function name="TimestampFromUnix">
          <recvList/>
          <paramsList>
            <type type="ident" def="int64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Timestamp"/>
          </resultsList>
        </function>
        <function name="TimestampFromUnixNano">
          <recvList/>
          <paramsList>
            <type type="ident" def="int64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Timestamp"/>
          </resultsList>
        </function>
        <function name="LabelsToSignature">
          <recvList/>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="SignatureForLabels">
          <recvList/>
          <paramsList>
            <type type="ident" def="Metric"/>
            <type type="ident" def="LabelNames"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="SignatureWithoutLabels">
          <recvList/>
          <paramsList>
            <type type="ident" def="Metric"/>
            <type type="map">
              <keytype type="ident" def="LabelName"/>
              <valtype type="struct" name=""/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="Equal">
          <recvList>
            <type type="ident" def="SampleValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="SampleValue"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="ident" def="SampleValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="SampleValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Equal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Sample"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Sample"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="Samples"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="Samples"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="Samples"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Equal">
          <recvList>
            <type type="ident" def="Samples"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Samples"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Equal">
          <recvList>
            <type type="ident" def="Metric"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Metric"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Before">
          <recvList>
            <type type="ident" def="Metric"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Metric"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Metric"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Fingerprint">
          <recvList>
            <type type="ident" def="Metric"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Fingerprint"/>
          </resultsList>
        </function>
        <function name="FastFingerprint">
          <recvList>
            <type type="ident" def="Metric"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Fingerprint"/>
          </resultsList>
        </function>
        <function name="Clone">
          <recvList>
            <type type="ident" def="Metric"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Metric"/>
          </resultsList>
        </function>
        <function name="MergeFromLabelSet">
          <recvList>
            <type type="ident" def="Metric"/>
          </recvList>
          <paramsList>
            <type type="ident" def="LabelSet"/>
            <type type="ident" def="LabelName"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Set">
          <recvList>
            <type type="pointer">
              <type type="ident" def="COWMetric"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="LabelName"/>
            <type type="ident" def="LabelValue"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="COWMetric"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="LabelName"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="COWMetric"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MarshalJSON">
          <recvList>
            <type type="ident" def="COWMetric"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="LabelValues"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="LabelValues"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="LabelValues"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Merge">
          <recvList>
            <type type="ident" def="LabelSet"/>
          </recvList>
          <paramsList>
            <type type="ident" def="LabelSet"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="LabelSet"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="LabelSet"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MergeFromMetric">
          <recvList>
            <type type="ident" def="LabelSet"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Metric"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelSet"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalYAML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelName"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="interface"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="error"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="UnmarshalJSON">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LabelName"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="LabelNames"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="LabelNames"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="LabelNames"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="LabelNames"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Fingerprint"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="Fingerprint"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Fingerprint"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Equal">
          <recvList>
            <type type="ident" def="Fingerprint"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Fingerprint"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="LoadFromString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Fingerprint"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="Fingerprints"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="Fingerprints"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="Fingerprints"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Equal">
          <recvList>
            <type type="ident" def="FingerprintSet"/>
          </recvList>
          <paramsList>
            <type type="ident" def="FingerprintSet"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Intersection">
          <recvList>
            <type type="ident" def="FingerprintSet"/>
          </recvList>
          <paramsList>
            <type type="ident" def="FingerprintSet"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="FingerprintSet"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="MinimumTick"/>
        <name value="Earliest"/>
        <name value="Latest"/>
        <name value="SeparatorByte"/>
        <name value="ExportedLabelPrefix"/>
        <name value="MetricNameLabel"/>
        <name value="AddressLabel"/>
        <name value="MetricsPathLabel"/>
        <name value="ReservedLabelPrefix"/>
        <name value="MetaLabelPrefix"/>
        <name value="JobLabel"/>
        <name value="InstanceLabel"/>
        <name value="BucketLabel"/>
        <name value="QuantileLabel"/>
        <name value="LabelNameRE"/>
      </names>
    </package>
    <package importpath="github.com/prometheus/client_golang/Godeps/_workspace/src/github.com/prometheus/procfs">
      <types>
        <type type="struct" name="Stat">
          <field type="ident" def="int64" name="BootTime"/>
        </type>
        <type type="struct" name="ProcStat">
          <field type="ident" def="int" name="PID"/>
          <field type="ident" def="string" name="Comm"/>
          <field type="ident" def="string" name="State"/>
          <field type="ident" def="int" name="PPID"/>
          <field type="ident" def="int" name="PGRP"/>
          <field type="ident" def="int" name="Session"/>
          <field type="ident" def="int" name="TTY"/>
          <field type="ident" def="int" name="TPGID"/>
          <field type="ident" def="uint" name="Flags"/>
          <field type="ident" def="uint" name="MinFlt"/>
          <field type="ident" def="uint" name="CMinFlt"/>
          <field type="ident" def="uint" name="MajFlt"/>
          <field type="ident" def="uint" name="CMajFlt"/>
          <field type="ident" def="uint" name="UTime"/>
          <field type="ident" def="uint" name="STime"/>
          <field type="ident" def="uint" name="CUTime"/>
          <field type="ident" def="uint" name="CSTime"/>
          <field type="ident" def="int" name="Priority"/>
          <field type="ident" def="int" name="Nice"/>
          <field type="ident" def="int" name="NumThreads"/>
          <field type="ident" def="uint64" name="Starttime"/>
          <field type="ident" def="int" name="VSize"/>
          <field type="ident" def="int" name="RSS"/>
          <field type="ident" def="FS" name="fs"/>
        </type>
        <type type="struct" name="ProcLimits">
          <field type="ident" def="int" name="CPUTime"/>
          <field type="ident" def="int" name="FileSize"/>
          <field type="ident" def="int" name="DataSize"/>
          <field type="ident" def="int" name="StackSize"/>
          <field type="ident" def="int" name="CoreFileSize"/>
          <field type="ident" def="int" name="ResidentSet"/>
          <field type="ident" def="int" name="Processes"/>
          <field type="ident" def="int" name="OpenFiles"/>
          <field type="ident" def="int" name="LockedMemory"/>
          <field type="ident" def="int" name="AddressSpace"/>
          <field type="ident" def="int" name="FileLocks"/>
          <field type="ident" def="int" name="PendingSignals"/>
          <field type="ident" def="int" name="MsqqueueSize"/>
          <field type="ident" def="int" name="NicePriority"/>
          <field type="ident" def="int" name="RealtimePriority"/>
          <field type="ident" def="int" name="RealtimeTimeout"/>
        </type>
        <type type="struct" name="Proc">
          <field type="ident" def="int" name="PID"/>
          <field type="ident" def="FS" name="fs"/>
        </type>
        <type name="Procs" type="slice">
          <elmtype type="ident" def="Proc"/>
        </type>
        <type name="FS" type="ident">
          <type type="ident" def="string"/>
        </type>
      </types>
      <functions>
        <function name="NewStat">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Stat"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewStat">
          <recvList>
            <type type="ident" def="FS"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Stat"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewStat">
          <recvList>
            <type type="ident" def="Proc"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ProcStat"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="VirtualMemory">
          <recvList>
            <type type="ident" def="ProcStat"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="ResidentMemory">
          <recvList>
            <type type="ident" def="ProcStat"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="StartTime">
          <recvList>
            <type type="ident" def="ProcStat"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CPUTime">
          <recvList>
            <type type="ident" def="ProcStat"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="NewLimits">
          <recvList>
            <type type="ident" def="Proc"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="ProcLimits"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="Procs"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="Procs"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="Procs"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Self">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Proc"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewProc">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Proc"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="AllProcs">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Procs"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewProc">
          <recvList>
            <type type="ident" def="FS"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Proc"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="AllProcs">
          <recvList>
            <type type="ident" def="FS"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Procs"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CmdLine">
          <recvList>
            <type type="ident" def="Proc"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FileDescriptors">
          <recvList>
            <type type="ident" def="Proc"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uintptr"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FileDescriptorsLen">
          <recvList>
            <type type="ident" def="Proc"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewFS">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="FS"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="DefaultMountPoint"/>
      </names>
    </package>
  </packages>
  <imports>
    <import path="fmt"/>
    <import path="io"/>
    <import path="github.com/golang/protobuf/proto"/>
    <import path="github.com/matttproud/golang_protobuf_extensions/pbutil"/>
    <import path="github.com/prometheus/client_model/go"/>
    <import path="bufio"/>
    <import path="bytes"/>
    <import path="math"/>
    <import path="strconv"/>
    <import path="strings"/>
    <import path="github.com/prometheus/client_golang/model"/>
    <import path="hash"/>
    <import path="sync"/>
    <import path="errors"/>
    <import path="sort"/>
    <import path="sync/atomic"/>
    <import path="hash/fnv"/>
    <import path="time"/>
    <import path="github.com/beorn7/perks/quantile"/>
    <import path="compress/gzip"/>
    <import path="net/http"/>
    <import path="net/url"/>
    <import path="os"/>
    <import path="bitbucket.org/ww/goautoneg"/>
    <import path="github.com/prometheus/client_golang/text"/>
    <import path="github.com/prometheus/procfs"/>
    <import path="net"/>
    <import path="runtime"/>
    <import path="runtime/debug"/>
    <import path="encoding/json"/>
    <import path="expvar"/>
    <import path="regexp"/>
    <import path="io/ioutil"/>
    <import path="mime"/>
    <import path="flag"/>
    <import path="github.com/prometheus/client_golang/prometheus"/>
    <import path="math/rand"/>
    <import path="C"/>
    <import path="path"/>
    <import path="encoding/binary"/>
    <import path="encoding"/>
    <import path="reflect"/>
    <import path="unicode/utf8"/>
    <import path="log"/>
    <import path="unsafe"/>
  </imports>
</project>
