<?xml version='1.0' encoding='ASCII'?>
<project ipprefix="" commit="commit" nvr="golang-github-syndtr-goleveldb-0-0.4.git012f65f.fc24">
  <packages>
    <package importpath="github.com/syndtr/goleveldb/leveldb/cache">
      <types>
        <type name="Cacher" type="interface">
          <method name="Capacity">
            <paramsList/>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
          <method name="SetCapacity">
            <paramsList>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Promote">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="Node"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Ban">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="Node"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Evict">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="Node"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="EvictNS">
            <paramsList>
              <type type="ident" def="uint64"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="EvictAll">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Close">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Value" type="interface"/>
        <type type="struct" name="CacheGetter">
          <field type="pointer" name="Cache">
            <type type="ident" def="Cache"/>
          </field>
          <field type="ident" def="uint64" name="NS"/>
        </type>
        <type type="struct" name="Cache">
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="selector" name="mHead">
            <prefix value="unsafe"/>
            <item value="Pointer"/>
          </field>
          <field type="ident" def="int32" name="nodes"/>
          <field type="ident" def="int32" name="size"/>
          <field type="ident" def="Cacher" name="cacher"/>
          <field type="ident" def="bool" name="closed"/>
        </type>
        <type type="struct" name="Node">
          <field type="pointer" name="r">
            <type type="ident" def="Cache"/>
          </field>
          <field type="ident" def="uint32" name="hash"/>
          <field type="ident" def="uint64" name="ns"/>
          <field type="ident" def="uint64" name="key"/>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="ident" def="int" name="size"/>
          <field type="ident" def="Value" name="value"/>
          <field type="ident" def="int32" name="ref"/>
          <field type="slice" name="onDel">
            <elmtype type="func">
              <paramsList/>
              <resultsList/>
            </elmtype>
          </field>
          <field type="selector" name="CacheData">
            <prefix value="unsafe"/>
            <item value="Pointer"/>
          </field>
        </type>
        <type type="struct" name="Handle">
          <field type="selector" name="n">
            <prefix value="unsafe"/>
            <item value="Pointer"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Capacity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lru"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="SetCapacity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lru"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Promote">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lru"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Ban">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lru"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Evict">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lru"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="EvictNS">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lru"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="EvictAll">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lru"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lru"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewLRU">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Cacher"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CacheGetter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="int"/>
                <type type="ident" def="Value"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Handle"/>
            </type>
          </resultsList>
        </function>
        <function name="NewCache">
          <recvList/>
          <paramsList>
            <type type="ident" def="Cacher"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </resultsList>
        </function>
        <function name="Nodes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Size">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Capacity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="SetCapacity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="uint64"/>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="int"/>
                <type type="ident" def="Value"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Handle"/>
            </type>
          </resultsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="uint64"/>
            <type type="func">
              <paramsList/>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Evict">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="EvictNS">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="EvictAll">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Cache"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NS">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="Size">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="Ref">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int32"/>
          </resultsList>
        </function>
        <function name="GetHandle">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Node"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Handle"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Handle"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Value"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Handle"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/syndtr/goleveldb/leveldb/table">
      <types>
        <type type="struct" name="Writer">
          <field type="selector" name="writer">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="ident" def="error" name="err"/>
          <field type="selector" name="cmp">
            <prefix value="comparer"/>
            <item value="Comparer"/>
          </field>
          <field type="selector" name="filter">
            <prefix value="filter"/>
            <item value="Filter"/>
          </field>
          <field type="selector" name="compression">
            <prefix value="opt"/>
            <item value="Compression"/>
          </field>
          <field type="ident" def="int" name="blockSize"/>
          <field type="ident" def="blockWriter" name="dataBlock"/>
          <field type="ident" def="blockWriter" name="indexBlock"/>
          <field type="ident" def="filterWriter" name="filterBlock"/>
          <field type="ident" def="blockHandle" name="pendingBH"/>
          <field type="ident" def="uint64" name="offset"/>
          <field type="ident" def="int" name="nEntries"/>
          <field type="array" name="scratch">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="comparerScratch">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="compressionScratch">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="ErrCorrupted">
          <field type="ident" def="int64" name="Pos"/>
          <field type="ident" def="int64" name="Size"/>
          <field type="ident" def="string" name="Kind"/>
          <field type="ident" def="string" name="Reason"/>
        </type>
        <type type="struct" name="Reader">
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="pointer" name="fi">
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileInfo"/>
            </type>
          </field>
          <field type="selector" name="reader">
            <prefix value="io"/>
            <item value="ReaderAt"/>
          </field>
          <field type="pointer" name="cache">
            <type type="selector">
              <prefix value="cache"/>
              <item value="CacheGetter"/>
            </type>
          </field>
          <field type="ident" def="error" name="err"/>
          <field type="pointer" name="bpool">
            <type type="selector">
              <prefix value="util"/>
              <item value="BufferPool"/>
            </type>
          </field>
          <field type="pointer" name="o">
            <type type="selector">
              <prefix value="opt"/>
              <item value="Options"/>
            </type>
          </field>
          <field type="selector" name="cmp">
            <prefix value="comparer"/>
            <item value="Comparer"/>
          </field>
          <field type="selector" name="filter">
            <prefix value="filter"/>
            <item value="Filter"/>
          </field>
          <field type="ident" def="bool" name="verifyChecksum"/>
          <field type="ident" def="int64" name="dataEnd"/>
          <field type="ident" def="blockHandle" name="metaBH"/>
          <field type="ident" def="blockHandle" name="indexBH"/>
          <field type="ident" def="blockHandle" name="filterBH"/>
          <field type="pointer" name="indexBlock">
            <type type="ident" def="block"/>
          </field>
          <field type="pointer" name="filterBlock">
            <type type="ident" def="filterBlock"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Append">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="BlocksLen">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="EntriesLen">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="BytesLen">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewWriter">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="Options"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ErrCorrupted"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="block"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="First">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Last">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetReleaser">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="util"/>
              <item value="Releaser"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="blockIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="filterBlock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="iterator"/>
              <item value="Iterator"/>
            </type>
          </resultsList>
        </function>
        <function name="NewIterator">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="util"/>
                <item value="Range"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="iterator"/>
              <item value="Iterator"/>
            </type>
          </resultsList>
        </function>
        <function name="Find">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="FindKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="OffsetOf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="NewReader">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="ReaderAt"/>
            </type>
            <type type="ident" def="int64"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="storage"/>
                <item value="FileInfo"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="cache"/>
                <item value="CacheGetter"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="util"/>
                <item value="BufferPool"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="Options"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ErrNotFound"/>
        <name value="ErrReaderReleased"/>
        <name value="ErrIterReleased"/>
      </names>
    </package>
    <package importpath="github.com/syndtr/goleveldb/leveldb">
      <types>
        <type type="struct" name="ErrManifestCorrupted">
          <field type="ident" def="string" name="Field"/>
          <field type="ident" def="string" name="Reason"/>
        </type>
        <type type="struct" name="ErrIkeyCorrupted">
          <field type="slice" name="Ikey">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="string" name="Reason"/>
        </type>
        <type name="Reader" type="interface">
          <method name="Get">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="pointer">
                <type type="selector">
                  <prefix value="opt"/>
                  <item value="ReadOptions"/>
                </type>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="NewIterator">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="util"/>
                  <item value="Range"/>
                </type>
              </type>
              <type type="pointer">
                <type type="selector">
                  <prefix value="opt"/>
                  <item value="ReadOptions"/>
                </type>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="iterator"/>
                <item value="Iterator"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="Sizes" type="slice">
          <elmtype type="ident" def="uint64"/>
        </type>
        <type type="struct" name="Snapshot">
          <field type="pointer" name="db">
            <type type="ident" def="DB"/>
          </field>
          <field type="pointer" name="elem">
            <type type="ident" def="snapshotElement"/>
          </field>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="ident" def="bool" name="released"/>
        </type>
        <type type="struct" name="DB">
          <field type="ident" def="uint64" name="seq"/>
          <field type="pointer" name="s">
            <type type="ident" def="session"/>
          </field>
          <field type="selector" name="memMu">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="channel" dir="3" name="memPool">
            <type type="pointer">
              <type type="selector">
                <prefix value="memdb"/>
                <item value="DB"/>
              </type>
            </type>
          </field>
          <field type="pointer" name="mem">
            <type type="ident" def="memDB"/>
          </field>
          <field type="pointer" name="frozenMem">
            <type type="ident" def="memDB"/>
          </field>
          <field type="pointer" name="journal">
            <type type="selector">
              <prefix value="journal"/>
              <item value="Writer"/>
            </type>
          </field>
          <field type="selector" name="journalWriter">
            <prefix value="storage"/>
            <item value="Writer"/>
          </field>
          <field type="selector" name="journalFile">
            <prefix value="storage"/>
            <item value="File"/>
          </field>
          <field type="selector" name="frozenJournalFile">
            <prefix value="storage"/>
            <item value="File"/>
          </field>
          <field type="ident" def="uint64" name="frozenSeq"/>
          <field type="selector" name="snapsMu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="pointer" name="snapsList">
            <type type="selector">
              <prefix value="list"/>
              <item value="List"/>
            </type>
          </field>
          <field type="ident" def="int32" name="aliveSnaps"/>
          <field type="ident" def="int32" name="aliveIters"/>
          <field type="channel" dir="3" name="writeC">
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </field>
          <field type="channel" dir="3" name="writeMergedC">
            <type type="ident" def="bool"/>
          </field>
          <field type="channel" dir="3" name="writeLockC">
            <type type="struct" name=""/>
          </field>
          <field type="channel" dir="3" name="writeAckC">
            <type type="ident" def="error"/>
          </field>
          <field type="selector" name="writeDelay">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="int" name="writeDelayN"/>
          <field type="channel" dir="3" name="journalC">
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </field>
          <field type="channel" dir="3" name="journalAckC">
            <type type="ident" def="error"/>
          </field>
          <field type="channel" dir="3" name="tcompCmdC">
            <type type="ident" def="cCmd"/>
          </field>
          <field type="channel" dir="3" name="tcompPauseC">
            <type type="channel" dir="1">
              <type type="struct" name=""/>
            </type>
          </field>
          <field type="channel" dir="3" name="mcompCmdC">
            <type type="ident" def="cCmd"/>
          </field>
          <field type="channel" dir="3" name="compErrC">
            <type type="ident" def="error"/>
          </field>
          <field type="channel" dir="3" name="compPerErrC">
            <type type="ident" def="error"/>
          </field>
          <field type="channel" dir="3" name="compErrSetC">
            <type type="ident" def="error"/>
          </field>
          <field type="slice" name="compStats">
            <elmtype type="ident" def="cStats"/>
          </field>
          <field type="selector" name="closeW">
            <prefix value="sync"/>
            <item value="WaitGroup"/>
          </field>
          <field type="channel" dir="3" name="closeC">
            <type type="struct" name=""/>
          </field>
          <field type="ident" def="uint32" name="closed"/>
          <field type="selector" name="closer">
            <prefix value="io"/>
            <item value="Closer"/>
          </field>
        </type>
        <type type="struct" name="ErrBatchCorrupted">
          <field type="ident" def="string" name="Reason"/>
        </type>
        <type name="BatchReplay" type="interface">
          <method name="Put">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Delete">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="Batch">
          <field type="slice" name="data">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="int" name="rLen"/>
          <field type="ident" def="int" name="bLen"/>
          <field type="ident" def="uint64" name="seq"/>
          <field type="ident" def="bool" name="sync"/>
        </type>
      </types>
      <functions>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="versionReleaser"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="files"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="files"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="files"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="tFiles"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="tFiles"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Search">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tFilesArrayIndexer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tFilesArrayIndexer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="iterator"/>
              <item value="Iterator"/>
            </type>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tFilesSortByKey"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tFilesSortByNum"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Drop">
          <recvList>
            <type type="ident" def="dropper"/>
          </recvList>
          <paramsList>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ErrManifestCorrupted"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetCompactionExpandLimit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="cachedOptions"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionGPOverlaps">
          <recvList>
            <type type="pointer">
              <type type="ident" def="cachedOptions"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionSourceLimit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="cachedOptions"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionTableSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="cachedOptions"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionTotalSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="cachedOptions"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ErrIkeyCorrupted"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="kType"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="iKey"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Contains">
          <recvList>
            <type type="ident" def="iFilter"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewGenerator">
          <recvList>
            <type type="ident" def="iFilter"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="filter"/>
              <item value="FilterGenerator"/>
            </type>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="ident" def="iFilterGenerator"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="WriteOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="WriteOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="WriteOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CompactRange">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="util"/>
              <item value="Range"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sum">
          <recvList>
            <type type="ident" def="Sizes"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Snapshot"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Snapshot"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Has">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Snapshot"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewIterator">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Snapshot"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="util"/>
                <item value="Range"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="iterator"/>
              <item value="Iterator"/>
            </type>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Snapshot"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memdbReleaser"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="First">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Last">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetReleaser">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="util"/>
              <item value="Releaser"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Open">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="Storage"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="Options"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="OpenFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="Options"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Recover">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="Storage"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="Options"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RecoverFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="Options"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Has">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewIterator">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="util"/>
                <item value="Range"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="opt"/>
                <item value="ReadOptions"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="iterator"/>
              <item value="Iterator"/>
            </type>
          </resultsList>
        </function>
        <function name="GetSnapshot">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Snapshot"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetProperty">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SizeOf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="util"/>
                <item value="Range"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Sizes"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="pointer">
              <type type="ident" def="iComparer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Compare">
          <recvList>
            <type type="pointer">
              <type type="ident" def="iComparer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Separator">
          <recvList>
            <type type="pointer">
              <type type="ident" def="iComparer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Successor">
          <recvList>
            <type type="pointer">
              <type type="ident" def="iComparer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ErrBatchCorrupted"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Dump">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Load">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Replay">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="BatchReplay"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Batch"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="ErrNotFound"/>
        <name value="ErrSnapshotReleased"/>
        <name value="ErrIterReleased"/>
        <name value="ErrClosed"/>
      </names>
    </package>
    <package importpath="github.com/syndtr/goleveldb/leveldb/storage">
      <types>
        <type name="FileType" type="ident">
          <type type="ident" def="uint32"/>
        </type>
        <type name="Syncer" type="interface">
          <method name="Sync">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Reader" type="interface"/>
        <type name="Writer" type="interface"/>
        <type name="File" type="interface">
          <method name="Open">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Reader"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Create">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Writer"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Replace">
            <paramsList>
              <type type="ident" def="File"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Type">
            <paramsList/>
            <resultsList>
              <type type="ident" def="FileType"/>
            </resultsList>
          </method>
          <method name="Num">
            <paramsList/>
            <resultsList>
              <type type="ident" def="uint64"/>
            </resultsList>
          </method>
          <method name="Remove">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Storage" type="interface">
          <method name="Lock">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="util"/>
                <item value="Releaser"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Log">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="GetFile">
            <paramsList>
              <type type="ident" def="uint64"/>
              <type type="ident" def="FileType"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="File"/>
            </resultsList>
          </method>
          <method name="GetFiles">
            <paramsList>
              <type type="ident" def="FileType"/>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="File"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="GetManifest">
            <paramsList/>
            <resultsList>
              <type type="ident" def="File"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="SetManifest">
            <paramsList>
              <type type="ident" def="File"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Close">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="FileInfo">
          <field type="ident" def="FileType" name="Type"/>
          <field type="ident" def="uint64" name="Num"/>
        </type>
      </types>
      <functions>
        <function name="String">
          <recvList>
            <type type="ident" def="FileType"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="FileInfo"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewFileInfo">
          <recvList/>
          <paramsList>
            <type type="ident" def="File"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="FileInfo"/>
            </type>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memStorageLock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="NewMemStorage">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Storage"/>
          </resultsList>
        </function>
        <function name="Lock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="util"/>
              <item value="Releaser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Log">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetFile">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="FileType"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="File"/>
          </resultsList>
        </function>
        <function name="GetFiles">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="FileType"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="File"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetManifest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="File"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetManifest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="File"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memReader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sync">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memFile"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Open">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memFilePtr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Reader"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Create">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memFilePtr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Writer"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Replace">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memFilePtr"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="File"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memFilePtr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="FileType"/>
          </resultsList>
        </function>
        <function name="Num">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memFilePtr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="Remove">
          <recvList>
            <type type="pointer">
              <type type="ident" def="memFilePtr"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileStorageLock"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="OpenFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Storage"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Lock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="util"/>
              <item value="Releaser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Log">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GetFile">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
            <type type="ident" def="FileType"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="File"/>
          </resultsList>
        </function>
        <function name="GetFiles">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="FileType"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="File"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetManifest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="File"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetManifest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileStorage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="File"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="fileStorage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sync">
          <recvList>
            <type type="ident" def="fileWrap"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="fileWrap"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Open">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Reader"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Create">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Writer"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Replace">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="File"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="FileType"/>
          </resultsList>
        </function>
        <function name="Num">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint64"/>
          </resultsList>
        </function>
        <function name="Remove">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="TypeManifest"/>
        <name value="TypeJournal"/>
        <name value="TypeTable"/>
        <name value="TypeTemp"/>
        <name value="TypeAll"/>
        <name value="ErrInvalidFile"/>
        <name value="ErrLocked"/>
        <name value="ErrClosed"/>
      </names>
    </package>
    <package importpath="github.com/syndtr/goleveldb/leveldb/memdb">
      <types>
        <type type="struct" name="DB">
          <field type="selector" name="cmp">
            <prefix value="comparer"/>
            <item value="BasicComparer"/>
          </field>
          <field type="pointer" name="rnd">
            <type type="selector">
              <prefix value="rand"/>
              <item value="Rand"/>
            </type>
          </field>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="slice" name="kvData">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="nodeData">
            <elmtype type="ident" def="int"/>
          </field>
          <field type="array" name="prevNode">
            <elmtype type="ident" def="int"/>
          </field>
          <field type="ident" def="int" name="maxHeight"/>
          <field type="ident" def="int" name="n"/>
          <field type="ident" def="int" name="kvSize"/>
        </type>
      </types>
      <functions>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="First">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Last">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="dbIter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Contains">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Find">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewIterator">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="util"/>
                <item value="Range"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="iterator"/>
              <item value="Iterator"/>
            </type>
          </resultsList>
        </function>
        <function name="Capacity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Size">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Free">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="comparer"/>
              <item value="BasicComparer"/>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="DB"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ErrNotFound"/>
        <name value="ErrIterReleased"/>
      </names>
    </package>
    <package importpath="github.com/syndtr/goleveldb/leveldb/util">
      <types>
        <type name="Releaser" type="interface">
          <method name="Release">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type name="ReleaseSetter" type="interface">
          <method name="SetReleaser">
            <paramsList>
              <type type="ident" def="Releaser"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="BasicReleaser">
          <field type="ident" def="Releaser" name="releaser"/>
          <field type="ident" def="bool" name="released"/>
        </type>
        <type type="struct" name="NoopReleaser"/>
        <type type="struct" name="Range">
          <field type="slice" name="Start">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="Limit">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Pool">
          <field type="channel" dir="3" name="pool">
            <type type="interface"/>
          </field>
        </type>
        <type type="struct" name="Pool">
          <field type="selector" name="">
            <prefix value="sync"/>
            <item value="Pool"/>
          </field>
        </type>
        <type name="CRC" type="ident">
          <type type="ident" def="uint32"/>
        </type>
        <type type="struct" name="BufferPool">
          <field type="array" name="pool">
            <elmtype type="channel" dir="3">
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </elmtype>
          </field>
          <field type="array" name="size">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="array" name="sizeMiss">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="array" name="sizeHalf">
            <elmtype type="ident" def="uint32"/>
          </field>
          <field type="array" name="baseline">
            <elmtype type="ident" def="int"/>
          </field>
          <field type="ident" def="int" name="baseline0"/>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="ident" def="bool" name="closed"/>
          <field type="channel" dir="3" name="closeC">
            <type type="struct" name=""/>
          </field>
          <field type="ident" def="uint32" name="get"/>
          <field type="ident" def="uint32" name="put"/>
          <field type="ident" def="uint32" name="half"/>
          <field type="ident" def="uint32" name="less"/>
          <field type="ident" def="uint32" name="equal"/>
          <field type="ident" def="uint32" name="greater"/>
          <field type="ident" def="uint32" name="miss"/>
        </type>
        <type type="struct" name="Buffer">
          <field type="slice" name="buf">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="int" name="off"/>
          <field type="array" name="bootstrap">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Released">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BasicReleaser"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BasicReleaser"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetReleaser">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BasicReleaser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Releaser"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Release">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="BytesPrefix">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Range"/>
            </type>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Pool"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Pool"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewPool">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Pool"/>
            </type>
          </resultsList>
        </function>
        <function name="NewPool">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Pool"/>
            </type>
          </resultsList>
        </function>
        <function name="Hash">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="uint32"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="NewCRC">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="CRC"/>
          </resultsList>
        </function>
        <function name="Update">
          <recvList>
            <type type="ident" def="CRC"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="CRC"/>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="ident" def="CRC"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BufferPool"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BufferPool"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BufferPool"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="BufferPool"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewBufferPool">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="BufferPool"/>
            </type>
          </resultsList>
        </function>
        <function name="Bytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Truncate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Alloc">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Grow">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadFrom">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteTo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="WriteByte">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="byte"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="ReadByte">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="byte"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadBytes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="byte"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewBuffer">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ErrReleased"/>
        <name value="ErrHasReleaser"/>
        <name value="MinRead"/>
      </names>
    </package>
    <package importpath="github.com/syndtr/goleveldb/leveldb/opt">
      <types>
        <type name="Cacher" type="interface">
          <method name="New">
            <paramsList>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="cache"/>
                <item value="Cacher"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="CacherFunc">
          <field type="func" name="NewFunc">
            <paramsList>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="cache"/>
                <item value="Cacher"/>
              </type>
            </resultsList>
          </field>
        </type>
        <type name="Compression" type="ident">
          <type type="ident" def="uint"/>
        </type>
        <type name="Strict" type="ident">
          <type type="ident" def="uint"/>
        </type>
        <type type="struct" name="Options">
          <field type="slice" name="AltFilters">
            <elmtype type="selector">
              <prefix value="filter"/>
              <item value="Filter"/>
            </elmtype>
          </field>
          <field type="ident" def="Cacher" name="BlockCacher"/>
          <field type="ident" def="int" name="BlockCacheCapacity"/>
          <field type="ident" def="int" name="BlockRestartInterval"/>
          <field type="ident" def="int" name="BlockSize"/>
          <field type="ident" def="int" name="CompactionExpandLimitFactor"/>
          <field type="ident" def="int" name="CompactionGPOverlapsFactor"/>
          <field type="ident" def="int" name="CompactionL0Trigger"/>
          <field type="ident" def="int" name="CompactionSourceLimitFactor"/>
          <field type="ident" def="int" name="CompactionTableSize"/>
          <field type="ident" def="float64" name="CompactionTableSizeMultiplier"/>
          <field type="slice" name="CompactionTableSizeMultiplierPerLevel">
            <elmtype type="ident" def="float64"/>
          </field>
          <field type="ident" def="int" name="CompactionTotalSize"/>
          <field type="ident" def="float64" name="CompactionTotalSizeMultiplier"/>
          <field type="slice" name="CompactionTotalSizeMultiplierPerLevel">
            <elmtype type="ident" def="float64"/>
          </field>
          <field type="selector" name="Comparer">
            <prefix value="comparer"/>
            <item value="Comparer"/>
          </field>
          <field type="ident" def="Compression" name="Compression"/>
          <field type="ident" def="bool" name="DisableBlockCache"/>
          <field type="ident" def="bool" name="DisableCompactionBackoff"/>
          <field type="ident" def="bool" name="ErrorIfExist"/>
          <field type="ident" def="bool" name="ErrorIfMissing"/>
          <field type="selector" name="Filter">
            <prefix value="filter"/>
            <item value="Filter"/>
          </field>
          <field type="ident" def="int" name="IteratorSamplingRate"/>
          <field type="ident" def="int" name="MaxMemCompationLevel"/>
          <field type="ident" def="int" name="NumLevel"/>
          <field type="ident" def="Cacher" name="OpenFilesCacher"/>
          <field type="ident" def="int" name="OpenFilesCacheCapacity"/>
          <field type="ident" def="Strict" name="Strict"/>
          <field type="ident" def="int" name="WriteBuffer"/>
          <field type="ident" def="int" name="WriteL0PauseTrigger"/>
          <field type="ident" def="int" name="WriteL0SlowdownTrigger"/>
        </type>
        <type type="struct" name="ReadOptions">
          <field type="ident" def="bool" name="DontFillCache"/>
          <field type="ident" def="Strict" name="Strict"/>
        </type>
        <type type="struct" name="WriteOptions">
          <field type="ident" def="bool" name="Sync"/>
        </type>
      </types>
      <functions>
        <function name="New">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CacherFunc"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="cache"/>
              <item value="Cacher"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Compression"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetAltFilters">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="filter"/>
                <item value="Filter"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="GetBlockCacher">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Cacher"/>
          </resultsList>
        </function>
        <function name="GetBlockCacheCapacity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetBlockRestartInterval">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetBlockSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionExpandLimit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionGPOverlaps">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionL0Trigger">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionSourceLimit">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionTableSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetCompactionTotalSize">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="GetComparer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="comparer"/>
              <item value="Comparer"/>
            </type>
          </resultsList>
        </function>
        <function name="GetCompression">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Compression"/>
          </resultsList>
        </function>
        <function name="GetDisableCompactionBackoff">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetErrorIfExist">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetErrorIfMissing">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetFilter">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="filter"/>
              <item value="Filter"/>
            </type>
          </resultsList>
        </function>
        <function name="GetIteratorSamplingRate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetMaxMemCompationLevel">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetNumLevel">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetOpenFilesCacher">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Cacher"/>
          </resultsList>
        </function>
        <function name="GetOpenFilesCacheCapacity">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetStrict">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Strict"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetWriteBuffer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetWriteL0PauseTrigger">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetWriteL0SlowdownTrigger">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GetDontFillCache">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ReadOptions"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetStrict">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ReadOptions"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Strict"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetSync">
          <recvList>
            <type type="pointer">
              <type type="ident" def="WriteOptions"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetStrict">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Options"/>
            </type>
            <type type="pointer">
              <type type="ident" def="ReadOptions"/>
            </type>
            <type type="ident" def="Strict"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="KiB"/>
        <name value="MiB"/>
        <name value="GiB"/>
        <name value="DefaultBlockCacher"/>
        <name value="DefaultBlockCacheCapacity"/>
        <name value="DefaultBlockRestartInterval"/>
        <name value="DefaultBlockSize"/>
        <name value="DefaultCompactionExpandLimitFactor"/>
        <name value="DefaultCompactionGPOverlapsFactor"/>
        <name value="DefaultCompactionL0Trigger"/>
        <name value="DefaultCompactionSourceLimitFactor"/>
        <name value="DefaultCompactionTableSize"/>
        <name value="DefaultCompactionTableSizeMultiplier"/>
        <name value="DefaultCompactionTotalSize"/>
        <name value="DefaultCompactionTotalSizeMultiplier"/>
        <name value="DefaultCompressionType"/>
        <name value="DefaultIteratorSamplingRate"/>
        <name value="DefaultMaxMemCompationLevel"/>
        <name value="DefaultNumLevel"/>
        <name value="DefaultOpenFilesCacher"/>
        <name value="DefaultOpenFilesCacheCapacity"/>
        <name value="DefaultWriteBuffer"/>
        <name value="DefaultWriteL0PauseTrigger"/>
        <name value="DefaultWriteL0SlowdownTrigger"/>
        <name value="LRUCacher"/>
        <name value="NoCacher"/>
        <name value="DefaultCompression"/>
        <name value="NoCompression"/>
        <name value="SnappyCompression"/>
        <name value="StrictManifest"/>
        <name value="StrictJournalChecksum"/>
        <name value="StrictJournal"/>
        <name value="StrictBlockChecksum"/>
        <name value="StrictCompaction"/>
        <name value="StrictReader"/>
        <name value="StrictRecovery"/>
        <name value="StrictOverride"/>
        <name value="StrictAll"/>
        <name value="DefaultStrict"/>
        <name value="NoStrict"/>
      </names>
    </package>
    <package importpath="github.com/syndtr/goleveldb/leveldb/comparer">
      <types>
        <type name="BasicComparer" type="interface">
          <method name="Compare">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
        </type>
        <type name="Comparer" type="interface">
          <method name="Name">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="Separator">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
          <method name="Successor">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="Compare">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Separator">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Successor">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="DefaultComparer"/>
      </names>
    </package>
    <package importpath="github.com/syndtr/goleveldb/leveldb/errors">
      <types>
        <type type="struct" name="ErrCorrupted">
          <field type="pointer" name="File">
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileInfo"/>
            </type>
          </field>
          <field type="ident" def="error" name="Err"/>
        </type>
        <type type="struct" name="ErrMissingFiles">
          <field type="slice" name="Files">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="storage"/>
                <item value="FileInfo"/>
              </type>
            </elmtype>
          </field>
        </type>
      </types>
      <functions>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ErrCorrupted"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewErrCorrupted">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="File"/>
            </type>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="IsCorrupted">
          <recvList/>
          <paramsList>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ErrMissingFiles"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="SetFile">
          <recvList/>
          <paramsList>
            <type type="ident" def="error"/>
            <type type="selector">
              <prefix value="storage"/>
              <item value="File"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ErrNotFound"/>
        <name value="ErrReleased"/>
        <name value="ErrHasReleaser"/>
      </names>
    </package>
    <package importpath="github.com/syndtr/goleveldb/leveldb/filter">
      <types>
        <type name="Buffer" type="interface">
          <method name="Alloc">
            <paramsList>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
          <method name="Write">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="WriteByte">
            <paramsList>
              <type type="ident" def="byte"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Filter" type="interface">
          <method name="Name">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="NewGenerator">
            <paramsList/>
            <resultsList>
              <type type="ident" def="FilterGenerator"/>
            </resultsList>
          </method>
          <method name="Contains">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
        </type>
        <type name="FilterGenerator" type="interface">
          <method name="Add">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Generate">
            <paramsList>
              <type type="ident" def="Buffer"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
      </types>
      <functions>
        <function name="Name">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Contains">
          <recvList>
            <type type="ident" def="bloomFilter"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewGenerator">
          <recvList>
            <type type="ident" def="bloomFilter"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="FilterGenerator"/>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="bloomFilterGenerator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Generate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="bloomFilterGenerator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Buffer"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewBloomFilter">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Filter"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/syndtr/goleveldb/leveldb/iterator">
      <types>
        <type name="IteratorSeeker" type="interface">
          <method name="First">
            <paramsList/>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Last">
            <paramsList/>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Seek">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Next">
            <paramsList/>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Prev">
            <paramsList/>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
        </type>
        <type name="CommonIterator" type="interface">
          <method name="Valid">
            <paramsList/>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Error">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Iterator" type="interface">
          <method name="Key">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
          <method name="Value">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="ErrorCallbackSetter" type="interface">
          <method name="SetErrorCallback">
            <paramsList>
              <type type="func">
                <paramsList>
                  <type type="ident" def="error"/>
                </paramsList>
                <resultsList/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type name="IteratorIndexer" type="interface">
          <method name="Get">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Iterator"/>
            </resultsList>
          </method>
        </type>
        <type name="BasicArray" type="interface">
          <method name="Len">
            <paramsList/>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
          <method name="Search">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
        </type>
        <type name="Array" type="interface">
          <method name="Index">
            <paramsList>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="ArrayIndexer" type="interface">
          <method name="Get">
            <paramsList>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="Iterator"/>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="First">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Last">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetReleaser">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="util"/>
              <item value="Releaser"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetErrorCallback">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mergedIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="error"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewMergedIterator">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="Iterator"/>
            </type>
            <type type="selector">
              <prefix value="comparer"/>
              <item value="Comparer"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Iterator"/>
          </resultsList>
        </function>
        <function name="Valid">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="First">
          <recvList>
            <type type="pointer">
              <type type="ident" def="emptyIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Last">
          <recvList>
            <type type="pointer">
              <type type="ident" def="emptyIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="emptyIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="emptyIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="emptyIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="emptyIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewEmptyIterator">
          <recvList/>
          <paramsList>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Iterator"/>
          </resultsList>
        </function>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="First">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Last">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetErrorCallback">
          <recvList>
            <type type="pointer">
              <type type="ident" def="indexedIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="error"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewIndexedIterator">
          <recvList/>
          <paramsList>
            <type type="ident" def="IteratorIndexer"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Iterator"/>
          </resultsList>
        </function>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="basicArrayIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="First">
          <recvList>
            <type type="pointer">
              <type type="ident" def="basicArrayIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Last">
          <recvList>
            <type type="pointer">
              <type type="ident" def="basicArrayIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="basicArrayIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="basicArrayIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="basicArrayIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="basicArrayIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="arrayIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="arrayIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="arrayIteratorIndexer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Iterator"/>
          </resultsList>
        </function>
        <function name="NewArrayIterator">
          <recvList/>
          <paramsList>
            <type type="ident" def="Array"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Iterator"/>
          </resultsList>
        </function>
        <function name="NewArrayIndexer">
          <recvList/>
          <paramsList>
            <type type="ident" def="ArrayIndexer"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="IteratorIndexer"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ErrIterReleased"/>
      </names>
    </package>
    <package importpath="github.com/syndtr/goleveldb/leveldb/testutil">
      <types>
        <type name="StorageMode" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="Storage">
          <field type="selector" name="">
            <prefix value="storage"/>
            <item value="Storage"/>
          </field>
          <field type="func" name="closeFn">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </field>
          <field type="selector" name="lmu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="selector" name="lb">
            <prefix value="bytes"/>
            <item value="Buffer"/>
          </field>
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="map" name="opens">
            <keytype type="ident" def="uint64"/>
            <valtype type="ident" def="bool"/>
          </field>
          <field type="array" name="counters">
            <elmtype type="ident" def="int"/>
          </field>
          <field type="array" name="bytesCounter">
            <elmtype type="ident" def="int64"/>
          </field>
          <field type="array" name="emulatedError">
            <elmtype type="ident" def="error"/>
          </field>
          <field type="selector" name="stallCond">
            <prefix value="sync"/>
            <item value="Cond"/>
          </field>
          <field type="array" name="stalled">
            <elmtype type="ident" def="bool"/>
          </field>
        </type>
        <type type="struct" name="KeyValueEntry">
          <field type="slice" name="key">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="value">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="KeyValue">
          <field type="slice" name="entries">
            <elmtype type="ident" def="KeyValueEntry"/>
          </field>
          <field type="ident" def="int" name="nbytes"/>
        </type>
        <type name="IterAct" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="IteratorTesting">
          <field type="ident" def="KeyValue" name=""/>
          <field type="selector" name="Iter">
            <prefix value="iterator"/>
            <item value="Iterator"/>
          </field>
          <field type="pointer" name="Rand">
            <type type="selector">
              <prefix value="rand"/>
              <item value="Rand"/>
            </type>
          </field>
          <field type="func" name="PostFn">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="IteratorTesting"/>
              </type>
            </paramsList>
            <resultsList/>
          </field>
          <field type="ident" def="int" name="Pos"/>
          <field type="ident" def="IterAct" name="Act"/>
          <field type="ident" def="IterAct" name="LastAct"/>
          <field type="ident" def="bool" name="once"/>
        </type>
        <type name="DB" type="interface"/>
        <type name="Put" type="interface">
          <method name="TestPut">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Delete" type="interface">
          <method name="TestDelete">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Find" type="interface">
          <method name="TestFind">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Get" type="interface">
          <method name="TestGet">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Has" type="interface">
          <method name="TestHas">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="NewIterator" type="interface">
          <method name="TestNewIterator">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="util"/>
                  <item value="Range"/>
                </type>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="iterator"/>
                <item value="Iterator"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="DBAct" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="DBTesting">
          <field type="pointer" name="Rand">
            <type type="selector">
              <prefix value="rand"/>
              <item value="Rand"/>
            </type>
          </field>
          <field type="interface" name="DB"/>
          <field type="func" name="PostFn">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="DBTesting"/>
              </type>
            </paramsList>
            <resultsList/>
          </field>
          <field type="ident" def="KeyValue" name="Deleted"/>
          <field type="ident" def="KeyValue" name="Present"/>
          <field type="ident" def="DBAct" name="Act"/>
          <field type="ident" def="DBAct" name="LastAct"/>
          <field type="slice" name="ActKey">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="LastActKey">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Defer">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="RunDefer">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="RandomSeed">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="NewRand">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="BytesSeparator">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="BytesAfter">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="RandomIndex">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ShuffledIndex">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RandomRange">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
                <type type="ident" def="int"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Max">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Min">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="emulatedError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Release">
          <recvList>
            <type type="ident" def="storageLock"/>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadAt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="int64"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="reader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="writer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Sync">
          <recvList>
            <type type="pointer">
              <type type="ident" def="writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Open">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Create">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Remove">
          <recvList>
            <type type="pointer">
              <type type="ident" def="file"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Log">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Lock">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="util"/>
              <item value="Releaser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetFile">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint64"/>
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileType"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="File"/>
            </type>
          </resultsList>
        </function>
        <function name="GetFiles">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileType"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="storage"/>
                <item value="File"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GetManifest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="File"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetManifest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="File"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ResetCounter">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="StorageMode"/>
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileType"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Counter">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="StorageMode"/>
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileType"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int64"/>
          </resultsList>
        </function>
        <function name="EmulateError">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="StorageMode"/>
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileType"/>
            </type>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Stall">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="StorageMode"/>
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileType"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Release">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="StorageMode"/>
            <type type="selector">
              <prefix value="storage"/>
              <item value="FileType"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewStorage">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Storage"/>
            </type>
          </resultsList>
        </function>
        <function name="KeyValueTesting">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
            <type type="ident" def="KeyValue"/>
            <type type="ident" def="DB"/>
            <type type="func">
              <paramsList>
                <type type="ident" def="KeyValue"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="DB"/>
              </resultsList>
            </type>
            <type type="func">
              <paramsList>
                <type type="ident" def="DB"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AllKeyValueTesting">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
            <type type="func">
              <paramsList>
                <type type="ident" def="KeyValue"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="DB"/>
              </resultsList>
            </type>
            <type type="func">
              <paramsList>
                <type type="ident" def="KeyValue"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="DB"/>
              </resultsList>
            </type>
            <type type="func">
              <paramsList>
                <type type="ident" def="DB"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PutString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PutU">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="PutUString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="DeleteIndex">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Size">
          <recvList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="KeyAt">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="ValueAt">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Index">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="IndexInexact">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="IndexOrNil">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="IndexString">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Search">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="SearchString">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="GetString">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Iterate">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="IterateString">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
                <type type="ident" def="string"/>
                <type type="ident" def="string"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="IterateShuffled">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="IterateShuffledString">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
                <type type="ident" def="string"/>
                <type type="ident" def="string"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="IterateInexact">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="IterateInexactString">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
                <type type="ident" def="string"/>
                <type type="ident" def="string"/>
                <type type="ident" def="string"/>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Clone">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="KeyValue"/>
          </resultsList>
        </function>
        <function name="Slice">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="KeyValue"/>
          </resultsList>
        </function>
        <function name="SliceKey">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="KeyValue"/>
          </resultsList>
        </function>
        <function name="SliceKeyString">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="KeyValue"/>
          </resultsList>
        </function>
        <function name="SliceRange">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="util"/>
                <item value="Range"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="KeyValue"/>
          </resultsList>
        </function>
        <function name="Range">
          <recvList>
            <type type="ident" def="KeyValue"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="util"/>
              <item value="Range"/>
            </type>
          </resultsList>
        </function>
        <function name="KeyValue_EmptyKey">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </resultsList>
        </function>
        <function name="KeyValue_EmptyValue">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </resultsList>
        </function>
        <function name="KeyValue_OneKeyValue">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </resultsList>
        </function>
        <function name="KeyValue_BigValue">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </resultsList>
        </function>
        <function name="KeyValue_SpecialKey">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </resultsList>
        </function>
        <function name="KeyValue_MultipleKeyValue">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </resultsList>
        </function>
        <function name="KeyValue_Generate">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="KeyValue"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="IterAct"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Text">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="IsFirst">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="IsLast">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="TestKV">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="First">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Last">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SeekInexact">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SeekKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SOI">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="EOI">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="WalkPrev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="pointer">
                  <type type="ident" def="IteratorTesting"/>
                </type>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="WalkNext">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="pointer">
                  <type type="ident" def="IteratorTesting"/>
                </type>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PrevAll">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="NextAll">
          <recvList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="DoIteratorTesting">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="IteratorTesting"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RunSuite">
          <recvList/>
          <paramsList>
            <type type="ident" def="GinkgoTestingT"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="DBAct"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Text">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="TestPresentKV">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="TestAllPresent">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="TestDeletedKey">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="TestAllDeleted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="TestAll">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PutRandom">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Delete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="DeleteRandom">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="RandomAct">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="DoDBTesting">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="DBTesting"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="ModeOpen"/>
        <name value="ModeCreate"/>
        <name value="ModeRemove"/>
        <name value="ModeRead"/>
        <name value="ModeWrite"/>
        <name value="ModeSync"/>
        <name value="ModeClose"/>
        <name value="IterNone"/>
        <name value="IterFirst"/>
        <name value="IterLast"/>
        <name value="IterPrev"/>
        <name value="IterNext"/>
        <name value="IterSeek"/>
        <name value="IterSOI"/>
        <name value="IterEOI"/>
        <name value="DBNone"/>
        <name value="DBPut"/>
        <name value="DBOverwrite"/>
        <name value="DBDelete"/>
        <name value="DBDeleteNA"/>
      </names>
    </package>
    <package importpath="github.com/syndtr/goleveldb/leveldb/journal">
      <types>
        <type type="struct" name="ErrCorrupted">
          <field type="ident" def="int" name="Size"/>
          <field type="ident" def="string" name="Reason"/>
        </type>
        <type name="Dropper" type="interface">
          <method name="Drop">
            <paramsList>
              <type type="ident" def="error"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="Reader">
          <field type="selector" name="r">
            <prefix value="io"/>
            <item value="Reader"/>
          </field>
          <field type="ident" def="Dropper" name="dropper"/>
          <field type="ident" def="bool" name="strict"/>
          <field type="ident" def="bool" name="checksum"/>
          <field type="ident" def="int" name="seq"/>
          <field type="ident" def="int" name="i"/>
          <field type="ident" def="int" name="j"/>
          <field type="ident" def="int" name="n"/>
          <field type="ident" def="bool" name="last"/>
          <field type="ident" def="error" name="err"/>
          <field type="array" name="buf">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Writer">
          <field type="selector" name="w">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="ident" def="int" name="seq"/>
          <field type="ident" def="flusher" name="f"/>
          <field type="ident" def="int" name="i"/>
          <field type="ident" def="int" name="j"/>
          <field type="ident" def="int" name="written"/>
          <field type="ident" def="bool" name="first"/>
          <field type="ident" def="bool" name="pending"/>
          <field type="ident" def="error" name="err"/>
          <field type="array" name="buf">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ErrCorrupted"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewReader">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="Dropper"/>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="Dropper"/>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="singleReader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReadByte">
          <recvList>
            <type type="pointer">
              <type type="ident" def="singleReader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="byte"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewWriter">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Flush">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="ident" def="singleWriter"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
  </packages>
  <imports>
    <import path="bufio"/>
    <import path="bytes"/>
    <import path="flag"/>
    <import path="fmt"/>
    <import path="os"/>
    <import path="os/exec"/>
    <import path="path/filepath"/>
    <import path="github.com/syndtr/goleveldb/leveldb/storage"/>
    <import path="crypto/rand"/>
    <import path="encoding/binary"/>
    <import path="log"/>
    <import path="math/rand"/>
    <import path="net/http"/>
    <import path="net/http/pprof"/>
    <import path="os/signal"/>
    <import path="path"/>
    <import path="runtime"/>
    <import path="strconv"/>
    <import path="strings"/>
    <import path="sync"/>
    <import path="sync/atomic"/>
    <import path="time"/>
    <import path="github.com/syndtr/goleveldb/leveldb"/>
    <import path="github.com/syndtr/goleveldb/leveldb/errors"/>
    <import path="github.com/syndtr/goleveldb/leveldb/opt"/>
    <import path="github.com/syndtr/goleveldb/leveldb/table"/>
    <import path="github.com/syndtr/goleveldb/leveldb/util"/>
    <import path="unsafe"/>
    <import path="github.com/syndtr/goleveldb/leveldb/iterator"/>
    <import path="sort"/>
    <import path="github.com/syndtr/goleveldb/leveldb/cache"/>
    <import path="github.com/syndtr/goleveldb/leveldb/journal"/>
    <import path="io"/>
    <import path="github.com/syndtr/goleveldb/leveldb/filter"/>
    <import path="github.com/syndtr/goleveldb/leveldb/memdb"/>
    <import path="container/list"/>
    <import path="errors"/>
    <import path="github.com/syndtr/goleveldb/leveldb/comparer"/>
    <import path="hash/crc32"/>
    <import path="reflect"/>
    <import path="github.com/onsi/ginkgo/config"/>
    <import path="github.com/onsi/gomega"/>
    <import path="github.com/onsi/ginkgo"/>
    <import path="github.com/syndtr/gosnappy/snappy"/>
    <import path="syscall"/>
    <import path="io/ioutil"/>
    <import path="math"/>
  </imports>
</project>
