<?xml version='1.0' encoding='ASCII'?>
<project ipprefix="" commit="commit" nvr="golang-github-onsi-ginkgo-1.1.0-4.fc24">
  <packages>
    <package importpath="github.com/onsi/ginkgo/integration/_fixtures/failing_ginkgo_tests">
      <types/>
      <functions>
        <function name="AlwaysFalse">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/integration/_fixtures/watch_fixtures/D">
      <types/>
      <functions>
        <function name="DoIt">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/integration">
      <types/>
      <functions/>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/internal/containernode">
      <types>
        <type type="struct" name="CollatedNodes">
          <field type="slice" name="Containers">
            <elmtype type="pointer">
              <type type="ident" def="ContainerNode"/>
            </elmtype>
          </field>
          <field type="selector" name="Subject">
            <prefix value="leafnodes"/>
            <item value="SubjectNode"/>
          </field>
        </type>
        <type type="struct" name="ContainerNode">
          <field type="ident" def="string" name="text"/>
          <field type="selector" name="flag">
            <prefix value="types"/>
            <item value="FlagType"/>
          </field>
          <field type="selector" name="codeLocation">
            <prefix value="types"/>
            <item value="CodeLocation"/>
          </field>
          <field type="slice" name="setupNodes">
            <elmtype type="selector">
              <prefix value="leafnodes"/>
              <item value="BasicNode"/>
            </elmtype>
          </field>
          <field type="slice" name="subjectAndContainerNodes">
            <elmtype type="ident" def="subjectOrContainerNode"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="FlagType"/>
            </type>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="ContainerNode"/>
            </type>
          </resultsList>
        </function>
        <function name="Shuffle">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainerNode"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="BackPropagateProgrammaticFocus">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainerNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Collate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainerNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="CollatedNodes"/>
            </type>
          </resultsList>
        </function>
        <function name="PushContainerNode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainerNode"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="ContainerNode"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PushSubjectNode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainerNode"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="leafnodes"/>
              <item value="SubjectNode"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PushSetupNode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainerNode"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="leafnodes"/>
              <item value="BasicNode"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetupNodesOfType">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainerNode"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="SpecComponentType"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="leafnodes"/>
                <item value="BasicNode"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Text">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainerNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="CodeLocation">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainerNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
          </resultsList>
        </function>
        <function name="Flag">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainerNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="FlagType"/>
            </type>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainerNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainerNode"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ContainerNode"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/integration/_fixtures/coverage_fixture/external_coverage_fixture">
      <types/>
      <functions>
        <function name="Tested">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Untested">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/ginkgo/convert">
      <types/>
      <functions>
        <function name="RewritePackage">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/internal/writer">
      <types>
        <type name="WriterInterface" type="interface">
          <method name="Truncate">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="DumpOut">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="DumpOutWithHeader">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="Writer">
          <field type="pointer" name="buffer">
            <type type="selector">
              <prefix value="bytes"/>
              <item value="Buffer"/>
            </type>
          </field>
          <field type="selector" name="outWriter">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="pointer" name="lock">
            <type type="selector">
              <prefix value="sync"/>
              <item value="Mutex"/>
            </type>
          </field>
          <field type="ident" def="bool" name="stream"/>
        </type>
        <type type="struct" name="FakeGinkgoWriter">
          <field type="slice" name="EventStream">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </resultsList>
        </function>
        <function name="SetStream">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Truncate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="DumpOut">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="DumpOutWithHeader">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewFake">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="FakeGinkgoWriter"/>
            </type>
          </resultsList>
        </function>
        <function name="AddEvent">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeGinkgoWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Truncate">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeGinkgoWriter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="DumpOut">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeGinkgoWriter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="DumpOutWithHeader">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeGinkgoWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeGinkgoWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/ginkgo/nodot">
      <types/>
      <functions>
        <function name="ApplyNoDot">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/ginkgo/interrupthandler">
      <types>
        <type type="struct" name="InterruptHandler">
          <field type="ident" def="int" name="interruptCount"/>
          <field type="pointer" name="lock">
            <type type="selector">
              <prefix value="sync"/>
              <item value="Mutex"/>
            </type>
          </field>
          <field type="channel" dir="3" name="C">
            <type type="ident" def="bool"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="SwallowSigQuit">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SwallowSigQuit">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="NewInterruptHandler">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="InterruptHandler"/>
            </type>
          </resultsList>
        </function>
        <function name="WasInterrupted">
          <recvList>
            <type type="pointer">
              <type type="ident" def="InterruptHandler"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/config">
      <types>
        <type type="struct" name="GinkgoConfigType">
          <field type="ident" def="int64" name="RandomSeed"/>
          <field type="ident" def="bool" name="RandomizeAllSpecs"/>
          <field type="ident" def="string" name="FocusString"/>
          <field type="ident" def="string" name="SkipString"/>
          <field type="ident" def="bool" name="SkipMeasurements"/>
          <field type="ident" def="bool" name="FailOnPending"/>
          <field type="ident" def="bool" name="FailFast"/>
          <field type="ident" def="bool" name="EmitSpecProgress"/>
          <field type="ident" def="bool" name="DryRun"/>
          <field type="ident" def="int" name="ParallelNode"/>
          <field type="ident" def="int" name="ParallelTotal"/>
          <field type="ident" def="string" name="SyncHost"/>
          <field type="ident" def="string" name="StreamHost"/>
        </type>
        <type type="struct" name="DefaultReporterConfigType">
          <field type="ident" def="bool" name="NoColor"/>
          <field type="ident" def="float64" name="SlowSpecThreshold"/>
          <field type="ident" def="bool" name="NoisyPendings"/>
          <field type="ident" def="bool" name="Succinct"/>
          <field type="ident" def="bool" name="Verbose"/>
          <field type="ident" def="bool" name="FullTrace"/>
        </type>
      </types>
      <functions>
        <function name="Flags">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="flag"/>
                <item value="FlagSet"/>
              </type>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="BuildFlagArgs">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="GinkgoConfigType"/>
            <type type="ident" def="DefaultReporterConfigType"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="VERSION"/>
        <name value="GinkgoConfig"/>
        <name value="DefaultReporterConfig"/>
      </names>
    </package>
    <package importpath="github.com/onsi/ginkgo/integration/_fixtures/watch_fixtures/B">
      <types/>
      <functions>
        <function name="DoIt">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/internal/remote">
      <types>
        <type type="struct" name="Server">
          <field type="selector" name="listener">
            <prefix value="net"/>
            <item value="Listener"/>
          </field>
          <field type="slice" name="reporters">
            <elmtype type="selector">
              <prefix value="reporters"/>
              <item value="Reporter"/>
            </elmtype>
          </field>
          <field type="slice" name="alives">
            <elmtype type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="bool"/>
              </resultsList>
            </elmtype>
          </field>
          <field type="pointer" name="lock">
            <type type="selector">
              <prefix value="sync"/>
              <item value="Mutex"/>
            </type>
          </field>
          <field type="selector" name="beforeSuiteData">
            <prefix value="types"/>
            <item value="RemoteBeforeSuiteData"/>
          </field>
          <field type="ident" def="int" name="parallelTotal"/>
        </type>
        <type name="OutputInterceptor" type="interface">
          <method name="StartInterceptingOutput">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="StopInterceptingAndReturnOutput">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Poster" type="interface">
          <method name="Post">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ident" def="string"/>
              <type type="selector">
                <prefix value="io"/>
                <item value="Reader"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="http"/>
                  <item value="Response"/>
                </type>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="ForwardingReporter">
          <field type="ident" def="string" name="serverHost"/>
          <field type="ident" def="Poster" name="poster"/>
          <field type="ident" def="OutputInterceptor" name="outputInterceptor"/>
        </type>
        <type type="struct" name="Aggregator">
          <field type="ident" def="int" name="nodeCount"/>
          <field type="selector" name="config">
            <prefix value="config"/>
            <item value="DefaultReporterConfigType"/>
          </field>
          <field type="selector" name="stenographer">
            <prefix value="stenographer"/>
            <item value="Stenographer"/>
          </field>
          <field type="channel" dir="3" name="result">
            <type type="ident" def="bool"/>
          </field>
          <field type="channel" dir="3" name="suiteBeginnings">
            <type type="ident" def="configAndSuite"/>
          </field>
          <field type="slice" name="aggregatedSuiteBeginnings">
            <elmtype type="ident" def="configAndSuite"/>
          </field>
          <field type="channel" dir="3" name="beforeSuites">
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
          </field>
          <field type="slice" name="aggregatedBeforeSuites">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </elmtype>
          </field>
          <field type="channel" dir="3" name="afterSuites">
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
          </field>
          <field type="slice" name="aggregatedAfterSuites">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </elmtype>
          </field>
          <field type="channel" dir="3" name="specCompletions">
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </field>
          <field type="slice" name="completedSpecs">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </elmtype>
          </field>
          <field type="channel" dir="3" name="suiteEndings">
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SuiteSummary"/>
              </type>
            </type>
          </field>
          <field type="slice" name="aggregatedSuiteEndings">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SuiteSummary"/>
              </type>
            </elmtype>
          </field>
          <field type="slice" name="specs">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </elmtype>
          </field>
          <field type="selector" name="startTime">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewServer">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Start">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Address">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="RegisterReporters">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="selector">
                <prefix value="reporters"/>
                <item value="Reporter"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RegisterAlive">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Server"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="func">
              <paramsList/>
              <resultsList>
                <type type="ident" def="bool"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewOutputInterceptor">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="OutputInterceptor"/>
          </resultsList>
        </function>
        <function name="StartInterceptingOutput">
          <recvList>
            <type type="pointer">
              <type type="ident" def="outputInterceptor"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="StopInterceptingAndReturnOutput">
          <recvList>
            <type type="pointer">
              <type type="ident" def="outputInterceptor"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewOutputInterceptor">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="OutputInterceptor"/>
          </resultsList>
        </function>
        <function name="StartInterceptingOutput">
          <recvList>
            <type type="pointer">
              <type type="ident" def="outputInterceptor"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="StopInterceptingAndReturnOutput">
          <recvList>
            <type type="pointer">
              <type type="ident" def="outputInterceptor"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewForwardingReporter">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="Poster"/>
            <type type="ident" def="OutputInterceptor"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="ForwardingReporter"/>
            </type>
          </resultsList>
        </function>
        <function name="SpecSuiteWillBegin">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ForwardingReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="config"/>
              <item value="GinkgoConfigType"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SuiteSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="BeforeSuiteDidRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ForwardingReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecWillRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ForwardingReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecDidComplete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ForwardingReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AfterSuiteDidRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ForwardingReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecSuiteDidEnd">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ForwardingReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SuiteSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewAggregator">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="channel" dir="3">
              <type type="ident" def="bool"/>
            </type>
            <type type="selector">
              <prefix value="config"/>
              <item value="DefaultReporterConfigType"/>
            </type>
            <type type="selector">
              <prefix value="stenographer"/>
              <item value="Stenographer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Aggregator"/>
            </type>
          </resultsList>
        </function>
        <function name="SpecSuiteWillBegin">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Aggregator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="config"/>
              <item value="GinkgoConfigType"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SuiteSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="BeforeSuiteDidRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Aggregator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AfterSuiteDidRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Aggregator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecWillRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Aggregator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecDidComplete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Aggregator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecSuiteDidEnd">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Aggregator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SuiteSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/integration/_fixtures/xunit_tests">
      <types/>
      <functions>
        <function name="AlwaysTrue">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/internal/leafnodes">
      <types>
        <type name="SuiteNode" type="interface">
          <method name="Run">
            <paramsList>
              <type type="ident" def="int"/>
              <type type="ident" def="int"/>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Passed">
            <paramsList/>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Summary">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SetupSummary"/>
                </type>
              </type>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="SetupNode">
          <field type="pointer" name="runner">
            <type type="ident" def="runner"/>
          </field>
        </type>
        <type type="struct" name="MeasureNode">
          <field type="pointer" name="runner">
            <type type="ident" def="runner"/>
          </field>
          <field type="ident" def="string" name="text"/>
          <field type="selector" name="flag">
            <prefix value="types"/>
            <item value="FlagType"/>
          </field>
          <field type="ident" def="int" name="samples"/>
          <field type="pointer" name="benchmarker">
            <type type="ident" def="benchmarker"/>
          </field>
        </type>
        <type type="struct" name="ItNode">
          <field type="pointer" name="runner">
            <type type="ident" def="runner"/>
          </field>
          <field type="selector" name="flag">
            <prefix value="types"/>
            <item value="FlagType"/>
          </field>
          <field type="ident" def="string" name="text"/>
        </type>
        <type name="BasicNode" type="interface">
          <method name="Type">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecComponentType"/>
              </type>
            </resultsList>
          </method>
          <method name="Run">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecState"/>
              </type>
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecFailure"/>
              </type>
            </resultsList>
          </method>
          <method name="CodeLocation">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="types"/>
                <item value="CodeLocation"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="SubjectNode" type="interface">
          <method name="Text">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="Flag">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="types"/>
                <item value="FlagType"/>
              </type>
            </resultsList>
          </method>
          <method name="Samples">
            <paramsList/>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="NewSynchronizedBeforeSuiteNode">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="failer"/>
                <item value="Failer"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="SuiteNode"/>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="synchronizedBeforeSuiteNode"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Passed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="synchronizedBeforeSuiteNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Summary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="synchronizedBeforeSuiteNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="NewSynchronizedAfterSuiteNode">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="failer"/>
                <item value="Failer"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="SuiteNode"/>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="synchronizedAfterSuiteNode"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Passed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="synchronizedAfterSuiteNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Summary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="synchronizedAfterSuiteNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="simpleSuiteNode"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Passed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="simpleSuiteNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Summary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="simpleSuiteNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="NewBeforeSuiteNode">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="failer"/>
                <item value="Failer"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="SuiteNode"/>
          </resultsList>
        </function>
        <function name="NewAfterSuiteNode">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="failer"/>
                <item value="Failer"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="SuiteNode"/>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SetupNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="SpecState"/>
            </type>
            <type type="selector">
              <prefix value="types"/>
              <item value="SpecFailure"/>
            </type>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SetupNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="SpecComponentType"/>
            </type>
          </resultsList>
        </function>
        <function name="CodeLocation">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SetupNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
          </resultsList>
        </function>
        <function name="NewBeforeEachNode">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="failer"/>
                <item value="Failer"/>
              </type>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="SetupNode"/>
            </type>
          </resultsList>
        </function>
        <function name="NewAfterEachNode">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="failer"/>
                <item value="Failer"/>
              </type>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="SetupNode"/>
            </type>
          </resultsList>
        </function>
        <function name="NewJustBeforeEachNode">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="failer"/>
                <item value="Failer"/>
              </type>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="SetupNode"/>
            </type>
          </resultsList>
        </function>
        <function name="NewMeasureNode">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="FlagType"/>
            </type>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="ident" def="int"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="failer"/>
                <item value="Failer"/>
              </type>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="MeasureNode"/>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MeasureNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="SpecState"/>
            </type>
            <type type="selector">
              <prefix value="types"/>
              <item value="SpecFailure"/>
            </type>
          </resultsList>
        </function>
        <function name="MeasurementsReport">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MeasureNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SpecMeasurement"/>
                </type>
              </valtype>
            </type>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MeasureNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="SpecComponentType"/>
            </type>
          </resultsList>
        </function>
        <function name="Text">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MeasureNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Flag">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MeasureNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="FlagType"/>
            </type>
          </resultsList>
        </function>
        <function name="CodeLocation">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MeasureNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
          </resultsList>
        </function>
        <function name="Samples">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MeasureNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="NewItNode">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="FlagType"/>
            </type>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="failer"/>
                <item value="Failer"/>
              </type>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="ItNode"/>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ItNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="SpecState"/>
            </type>
            <type type="selector">
              <prefix value="types"/>
              <item value="SpecFailure"/>
            </type>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ItNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="SpecComponentType"/>
            </type>
          </resultsList>
        </function>
        <function name="Text">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ItNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Flag">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ItNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="FlagType"/>
            </type>
          </resultsList>
        </function>
        <function name="CodeLocation">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ItNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
          </resultsList>
        </function>
        <function name="Samples">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ItNode"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Time">
          <recvList>
            <type type="pointer">
              <type type="ident" def="benchmarker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="func">
              <paramsList/>
              <resultsList/>
            </type>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </resultsList>
        </function>
        <function name="RecordValue">
          <recvList>
            <type type="pointer">
              <type type="ident" def="benchmarker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="float64"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/internal/suite">
      <types>
        <type type="struct" name="Suite">
          <field type="pointer" name="topLevelContainer">
            <type type="selector">
              <prefix value="containernode"/>
              <item value="ContainerNode"/>
            </type>
          </field>
          <field type="pointer" name="currentContainer">
            <type type="selector">
              <prefix value="containernode"/>
              <item value="ContainerNode"/>
            </type>
          </field>
          <field type="ident" def="int" name="containerIndex"/>
          <field type="selector" name="beforeSuiteNode">
            <prefix value="leafnodes"/>
            <item value="SuiteNode"/>
          </field>
          <field type="selector" name="afterSuiteNode">
            <prefix value="leafnodes"/>
            <item value="SuiteNode"/>
          </field>
          <field type="pointer" name="runner">
            <type type="selector">
              <prefix value="specrunner"/>
              <item value="SpecRunner"/>
            </type>
          </field>
          <field type="pointer" name="failer">
            <type type="selector">
              <prefix value="failer"/>
              <item value="Failer"/>
            </type>
          </field>
          <field type="ident" def="bool" name="running"/>
        </type>
      </types>
      <functions>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="failer"/>
                <item value="Failer"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Suite"/>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Suite"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="ginkgoTestingT"/>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="reporters"/>
                <item value="Reporter"/>
              </elmtype>
            </type>
            <type type="selector">
              <prefix value="writer"/>
              <item value="WriterInterface"/>
            </type>
            <type type="selector">
              <prefix value="config"/>
              <item value="GinkgoConfigType"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="CurrentRunningSpecSummary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Suite"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="SetBeforeSuiteNode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Suite"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetAfterSuiteNode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Suite"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetSynchronizedBeforeSuiteNode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Suite"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetSynchronizedAfterSuiteNode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Suite"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PushContainerNode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Suite"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="func">
              <paramsList/>
              <resultsList/>
            </type>
            <type type="selector">
              <prefix value="types"/>
              <item value="FlagType"/>
            </type>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PushItNode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Suite"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="FlagType"/>
            </type>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PushMeasureNode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Suite"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="FlagType"/>
            </type>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PushBeforeEachNode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Suite"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PushJustBeforeEachNode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Suite"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PushAfterEachNode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Suite"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Duration"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/integration/_fixtures/suite_command_tests">
      <types/>
      <functions>
        <function name="Tested">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Untested">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/ginkgo/testsuite">
      <types>
        <type type="struct" name="TestSuite">
          <field type="ident" def="string" name="Path"/>
          <field type="ident" def="string" name="PackageName"/>
          <field type="ident" def="bool" name="IsGinkgo"/>
          <field type="ident" def="bool" name="Precompiled"/>
        </type>
      </types>
      <functions>
        <function name="PrecompiledTestSuite">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="TestSuite"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SuitesInDir">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="TestSuite"/>
            </type>
          </resultsList>
        </function>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="os"/>
                <item value="FileInfo"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="TestSuite"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/internal/specrunner">
      <types>
        <type type="struct" name="SpecRunner">
          <field type="ident" def="string" name="description"/>
          <field type="selector" name="beforeSuiteNode">
            <prefix value="leafnodes"/>
            <item value="SuiteNode"/>
          </field>
          <field type="pointer" name="specs">
            <type type="selector">
              <prefix value="spec"/>
              <item value="Specs"/>
            </type>
          </field>
          <field type="selector" name="afterSuiteNode">
            <prefix value="leafnodes"/>
            <item value="SuiteNode"/>
          </field>
          <field type="slice" name="reporters">
            <elmtype type="selector">
              <prefix value="reporters"/>
              <item value="Reporter"/>
            </elmtype>
          </field>
          <field type="selector" name="startTime">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="string" name="suiteID"/>
          <field type="pointer" name="runningSpec">
            <type type="selector">
              <prefix value="spec"/>
              <item value="Spec"/>
            </type>
          </field>
          <field type="selector" name="writer">
            <prefix value="Writer"/>
            <item value="WriterInterface"/>
          </field>
          <field type="selector" name="config">
            <prefix value="config"/>
            <item value="GinkgoConfigType"/>
          </field>
          <field type="ident" def="bool" name="interrupted"/>
          <field type="pointer" name="lock">
            <type type="selector">
              <prefix value="sync"/>
              <item value="Mutex"/>
            </type>
          </field>
        </type>
      </types>
      <functions>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="leafnodes"/>
              <item value="SuiteNode"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="spec"/>
                <item value="Specs"/>
              </type>
            </type>
            <type type="selector">
              <prefix value="leafnodes"/>
              <item value="SuiteNode"/>
            </type>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="reporters"/>
                <item value="Reporter"/>
              </elmtype>
            </type>
            <type type="selector">
              <prefix value="Writer"/>
              <item value="WriterInterface"/>
            </type>
            <type type="selector">
              <prefix value="config"/>
              <item value="GinkgoConfigType"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="SpecRunner"/>
            </type>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SpecRunner"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="CurrentSpecSummary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="SpecRunner"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/internal/failer">
      <types>
        <type type="struct" name="Failer">
          <field type="pointer" name="lock">
            <type type="selector">
              <prefix value="sync"/>
              <item value="Mutex"/>
            </type>
          </field>
          <field type="selector" name="failure">
            <prefix value="types"/>
            <item value="SpecFailure"/>
          </field>
          <field type="selector" name="state">
            <prefix value="types"/>
            <item value="SpecState"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="New">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Failer"/>
            </type>
          </resultsList>
        </function>
        <function name="Panic">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Failer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
            <type type="interface"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Timeout">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Failer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fail">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Failer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Drain">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Failer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="SpecComponentType"/>
            </type>
            <type type="ident" def="int"/>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="SpecFailure"/>
            </type>
            <type type="selector">
              <prefix value="types"/>
              <item value="SpecState"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/integration/_fixtures/coverage_fixture">
      <types/>
      <functions>
        <function name="A">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="B">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="C">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="D">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="E">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/internal/spec">
      <types>
        <type type="struct" name="Specs">
          <field type="slice" name="specs">
            <elmtype type="pointer">
              <type type="ident" def="Spec"/>
            </elmtype>
          </field>
          <field type="ident" def="int" name="numberOfOriginalSpecs"/>
          <field type="ident" def="bool" name="hasProgrammaticFocus"/>
        </type>
        <type type="struct" name="Spec">
          <field type="selector" name="subject">
            <prefix value="leafnodes"/>
            <item value="SubjectNode"/>
          </field>
          <field type="ident" def="bool" name="focused"/>
          <field type="ident" def="bool" name="announceProgress"/>
          <field type="slice" name="containers">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="containernode"/>
                <item value="ContainerNode"/>
              </type>
            </elmtype>
          </field>
          <field type="selector" name="state">
            <prefix value="types"/>
            <item value="SpecState"/>
          </field>
          <field type="selector" name="runTime">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="selector" name="failure">
            <prefix value="types"/>
            <item value="SpecFailure"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewSpecs">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Spec"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Specs"/>
            </type>
          </resultsList>
        </function>
        <function name="Specs">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Specs"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Spec"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="NumberOfOriginalSpecs">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Specs"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="HasProgrammaticFocus">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Specs"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Shuffle">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Specs"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="rand"/>
                <item value="Rand"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ApplyFocus">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Specs"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SkipMeasurements">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Specs"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="TrimForParallelization">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Specs"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Specs"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Specs"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Specs"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="leafnodes"/>
              <item value="SubjectNode"/>
            </type>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="containernode"/>
                  <item value="ContainerNode"/>
                </type>
              </elmtype>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Spec"/>
            </type>
          </resultsList>
        </function>
        <function name="Skip">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Spec"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Failed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Spec"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Passed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Spec"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Pending">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Spec"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Skipped">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Spec"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Focused">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Spec"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="IsMeasurement">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Spec"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Summary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Spec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="ConcatenatedString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Spec"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Spec"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ParallelizedIndexRange">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/internal/testingtproxy">
      <types/>
      <functions>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="failFunc"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="ginkgoTestingTProxy"/>
            </type>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ginkgoTestingTProxy"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Errorf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ginkgoTestingTProxy"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fail">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ginkgoTestingTProxy"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="FailNow">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ginkgoTestingTProxy"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Fatal">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ginkgoTestingTProxy"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Fatalf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ginkgoTestingTProxy"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Log">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ginkgoTestingTProxy"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Logf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ginkgoTestingTProxy"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Failed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ginkgoTestingTProxy"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Parallel">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ginkgoTestingTProxy"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Skip">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ginkgoTestingTProxy"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Skipf">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ginkgoTestingTProxy"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SkipNow">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ginkgoTestingTProxy"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Skipped">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ginkgoTestingTProxy"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/integration/_fixtures/more_ginkgo_tests">
      <types/>
      <functions>
        <function name="AlwaysTrue">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/types">
      <types>
        <type type="struct" name="SuiteSummary">
          <field type="ident" def="string" name="SuiteDescription"/>
          <field type="ident" def="bool" name="SuiteSucceeded"/>
          <field type="ident" def="string" name="SuiteID"/>
          <field type="ident" def="int" name="NumberOfSpecsBeforeParallelization"/>
          <field type="ident" def="int" name="NumberOfTotalSpecs"/>
          <field type="ident" def="int" name="NumberOfSpecsThatWillBeRun"/>
          <field type="ident" def="int" name="NumberOfPendingSpecs"/>
          <field type="ident" def="int" name="NumberOfSkippedSpecs"/>
          <field type="ident" def="int" name="NumberOfPassedSpecs"/>
          <field type="ident" def="int" name="NumberOfFailedSpecs"/>
          <field type="selector" name="RunTime">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
        </type>
        <type type="struct" name="SpecSummary">
          <field type="slice" name="ComponentTexts">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="ComponentCodeLocations">
            <elmtype type="ident" def="CodeLocation"/>
          </field>
          <field type="ident" def="SpecState" name="State"/>
          <field type="selector" name="RunTime">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="SpecFailure" name="Failure"/>
          <field type="ident" def="bool" name="IsMeasurement"/>
          <field type="ident" def="int" name="NumberOfSamples"/>
          <field type="map" name="Measurements">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="SpecMeasurement"/>
            </valtype>
          </field>
          <field type="ident" def="string" name="CapturedOutput"/>
          <field type="ident" def="string" name="SuiteID"/>
        </type>
        <type type="struct" name="SetupSummary">
          <field type="ident" def="SpecComponentType" name="ComponentType"/>
          <field type="ident" def="CodeLocation" name="CodeLocation"/>
          <field type="ident" def="SpecState" name="State"/>
          <field type="selector" name="RunTime">
            <prefix value="time"/>
            <item value="Duration"/>
          </field>
          <field type="ident" def="SpecFailure" name="Failure"/>
          <field type="ident" def="string" name="CapturedOutput"/>
          <field type="ident" def="string" name="SuiteID"/>
        </type>
        <type type="struct" name="SpecFailure">
          <field type="ident" def="string" name="Message"/>
          <field type="ident" def="CodeLocation" name="Location"/>
          <field type="ident" def="string" name="ForwardedPanic"/>
          <field type="ident" def="int" name="ComponentIndex"/>
          <field type="ident" def="SpecComponentType" name="ComponentType"/>
          <field type="ident" def="CodeLocation" name="ComponentCodeLocation"/>
        </type>
        <type type="struct" name="SpecMeasurement">
          <field type="ident" def="string" name="Name"/>
          <field type="interface" name="Info"/>
          <field type="ident" def="int" name="Order"/>
          <field type="slice" name="Results">
            <elmtype type="ident" def="float64"/>
          </field>
          <field type="ident" def="float64" name="Smallest"/>
          <field type="ident" def="float64" name="Largest"/>
          <field type="ident" def="float64" name="Average"/>
          <field type="ident" def="float64" name="StdDeviation"/>
          <field type="ident" def="string" name="SmallestLabel"/>
          <field type="ident" def="string" name="LargestLabel"/>
          <field type="ident" def="string" name="AverageLabel"/>
          <field type="ident" def="string" name="Units"/>
        </type>
        <type name="SpecState" type="ident">
          <type type="ident" def="uint"/>
        </type>
        <type name="SpecComponentType" type="ident">
          <type type="ident" def="uint"/>
        </type>
        <type name="FlagType" type="ident">
          <type type="ident" def="uint"/>
        </type>
        <type name="RemoteBeforeSuiteState" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="RemoteBeforeSuiteData">
          <field type="slice" name="Data">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="RemoteBeforeSuiteState" name="State"/>
        </type>
        <type type="struct" name="RemoteAfterSuiteData">
          <field type="ident" def="bool" name="CanRun"/>
        </type>
        <type type="struct" name="CodeLocation">
          <field type="ident" def="string" name="FileName"/>
          <field type="ident" def="int" name="LineNumber"/>
          <field type="ident" def="string" name="FullStackTrace"/>
        </type>
      </types>
      <functions>
        <function name="HasFailureState">
          <recvList>
            <type type="ident" def="SpecSummary"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="TimedOut">
          <recvList>
            <type type="ident" def="SpecSummary"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Panicked">
          <recvList>
            <type type="ident" def="SpecSummary"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Failed">
          <recvList>
            <type type="ident" def="SpecSummary"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Passed">
          <recvList>
            <type type="ident" def="SpecSummary"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Skipped">
          <recvList>
            <type type="ident" def="SpecSummary"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Pending">
          <recvList>
            <type type="ident" def="SpecSummary"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="ToJSON">
          <recvList>
            <type type="ident" def="RemoteBeforeSuiteData"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="CodeLocation"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="GINKGO_FOCUS_EXIT_CODE"/>
        <name value="SpecStateInvalid"/>
        <name value="SpecStatePending"/>
        <name value="SpecStateSkipped"/>
        <name value="SpecStatePassed"/>
        <name value="SpecStateFailed"/>
        <name value="SpecStatePanicked"/>
        <name value="SpecStateTimedOut"/>
        <name value="SpecComponentTypeInvalid"/>
        <name value="SpecComponentTypeContainer"/>
        <name value="SpecComponentTypeBeforeSuite"/>
        <name value="SpecComponentTypeAfterSuite"/>
        <name value="SpecComponentTypeBeforeEach"/>
        <name value="SpecComponentTypeJustBeforeEach"/>
        <name value="SpecComponentTypeAfterEach"/>
        <name value="SpecComponentTypeIt"/>
        <name value="SpecComponentTypeMeasure"/>
        <name value="FlagTypeNone"/>
        <name value="FlagTypeFocused"/>
        <name value="FlagTypePending"/>
        <name value="RemoteBeforeSuiteStateInvalid"/>
        <name value="RemoteBeforeSuiteStatePending"/>
        <name value="RemoteBeforeSuiteStatePassed"/>
        <name value="RemoteBeforeSuiteStateFailed"/>
        <name value="RemoteBeforeSuiteStateDisappeared"/>
      </names>
    </package>
    <package importpath="github.com/onsi/ginkgo/ginkgo/watch">
      <types>
        <type type="struct" name="Suite">
          <field type="selector" name="Suite">
            <prefix value="testsuite"/>
            <item value="TestSuite"/>
          </field>
          <field type="selector" name="RunTime">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="Dependencies" name="Dependencies"/>
          <field type="pointer" name="sharedPackageHashes">
            <type type="ident" def="PackageHashes"/>
          </field>
        </type>
        <type type="struct" name="PackageHashes">
          <field type="map" name="PackageHashes">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="PackageHash"/>
            </valtype>
          </field>
          <field type="map" name="usedPaths">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="bool"/>
          </field>
          <field type="pointer" name="lock">
            <type type="selector">
              <prefix value="sync"/>
              <item value="Mutex"/>
            </type>
          </field>
        </type>
        <type type="struct" name="PackageHash">
          <field type="selector" name="CodeModifiedTime">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="selector" name="TestModifiedTime">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="ident" def="bool" name="Deleted"/>
          <field type="ident" def="string" name="path"/>
          <field type="ident" def="string" name="codeHash"/>
          <field type="ident" def="string" name="testHash"/>
        </type>
        <type type="struct" name="Dependencies">
          <field type="map" name="deps">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="int"/>
          </field>
        </type>
        <type name="SuiteErrors" type="map">
          <keytype type="selector">
            <prefix value="testsuite"/>
            <item value="TestSuite"/>
          </keytype>
          <valtype type="ident" def="error"/>
        </type>
        <type type="struct" name="DeltaTracker">
          <field type="ident" def="int" name="maxDepth"/>
          <field type="map" name="suites">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="Suite"/>
            </valtype>
          </field>
          <field type="pointer" name="packageHashes">
            <type type="ident" def="PackageHashes"/>
          </field>
        </type>
        <type type="struct" name="Delta">
          <field type="slice" name="ModifiedPackages">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="NewSuites">
            <elmtype type="pointer">
              <type type="ident" def="Suite"/>
            </elmtype>
          </field>
          <field type="slice" name="RemovedSuites">
            <elmtype type="pointer">
              <type type="ident" def="Suite"/>
            </elmtype>
          </field>
          <field type="slice" name="modifiedSuites">
            <elmtype type="pointer">
              <type type="ident" def="Suite"/>
            </elmtype>
          </field>
        </type>
        <type name="DescendingByDelta" type="slice">
          <elmtype type="pointer">
            <type type="ident" def="Suite"/>
          </elmtype>
        </type>
      </types>
      <functions>
        <function name="NewSuite">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="testsuite"/>
              <item value="TestSuite"/>
            </type>
            <type type="ident" def="int"/>
            <type type="pointer">
              <type type="ident" def="PackageHashes"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Suite"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Delta">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Suite"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="MarkAsRunAndRecomputedDependencies">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Suite"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Suite"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewPackageHashes">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PackageHashes"/>
            </type>
          </resultsList>
        </function>
        <function name="CheckForChanges">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PackageHashes"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PackageHashes"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PackageHash"/>
            </type>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PackageHashes"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PackageHash"/>
            </type>
          </resultsList>
        </function>
        <function name="StartTrackingUsage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PackageHashes"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="StopTrackingUsageAndPrune">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PackageHashes"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="NewPackageHash">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PackageHash"/>
            </type>
          </resultsList>
        </function>
        <function name="CheckForChanges">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PackageHash"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewDependencies">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Dependencies"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Dependencies">
          <recvList>
            <type type="ident" def="Dependencies"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="int"/>
            </type>
          </resultsList>
        </function>
        <function name="NewDeltaTracker">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="DeltaTracker"/>
            </type>
          </resultsList>
        </function>
        <function name="Delta">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DeltaTracker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="testsuite"/>
                <item value="TestSuite"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Delta"/>
            <type type="ident" def="SuiteErrors"/>
          </resultsList>
        </function>
        <function name="WillRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DeltaTracker"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="testsuite"/>
              <item value="TestSuite"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="DescendingByDelta"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="DescendingByDelta"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="DescendingByDelta"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="ModifiedSuites">
          <recvList>
            <type type="ident" def="Delta"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Suite"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/integration/_fixtures/watch_fixtures/C">
      <types/>
      <functions>
        <function name="DoIt">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/reporters">
      <types>
        <type type="struct" name="TeamCityReporter">
          <field type="selector" name="writer">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="ident" def="string" name="testSuiteName"/>
        </type>
        <type name="Reporter" type="interface">
          <method name="SpecSuiteWillBegin">
            <paramsList>
              <type type="selector">
                <prefix value="config"/>
                <item value="GinkgoConfigType"/>
              </type>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SuiteSummary"/>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="BeforeSuiteDidRun">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SetupSummary"/>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="SpecWillRun">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SpecSummary"/>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="SpecDidComplete">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SpecSummary"/>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AfterSuiteDidRun">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SetupSummary"/>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="SpecSuiteDidEnd">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SuiteSummary"/>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="JUnitTestSuite">
          <field type="selector" name="XMLName">
            <prefix value="xml"/>
            <item value="Name"/>
          </field>
          <field type="slice" name="TestCases">
            <elmtype type="ident" def="JUnitTestCase"/>
          </field>
          <field type="ident" def="int" name="Tests"/>
          <field type="ident" def="int" name="Failures"/>
          <field type="ident" def="float64" name="Time"/>
        </type>
        <type type="struct" name="JUnitTestCase">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="string" name="ClassName"/>
          <field type="pointer" name="FailureMessage">
            <type type="ident" def="JUnitFailureMessage"/>
          </field>
          <field type="pointer" name="Skipped">
            <type type="ident" def="JUnitSkipped"/>
          </field>
          <field type="ident" def="float64" name="Time"/>
        </type>
        <type type="struct" name="JUnitFailureMessage">
          <field type="ident" def="string" name="Type"/>
          <field type="ident" def="string" name="Message"/>
        </type>
        <type type="struct" name="JUnitSkipped">
          <field type="selector" name="XMLName">
            <prefix value="xml"/>
            <item value="Name"/>
          </field>
        </type>
        <type type="struct" name="JUnitReporter">
          <field type="ident" def="JUnitTestSuite" name="suite"/>
          <field type="ident" def="string" name="filename"/>
          <field type="ident" def="string" name="testSuiteName"/>
        </type>
        <type type="struct" name="FakeReporter">
          <field type="selector" name="Config">
            <prefix value="config"/>
            <item value="GinkgoConfigType"/>
          </field>
          <field type="pointer" name="BeginSummary">
            <type type="selector">
              <prefix value="types"/>
              <item value="SuiteSummary"/>
            </type>
          </field>
          <field type="pointer" name="BeforeSuiteSummary">
            <type type="selector">
              <prefix value="types"/>
              <item value="SetupSummary"/>
            </type>
          </field>
          <field type="slice" name="SpecWillRunSummaries">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </elmtype>
          </field>
          <field type="slice" name="SpecSummaries">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </elmtype>
          </field>
          <field type="pointer" name="AfterSuiteSummary">
            <type type="selector">
              <prefix value="types"/>
              <item value="SetupSummary"/>
            </type>
          </field>
          <field type="pointer" name="EndSummary">
            <type type="selector">
              <prefix value="types"/>
              <item value="SuiteSummary"/>
            </type>
          </field>
          <field type="func" name="SpecWillRunStub">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SpecSummary"/>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </field>
          <field type="func" name="SpecDidCompleteStub">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SpecSummary"/>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </field>
        </type>
        <type type="struct" name="DefaultReporter">
          <field type="selector" name="config">
            <prefix value="config"/>
            <item value="DefaultReporterConfigType"/>
          </field>
          <field type="selector" name="stenographer">
            <prefix value="stenographer"/>
            <item value="Stenographer"/>
          </field>
          <field type="slice" name="specSummaries">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </elmtype>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewTeamCityReporter">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="TeamCityReporter"/>
            </type>
          </resultsList>
        </function>
        <function name="SpecSuiteWillBegin">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TeamCityReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="config"/>
              <item value="GinkgoConfigType"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SuiteSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="BeforeSuiteDidRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TeamCityReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AfterSuiteDidRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TeamCityReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecWillRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TeamCityReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecDidComplete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TeamCityReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecSuiteDidEnd">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TeamCityReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SuiteSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewJUnitReporter">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="JUnitReporter"/>
            </type>
          </resultsList>
        </function>
        <function name="SpecSuiteWillBegin">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JUnitReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="config"/>
              <item value="GinkgoConfigType"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SuiteSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecWillRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JUnitReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="BeforeSuiteDidRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JUnitReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AfterSuiteDidRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JUnitReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecDidComplete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JUnitReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecSuiteDidEnd">
          <recvList>
            <type type="pointer">
              <type type="ident" def="JUnitReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SuiteSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewFakeReporter">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="FakeReporter"/>
            </type>
          </resultsList>
        </function>
        <function name="SpecSuiteWillBegin">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="config"/>
              <item value="GinkgoConfigType"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SuiteSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="BeforeSuiteDidRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecWillRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecDidComplete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AfterSuiteDidRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecSuiteDidEnd">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SuiteSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewDefaultReporter">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="config"/>
              <item value="DefaultReporterConfigType"/>
            </type>
            <type type="selector">
              <prefix value="stenographer"/>
              <item value="Stenographer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="DefaultReporter"/>
            </type>
          </resultsList>
        </function>
        <function name="SpecSuiteWillBegin">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DefaultReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="config"/>
              <item value="GinkgoConfigType"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SuiteSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="BeforeSuiteDidRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DefaultReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AfterSuiteDidRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DefaultReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecWillRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DefaultReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecDidComplete">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DefaultReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SpecSuiteDidEnd">
          <recvList>
            <type type="pointer">
              <type type="ident" def="DefaultReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SuiteSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/internal/codelocation">
      <types/>
      <functions>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="types"/>
              <item value="CodeLocation"/>
            </type>
          </resultsList>
        </function>
        <function name="PruneStack">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/integration/_fixtures/watch_fixtures/A">
      <types/>
      <functions>
        <function name="DoIt">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/integration/_fixtures/flags_tests">
      <types/>
      <functions>
        <function name="Tested">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Untested">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/ginkgo/testrunner">
      <types>
        <type type="struct" name="TestRunner">
          <field type="selector" name="Suite">
            <prefix value="testsuite"/>
            <item value="TestSuite"/>
          </field>
          <field type="ident" def="bool" name="compiled"/>
          <field type="ident" def="string" name="compilationTargetPath"/>
          <field type="ident" def="int" name="numCPU"/>
          <field type="ident" def="bool" name="parallelStream"/>
          <field type="ident" def="bool" name="race"/>
          <field type="ident" def="bool" name="cover"/>
          <field type="ident" def="string" name="coverPkg"/>
          <field type="ident" def="string" name="tags"/>
          <field type="slice" name="additionalArgs">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="RunResult">
          <field type="ident" def="bool" name="Passed"/>
          <field type="ident" def="bool" name="HasProgrammaticFocus"/>
        </type>
      </types>
      <functions>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="testsuite"/>
              <item value="TestSuite"/>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="TestRunner"/>
            </type>
          </resultsList>
        </function>
        <function name="Compile">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TestRunner"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="CompileTo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TestRunner"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Run">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TestRunner"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="RunResult"/>
          </resultsList>
        </function>
        <function name="CleanUp">
          <recvList>
            <type type="pointer">
              <type type="ident" def="TestRunner"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="PassingRunResult">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="RunResult"/>
          </resultsList>
        </function>
        <function name="FailingRunResult">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="RunResult"/>
          </resultsList>
        </function>
        <function name="Merge">
          <recvList>
            <type type="ident" def="RunResult"/>
          </recvList>
          <paramsList>
            <type type="ident" def="RunResult"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="RunResult"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="logWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="logWriter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo">
      <types>
        <type name="GinkgoTestingT" type="interface">
          <method name="Fail">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type name="GinkgoTInterface" type="interface">
          <method name="Fail">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Error">
            <paramsList>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Errorf">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="FailNow">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Fatal">
            <paramsList>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Fatalf">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Log">
            <paramsList>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Logf">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Failed">
            <paramsList/>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Parallel">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Skip">
            <paramsList>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Skipf">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="SkipNow">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Skipped">
            <paramsList/>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
        </type>
        <type name="Reporter" type="selector">
          <prefix value="reporters"/>
          <item value="Reporter"/>
        </type>
        <type name="Done" type="channel" dir="1">
          <type type="interface"/>
        </type>
        <type type="struct" name="GinkgoTestDescription">
          <field type="ident" def="string" name="FullTestText"/>
          <field type="slice" name="ComponentTexts">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="string" name="TestText"/>
          <field type="ident" def="bool" name="IsMeasurement"/>
          <field type="ident" def="string" name="FileName"/>
          <field type="ident" def="int" name="LineNumber"/>
          <field type="ident" def="bool" name="Failed"/>
        </type>
        <type name="Benchmarker" type="interface">
          <method name="Time">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="func">
                <paramsList/>
                <resultsList/>
              </type>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="time"/>
                <item value="Duration"/>
              </type>
            </resultsList>
          </method>
          <method name="RecordValue">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ident" def="float64"/>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
      </types>
      <functions>
        <function name="GinkgoParallelNode">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="GinkgoT">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="int"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="GinkgoTInterface"/>
          </resultsList>
        </function>
        <function name="CurrentGinkgoTestDescription">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="GinkgoTestDescription"/>
          </resultsList>
        </function>
        <function name="RunSpecs">
          <recvList/>
          <paramsList>
            <type type="ident" def="GinkgoTestingT"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="RunSpecsWithDefaultAndCustomReporters">
          <recvList/>
          <paramsList>
            <type type="ident" def="GinkgoTestingT"/>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="Reporter"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="RunSpecsWithCustomReporters">
          <recvList/>
          <paramsList>
            <type type="ident" def="GinkgoTestingT"/>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="Reporter"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Fail">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="ident" def="int"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GinkgoRecover">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Describe">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="func">
              <paramsList/>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="FDescribe">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="func">
              <paramsList/>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="PDescribe">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="func">
              <paramsList/>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="XDescribe">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="func">
              <paramsList/>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Context">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="func">
              <paramsList/>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="FContext">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="func">
              <paramsList/>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="PContext">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="func">
              <paramsList/>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="XContext">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="func">
              <paramsList/>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="It">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="ident" def="float64"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="FIt">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="ident" def="float64"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="PIt">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="XIt">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="By">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="func">
                <paramsList/>
                <resultsList/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Measure">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="FMeasure">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="PMeasure">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="XMeasure">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="BeforeSuite">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="ident" def="float64"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="AfterSuite">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="ident" def="float64"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="SynchronizedBeforeSuite">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="ident" def="float64"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="SynchronizedAfterSuite">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="ident" def="float64"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="BeforeEach">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="ident" def="float64"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="JustBeforeEach">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="ident" def="float64"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="AfterEach">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="ident" def="float64"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="GINKGO_VERSION"/>
        <name value="GINKGO_PANIC"/>
        <name value="GinkgoWriter"/>
      </names>
    </package>
    <package importpath="github.com/onsi/ginkgo/integration/_fixtures/passing_ginkgo_tests">
      <types/>
      <functions>
        <function name="StringIdentity">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="IntegerIdentity">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/onsi/ginkgo/reporters/stenographer">
      <types>
        <type name="Stenographer" type="interface">
          <method name="AnnounceSuite">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ident" def="int64"/>
              <type type="ident" def="bool"/>
              <type type="ident" def="bool"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AnnounceAggregatedParallelRun">
            <paramsList>
              <type type="ident" def="int"/>
              <type type="ident" def="bool"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AnnounceParallelRun">
            <paramsList>
              <type type="ident" def="int"/>
              <type type="ident" def="int"/>
              <type type="ident" def="int"/>
              <type type="ident" def="int"/>
              <type type="ident" def="bool"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AnnounceNumberOfSpecs">
            <paramsList>
              <type type="ident" def="int"/>
              <type type="ident" def="int"/>
              <type type="ident" def="bool"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AnnounceSpecRunCompletion">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SuiteSummary"/>
                </type>
              </type>
              <type type="ident" def="bool"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AnnounceSpecWillRun">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SpecSummary"/>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AnnounceBeforeSuiteFailure">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SetupSummary"/>
                </type>
              </type>
              <type type="ident" def="bool"/>
              <type type="ident" def="bool"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AnnounceAfterSuiteFailure">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SetupSummary"/>
                </type>
              </type>
              <type type="ident" def="bool"/>
              <type type="ident" def="bool"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AnnounceCapturedOutput">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AnnounceSuccesfulSpec">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SpecSummary"/>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AnnounceSuccesfulSlowSpec">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SpecSummary"/>
                </type>
              </type>
              <type type="ident" def="bool"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AnnounceSuccesfulMeasurement">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SpecSummary"/>
                </type>
              </type>
              <type type="ident" def="bool"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AnnouncePendingSpec">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SpecSummary"/>
                </type>
              </type>
              <type type="ident" def="bool"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AnnounceSkippedSpec">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SpecSummary"/>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AnnounceSpecTimedOut">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SpecSummary"/>
                </type>
              </type>
              <type type="ident" def="bool"/>
              <type type="ident" def="bool"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AnnounceSpecPanicked">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SpecSummary"/>
                </type>
              </type>
              <type type="ident" def="bool"/>
              <type type="ident" def="bool"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="AnnounceSpecFailed">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SpecSummary"/>
                </type>
              </type>
              <type type="ident" def="bool"/>
              <type type="ident" def="bool"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="SummarizeFailures">
            <paramsList>
              <type type="slice">
                <elmtype type="pointer">
                  <type type="selector">
                    <prefix value="types"/>
                    <item value="SpecSummary"/>
                  </type>
                </elmtype>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="FakeStenographer">
          <field type="slice" name="calls">
            <elmtype type="ident" def="FakeStenographerCall"/>
          </field>
          <field type="pointer" name="lock">
            <type type="selector">
              <prefix value="sync"/>
              <item value="Mutex"/>
            </type>
          </field>
        </type>
        <type type="struct" name="FakeStenographerCall">
          <field type="ident" def="string" name="Method"/>
          <field type="slice" name="Args">
            <elmtype type="interface"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Stenographer"/>
          </resultsList>
        </function>
        <function name="AnnounceSuite">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="int64"/>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceParallelRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceAggregatedParallelRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceNumberOfSpecs">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSpecRunCompletion">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SuiteSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSpecWillRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceBeforeSuiteFailure">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceAfterSuiteFailure">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceCapturedOutput">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSuccesfulSpec">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSuccesfulSlowSpec">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSuccesfulMeasurement">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnouncePendingSpec">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSkippedSpec">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSpecTimedOut">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSpecPanicked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSpecFailed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SummarizeFailures">
          <recvList>
            <type type="pointer">
              <type type="ident" def="consoleStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SpecSummary"/>
                </type>
              </elmtype>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewFakeStenographerCall">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="FakeStenographerCall"/>
          </resultsList>
        </function>
        <function name="NewFakeStenographer">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </resultsList>
        </function>
        <function name="Calls">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="FakeStenographerCall"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="CallsTo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="FakeStenographerCall"/>
            </type>
          </resultsList>
        </function>
        <function name="AnnounceSuite">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="int64"/>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceAggregatedParallelRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceParallelRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceNumberOfSpecs">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSpecRunCompletion">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SuiteSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSpecWillRun">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceBeforeSuiteFailure">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceAfterSuiteFailure">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SetupSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceCapturedOutput">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSuccesfulSpec">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSuccesfulSlowSpec">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSuccesfulMeasurement">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnouncePendingSpec">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSkippedSpec">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSpecTimedOut">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSpecPanicked">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="AnnounceSpecFailed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="types"/>
                <item value="SpecSummary"/>
              </type>
            </type>
            <type type="ident" def="bool"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SummarizeFailures">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FakeStenographer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="types"/>
                  <item value="SpecSummary"/>
                </type>
              </elmtype>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
  </packages>
  <imports>
    <import path="flag"/>
    <import path="fmt"/>
    <import path="io"/>
    <import path="net/http"/>
    <import path="os"/>
    <import path="strings"/>
    <import path="time"/>
    <import path="github.com/onsi/ginkgo/config"/>
    <import path="github.com/onsi/ginkgo/internal/codelocation"/>
    <import path="github.com/onsi/ginkgo/internal/failer"/>
    <import path="github.com/onsi/ginkgo/internal/remote"/>
    <import path="github.com/onsi/ginkgo/internal/suite"/>
    <import path="github.com/onsi/ginkgo/internal/testingtproxy"/>
    <import path="github.com/onsi/ginkgo/internal/writer"/>
    <import path="github.com/onsi/ginkgo/reporters"/>
    <import path="github.com/onsi/ginkgo/reporters/stenographer"/>
    <import path="github.com/onsi/ginkgo/types"/>
    <import path="encoding/json"/>
    <import path="encoding/xml"/>
    <import path="sync"/>
    <import path="bytes"/>
    <import path="math/rand"/>
    <import path="github.com/onsi/ginkgo/internal/containernode"/>
    <import path="github.com/onsi/ginkgo/internal/leafnodes"/>
    <import path="github.com/onsi/ginkgo/internal/spec"/>
    <import path="github.com/onsi/ginkgo/internal/specrunner"/>
    <import path="os/signal"/>
    <import path="syscall"/>
    <import path="crypto/rand"/>
    <import path="regexp"/>
    <import path="sort"/>
    <import path="io/ioutil"/>
    <import path="net"/>
    <import path="errors"/>
    <import path="reflect"/>
    <import path="math"/>
    <import path="runtime"/>
    <import path="runtime/debug"/>
    <import path="github.com/onsi/C"/>
    <import path="github.com/onsi/B"/>
    <import path="github.com/onsi/ginkgo/ginkgo/interrupthandler"/>
    <import path="github.com/onsi/ginkgo/ginkgo/testrunner"/>
    <import path="github.com/onsi/ginkgo/ginkgo/testsuite"/>
    <import path="github.com/onsi/ginkgo/ginkgo/watch"/>
    <import path="os/exec"/>
    <import path="bufio"/>
    <import path="github.com/onsi/ginkgo/ginkgo/nodot"/>
    <import path="path/filepath"/>
    <import path="text/template"/>
    <import path="github.com/onsi/ginkgo/ginkgo/convert"/>
    <import path="go/build"/>
    <import path="strconv"/>
    <import path="log"/>
    <import path="go/ast"/>
    <import path="go/parser"/>
    <import path="go/token"/>
    <import path="go/format"/>
    <import path="unicode"/>
  </imports>
</project>
