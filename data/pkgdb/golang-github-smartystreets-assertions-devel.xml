<?xml version='1.0' encoding='ASCII'?>
<project ipprefix="" commit="commit" nvr="golang-github-smartystreets-assertions-0-0.4.git4727d76.fc24">
  <packages>
    <package importpath="github.com/smartystreets/assertions/internal/oglematchers">
      <types>
        <type name="Matcher" type="interface">
          <method name="Matches">
            <paramsList>
              <type type="interface"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Description">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="FatalError">
          <field type="ident" def="string" name="errorText"/>
        </type>
      </types>
      <functions>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="transformDescriptionMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="transformDescriptionMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Pointee">
          <recvList/>
          <paramsList>
            <type type="ident" def="Matcher"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="pointeeMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="pointeeMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Panics">
          <recvList/>
          <paramsList>
            <type type="ident" def="Matcher"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="panicsMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="panicsMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Not">
          <recvList/>
          <paramsList>
            <type type="ident" def="Matcher"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="notMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="notMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="MatchesRegexp">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="matchesRegexpMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="matchesRegexpMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewFatalError">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="FatalError"/>
            </type>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FatalError"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="LessThan">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lessThanMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lessThanMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="LessOrEqual">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="IdenticalTo">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="identicalToMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="identicalToMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="HasSubstr">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="hasSubstrMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="hasSubstrMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="GreaterThan">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="GreaterOrEqual">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList/>
          <paramsList>
            <type type="ident" def="Matcher"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="errorMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="errorMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Equals">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="equalsMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="equalsMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ElementsAre">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="elementsAreMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="elementsAreMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DeepEquals">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="deepEqualsMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="deepEqualsMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Contains">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="containsMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="containsMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="AnyOf">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="anyOfMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="anyOfMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Any">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="anyMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="anyMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="AllOf">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="Matcher"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="allOfMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="allOfMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/smartystreets/assertions/internal/oglemock/generate/test_cases/complicated_pkg">
      <types>
        <type name="Byte" type="ident">
          <type type="ident" def="uint8"/>
        </type>
        <type name="ComplicatedThing" type="interface">
          <method name="Channels">
            <paramsList>
              <type type="channel" dir="3">
                <type type="channel" dir="1">
                  <type type="channel" dir="2">
                    <type type="selector">
                      <prefix value="net"/>
                      <item value="Conn"/>
                    </type>
                  </type>
                </type>
              </type>
            </paramsList>
            <resultsList>
              <type type="channel" dir="3">
                <type type="ident" def="int"/>
              </type>
            </resultsList>
          </method>
          <method name="Pointers">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="int"/>
              </type>
              <type type="pointer">
                <type type="selector">
                  <prefix value="net"/>
                  <item value="Conn"/>
                </type>
              </type>
              <type type="pointer">
                <type type="pointer">
                  <type type="selector">
                    <prefix value="io"/>
                    <item value="Reader"/>
                  </type>
                </type>
              </type>
            </paramsList>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="int"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Functions">
            <paramsList>
              <type type="func">
                <paramsList>
                  <type type="ident" def="int"/>
                  <type type="selector">
                    <prefix value="image"/>
                    <item value="Image"/>
                  </type>
                </paramsList>
                <resultsList>
                  <type type="ident" def="int"/>
                </resultsList>
              </type>
            </paramsList>
            <resultsList>
              <type type="func">
                <paramsList>
                  <type type="ident" def="string"/>
                  <type type="ident" def="int"/>
                </paramsList>
                <resultsList>
                  <type type="selector">
                    <prefix value="net"/>
                    <item value="Conn"/>
                  </type>
                </resultsList>
              </type>
            </resultsList>
          </method>
          <method name="Maps">
            <paramsList>
              <type type="map">
                <keytype type="ident" def="string"/>
                <valtype type="pointer">
                  <type type="ident" def="int"/>
                </valtype>
              </type>
            </paramsList>
            <resultsList>
              <type type="map">
                <keytype type="ident" def="int"/>
                <valtype type="pointer">
                  <type type="ident" def="string"/>
                </valtype>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Arrays">
            <paramsList>
              <type type="array">
                <elmtype type="ident" def="string"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="array">
                <elmtype type="ident" def="int"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Slices">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="string"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="int"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="NamedScalarType">
            <paramsList>
              <type type="ident" def="Byte"/>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="Byte"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="EmptyInterface">
            <paramsList>
              <type type="interface"/>
            </paramsList>
            <resultsList>
              <type type="interface"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="RenamedPackage">
            <paramsList>
              <type type="selector">
                <prefix value="tony"/>
                <item value="SomeUint8Alias"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Variadic">
            <paramsList>
              <type type="ident" def="int"/>
              <type type="ellipsis">
                <type type="selector">
                  <prefix value="net"/>
                  <item value="Conn"/>
                </type>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
        </type>
      </types>
      <functions/>
      <names/>
    </package>
    <package importpath="github.com/smartystreets/assertions/internal/ogletest/test_cases/mock_image">
      <types>
        <type name="MockImage" type="interface"/>
      </types>
      <functions>
        <function name="NewMockImage">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="oglemock"/>
              <item value="Controller"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="MockImage"/>
          </resultsList>
        </function>
        <function name="Oglemock_Id">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockImage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uintptr"/>
          </resultsList>
        </function>
        <function name="Oglemock_Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockImage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="At">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockImage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="color"/>
              <item value="Color"/>
            </type>
          </resultsList>
        </function>
        <function name="Bounds">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockImage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="image"/>
              <item value="Rectangle"/>
            </type>
          </resultsList>
        </function>
        <function name="ColorModel">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockImage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="color"/>
              <item value="Model"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/smartystreets/assertions/internal/oglemock">
      <types>
        <type name="MockObject" type="interface">
          <method name="Oglemock_Id">
            <paramsList/>
            <resultsList>
              <type type="ident" def="uintptr"/>
            </resultsList>
          </method>
          <method name="Oglemock_Description">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="InternalExpectation">
          <field type="selector" name="methodSignature">
            <prefix value="reflect"/>
            <item value="Type"/>
          </field>
          <field type="ident" def="ErrorReporter" name="errorReporter"/>
          <field type="selector" name="mutex">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="slice" name="ArgMatchers">
            <elmtype type="selector">
              <prefix value="oglematchers"/>
              <item value="Matcher"/>
            </elmtype>
          </field>
          <field type="ident" def="string" name="FileName"/>
          <field type="ident" def="int" name="LineNumber"/>
          <field type="ident" def="int" name="ExpectedNumMatches"/>
          <field type="slice" name="OneTimeActions">
            <elmtype type="ident" def="Action"/>
          </field>
          <field type="ident" def="Action" name="FallbackAction"/>
          <field type="ident" def="uint" name="NumMatches"/>
        </type>
        <type name="Expectation" type="interface">
          <method name="Times">
            <paramsList>
              <type type="ident" def="uint"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="Expectation"/>
            </resultsList>
          </method>
          <method name="WillOnce">
            <paramsList>
              <type type="ident" def="Action"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="Expectation"/>
            </resultsList>
          </method>
          <method name="WillRepeatedly">
            <paramsList>
              <type type="ident" def="Action"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="Expectation"/>
            </resultsList>
          </method>
        </type>
        <type name="ErrorReporter" type="interface">
          <method name="ReportError">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ident" def="int"/>
              <type type="ident" def="error"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="ReportFatalError">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ident" def="int"/>
              <type type="ident" def="error"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type name="PartialExpecation" type="func">
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Expectation"/>
          </resultsList>
        </type>
        <type name="Controller" type="interface">
          <method name="ExpectCall">
            <paramsList>
              <type type="ident" def="MockObject"/>
              <type type="ident" def="string"/>
              <type type="ident" def="string"/>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="PartialExpecation"/>
            </resultsList>
          </method>
          <method name="Finish">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="HandleMethodCall">
            <paramsList>
              <type type="ident" def="MockObject"/>
              <type type="ident" def="string"/>
              <type type="ident" def="string"/>
              <type type="ident" def="int"/>
              <type type="slice">
                <elmtype type="interface"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="interface"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type name="Action" type="interface">
          <method name="SetSignature">
            <paramsList>
              <type type="selector">
                <prefix value="reflect"/>
                <item value="Type"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Invoke">
            <paramsList>
              <type type="slice">
                <elmtype type="interface"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="interface"/>
              </type>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="Return">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Action"/>
          </resultsList>
        </function>
        <function name="Invoke">
          <recvList>
            <type type="pointer">
              <type type="ident" def="returnAction"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
          </resultsList>
        </function>
        <function name="SetSignature">
          <recvList>
            <type type="pointer">
              <type type="ident" def="returnAction"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="reflect"/>
              <item value="Type"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Invoke">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Action"/>
          </resultsList>
        </function>
        <function name="SetSignature">
          <recvList>
            <type type="pointer">
              <type type="ident" def="invokeAction"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="reflect"/>
              <item value="Type"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Invoke">
          <recvList>
            <type type="pointer">
              <type type="ident" def="invokeAction"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
          </resultsList>
        </function>
        <function name="InternalNewExpectation">
          <recvList/>
          <paramsList>
            <type type="ident" def="ErrorReporter"/>
            <type type="selector">
              <prefix value="reflect"/>
              <item value="Type"/>
            </type>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="InternalExpectation"/>
            </type>
          </resultsList>
        </function>
        <function name="Times">
          <recvList>
            <type type="pointer">
              <type type="ident" def="InternalExpectation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Expectation"/>
          </resultsList>
        </function>
        <function name="WillOnce">
          <recvList>
            <type type="pointer">
              <type type="ident" def="InternalExpectation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Action"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Expectation"/>
          </resultsList>
        </function>
        <function name="WillRepeatedly">
          <recvList>
            <type type="pointer">
              <type type="ident" def="InternalExpectation"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Action"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Expectation"/>
          </resultsList>
        </function>
        <function name="NewController">
          <recvList/>
          <paramsList>
            <type type="ident" def="ErrorReporter"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Controller"/>
          </resultsList>
        </function>
        <function name="ExpectCall">
          <recvList>
            <type type="pointer">
              <type type="ident" def="controllerImpl"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="MockObject"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="PartialExpecation"/>
          </resultsList>
        </function>
        <function name="Finish">
          <recvList>
            <type type="pointer">
              <type type="ident" def="controllerImpl"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="HandleMethodCall">
          <recvList>
            <type type="pointer">
              <type type="ident" def="controllerImpl"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="MockObject"/>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/smartystreets/assertions/internal/oglemock/sample/mock_io">
      <types>
        <type name="MockReader" type="interface"/>
      </types>
      <functions>
        <function name="NewMockReader">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="oglemock"/>
              <item value="Controller"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="MockReader"/>
          </resultsList>
        </function>
        <function name="Oglemock_Id">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockReader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uintptr"/>
          </resultsList>
        </function>
        <function name="Oglemock_Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockReader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockReader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="uint8"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/smartystreets/assertions/internal/ogletest">
      <types>
        <type type="struct" name="TestInfo">
          <field type="selector" name="MockController">
            <prefix value="oglemock"/>
            <item value="Controller"/>
          </field>
          <field type="selector" name="mutex">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="slice" name="failureRecords">
            <elmtype type="pointer">
              <type type="ident" def="failureRecord"/>
            </elmtype>
          </field>
        </type>
        <type name="ExpectationResult" type="interface">
          <method name="SetCaller">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="MatchResult">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="ReportError">
          <recvList>
            <type type="pointer">
              <type type="ident" def="testInfoErrorReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ReportFatalError">
          <recvList>
            <type type="pointer">
              <type type="ident" def="testInfoErrorReporter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RunTests">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="testing"/>
                <item value="T"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RegisterTestSuite">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="sortableMethodSet"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="sortableMethodSet"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="sortableMethodSet"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ExpectThat">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="selector">
              <prefix value="oglematchers"/>
              <item value="Matcher"/>
            </type>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
        <function name="SetCaller">
          <recvList>
            <type type="pointer">
              <type type="ident" def="expectationResultImpl"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="MatchResult">
          <recvList>
            <type type="pointer">
              <type type="ident" def="expectationResultImpl"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ExpectCall">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="oglemock"/>
              <item value="MockObject"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="oglemock"/>
              <item value="PartialExpecation"/>
            </type>
          </resultsList>
        </function>
        <function name="ExpectEq">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
        <function name="ExpectNe">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
        <function name="ExpectLt">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
        <function name="ExpectLe">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
        <function name="ExpectGt">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
        <function name="ExpectGe">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
        <function name="ExpectTrue">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
        <function name="ExpectFalse">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
        <function name="AssertThat">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="selector">
              <prefix value="oglematchers"/>
              <item value="Matcher"/>
            </type>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
        <function name="AssertEq">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
        <function name="AssertNe">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
        <function name="AssertLt">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
        <function name="AssertLe">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
        <function name="AssertGt">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
        <function name="AssertGe">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
        <function name="AssertTrue">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
        <function name="AssertFalse">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="ExpectationResult"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/smartystreets/assertions">
      <types>
        <type name="Serializer" type="interface">
          <method name="serialize">
            <paramsList>
              <type type="interface"/>
              <type type="interface"/>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="serializeDetailed">
            <paramsList>
              <type type="interface"/>
              <type type="interface"/>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="ShouldHaveSameTypeAs">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotHaveSameTypeAs">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldImplement">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotImplement">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldHappenBefore">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldHappenOnOrBefore">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldHappenAfter">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldHappenOnOrAfter">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldHappenBetween">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldHappenOnOrBetween">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotHappenOnOrBetween">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldHappenWithin">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotHappenWithin">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldBeChronological">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldStartWith">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotStartWith">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldEndWith">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotEndWith">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldContainSubstring">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotContainSubstring">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldBeBlank">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotBeBlank">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldBeGreaterThan">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldBeGreaterThanOrEqualTo">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldBeLessThan">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldBeLessThanOrEqualTo">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldBeBetween">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotBeBetween">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldBeBetweenOrEqual">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotBeBetweenOrEqual">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldPanic">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotPanic">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldPanicWith">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotPanicWith">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldEqual">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotEqual">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldAlmostEqual">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotAlmostEqual">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldResemble">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotResemble">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldPointTo">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotPointTo">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldBeNil">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotBeNil">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldBeTrue">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldBeFalse">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldBeZeroValue">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GoConveyMode">
          <recvList/>
          <paramsList>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="So">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ident" def="assertion"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldContain">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotContain">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldBeIn">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotBeIn">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldBeEmpty">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ShouldNotBeEmpty">
          <recvList/>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/smartystreets/assertions/internal/oglemock/generate">
      <types/>
      <functions>
        <function name="GenerateMockSource">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="reflect"/>
                <item value="Type"/>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/smartystreets/assertions/internal/ogletest/test_cases">
      <types>
        <type type="struct" name="UnexportedTest"/>
        <type type="struct" name="RunTwiceTest"/>
        <type type="struct" name="PassingTest"/>
        <type type="struct" name="PanickingTest"/>
        <type type="struct" name="NoCasesTest"/>
        <type type="struct" name="MockTest">
          <field type="selector" name="controller">
            <prefix value="oglemock"/>
            <item value="Controller"/>
          </field>
          <field type="selector" name="image">
            <prefix value="mock_image"/>
            <item value="MockImage"/>
          </field>
        </type>
        <type type="struct" name="PartiallyFilteredTest"/>
        <type type="struct" name="CompletelyFilteredTest"/>
        <type type="struct" name="FailingTest"/>
        <type type="struct" name="ExpectFailDuringSetUpTest"/>
        <type type="struct" name="AssertFailDuringSetUpTest"/>
        <type type="struct" name="ExpectFailDuringTearDownTest"/>
        <type type="struct" name="AssertFailDuringTearDownTest"/>
      </types>
      <functions>
        <function name="TestUnexportedTest">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="testing"/>
                <item value="T"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SomeTest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="UnexportedTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="TestOgletest">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="testing"/>
                <item value="T"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="TestOgletest2">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="testing"/>
                <item value="T"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PassingMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RunTwiceTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="FailingMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RunTwiceTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="TestPassingTest">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="testing"/>
                <item value="T"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="EmptyTestMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PassingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SuccessfullMatches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PassingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ExpectAliases">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PassingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="AssertAliases">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PassingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SlowTest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PassingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="TestPanickingTest">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="testing"/>
                <item value="T"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="TearDown">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PanickingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="PanickingTest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PanickingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ZzzSomeOtherTest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PanickingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="TestNoCases">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="testing"/>
                <item value="T"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetUpTestSuite">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NoCasesTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="TearDownTestSuite">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NoCasesTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="TestMockTest">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="testing"/>
                <item value="T"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetUp">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockTest"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="TestInfo"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ExpectationSatisfied">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="MockExpectationNotSatisfied">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ExpectCallForUnknownMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="UnexpectedCall">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="InvokeFunction">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="TestFiltered">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="testing"/>
                <item value="T"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="PassingTestFoo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PartiallyFilteredTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="PassingTestBar">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PartiallyFilteredTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="PartiallyFilteredTestFoo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PartiallyFilteredTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="PartiallyFilteredTestBar">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PartiallyFilteredTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="PartiallyFilteredTestBaz">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PartiallyFilteredTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetUpTestSuite">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CompletelyFilteredTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="TearDownTestSuite">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CompletelyFilteredTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SomePassingTest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PartiallyFilteredTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SomeFailingTest">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PartiallyFilteredTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="TestFailingTest">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="testing"/>
                <item value="T"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="TearDown">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="PassingMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Equals">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="LessThan">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="HasSubstr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ExpectWithUserErrorMessages">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="AssertWithUserErrorMessages">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ModifiedExpectation">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="ExpectationAliases">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="AssertThatFailure">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="AssertEqFailure">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="AssertNeFailure">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="AssertLeFailure">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="AssertLtFailure">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="AssertGeFailure">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="AssertGtFailure">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="AssertTrueFailure">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="AssertFalseFailure">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FailingTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetUp">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ExpectFailDuringSetUpTest"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="TestInfo"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="TearDown">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ExpectFailDuringSetUpTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="PassingMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ExpectFailDuringSetUpTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetUp">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AssertFailDuringSetUpTest"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="TestInfo"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="TearDown">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AssertFailDuringSetUpTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="PassingMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AssertFailDuringSetUpTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetUp">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ExpectFailDuringTearDownTest"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="TestInfo"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="TearDown">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ExpectFailDuringTearDownTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="PassingMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ExpectFailDuringTearDownTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="SetUp">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AssertFailDuringTearDownTest"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="TestInfo"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="TearDown">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AssertFailDuringTearDownTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="PassingMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="AssertFailDuringTearDownTest"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/smartystreets/assertions/internal/oglemock/generate/test_cases">
      <types>
        <type name="MockSomeInterface" type="interface"/>
        <type name="MockReader" type="interface"/>
        <type name="MockWriter" type="interface"/>
        <type name="MockImage" type="interface"/>
        <type name="MockPalettedImage" type="interface"/>
        <type name="MockComplicatedThing" type="interface"/>
      </types>
      <functions>
        <function name="NewMockSomeInterface">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="oglemock"/>
              <item value="Controller"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="MockSomeInterface"/>
          </resultsList>
        </function>
        <function name="Oglemock_Id">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockSomeInterface"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uintptr"/>
          </resultsList>
        </function>
        <function name="Oglemock_Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockSomeInterface"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="DoFoo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockSomeInterface"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="NewMockReader">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="oglemock"/>
              <item value="Controller"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="MockReader"/>
          </resultsList>
        </function>
        <function name="Oglemock_Id">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockReader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uintptr"/>
          </resultsList>
        </function>
        <function name="Oglemock_Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockReader"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockReader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="uint8"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewMockWriter">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="oglemock"/>
              <item value="Controller"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="MockWriter"/>
          </resultsList>
        </function>
        <function name="Oglemock_Id">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockWriter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uintptr"/>
          </resultsList>
        </function>
        <function name="Oglemock_Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockWriter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="uint8"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewMockImage">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="oglemock"/>
              <item value="Controller"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="MockImage"/>
          </resultsList>
        </function>
        <function name="Oglemock_Id">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockImage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uintptr"/>
          </resultsList>
        </function>
        <function name="Oglemock_Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockImage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="At">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockImage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="color"/>
              <item value="Color"/>
            </type>
          </resultsList>
        </function>
        <function name="Bounds">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockImage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="image"/>
              <item value="Rectangle"/>
            </type>
          </resultsList>
        </function>
        <function name="ColorModel">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockImage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="color"/>
              <item value="Model"/>
            </type>
          </resultsList>
        </function>
        <function name="NewMockPalettedImage">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="oglemock"/>
              <item value="Controller"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="MockPalettedImage"/>
          </resultsList>
        </function>
        <function name="Oglemock_Id">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockPalettedImage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uintptr"/>
          </resultsList>
        </function>
        <function name="Oglemock_Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockPalettedImage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="At">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockPalettedImage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="color"/>
              <item value="Color"/>
            </type>
          </resultsList>
        </function>
        <function name="Bounds">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockPalettedImage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="image"/>
              <item value="Rectangle"/>
            </type>
          </resultsList>
        </function>
        <function name="ColorIndexAt">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockPalettedImage"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint8"/>
          </resultsList>
        </function>
        <function name="ColorModel">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockPalettedImage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="color"/>
              <item value="Model"/>
            </type>
          </resultsList>
        </function>
        <function name="NewMockComplicatedThing">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="oglemock"/>
              <item value="Controller"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="MockComplicatedThing"/>
          </resultsList>
        </function>
        <function name="Oglemock_Id">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockComplicatedThing"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uintptr"/>
          </resultsList>
        </function>
        <function name="Oglemock_Description">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockComplicatedThing"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Arrays">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockComplicatedThing"/>
            </type>
          </recvList>
          <paramsList>
            <type type="array">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="array">
              <elmtype type="ident" def="int"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Channels">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockComplicatedThing"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="3">
              <type type="channel" dir="1">
                <type type="channel" dir="2">
                  <type type="selector">
                    <prefix value="net"/>
                    <item value="Conn"/>
                  </type>
                </type>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="channel" dir="3">
              <type type="ident" def="int"/>
            </type>
          </resultsList>
        </function>
        <function name="EmptyInterface">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockComplicatedThing"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="interface"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Functions">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockComplicatedThing"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="int"/>
                <type type="selector">
                  <prefix value="image"/>
                  <item value="Image"/>
                </type>
              </paramsList>
              <resultsList>
                <type type="ident" def="int"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="string"/>
                <type type="ident" def="int"/>
              </paramsList>
              <resultsList>
                <type type="selector">
                  <prefix value="net"/>
                  <item value="Conn"/>
                </type>
              </resultsList>
            </type>
          </resultsList>
        </function>
        <function name="Maps">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockComplicatedThing"/>
            </type>
          </recvList>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="pointer">
                <type type="ident" def="int"/>
              </valtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="int"/>
              <valtype type="pointer">
                <type type="ident" def="string"/>
              </valtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NamedScalarType">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockComplicatedThing"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="complicated_pkg"/>
              <item value="Byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="complicated_pkg"/>
                <item value="Byte"/>
              </elmtype>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Pointers">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockComplicatedThing"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="int"/>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="net"/>
                <item value="Conn"/>
              </type>
            </type>
            <type type="pointer">
              <type type="pointer">
                <type type="selector">
                  <prefix value="io"/>
                  <item value="Reader"/>
                </type>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="int"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RenamedPackage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockComplicatedThing"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="tony"/>
              <item value="SomeUint8Alias"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Slices">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockComplicatedThing"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="int"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Variadic">
          <recvList>
            <type type="pointer">
              <type type="ident" def="mockComplicatedThing"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ellipsis">
              <type type="selector">
                <prefix value="net"/>
                <item value="Conn"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/smartystreets/assertions/internal/oglemock/generate/test_cases/renamed_pkg">
      <types>
        <type name="SomeUint8Alias" type="ident">
          <type type="ident" def="uint8"/>
        </type>
        <type name="SomeInterface" type="interface">
          <method name="DoFoo">
            <paramsList>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
        </type>
      </types>
      <functions/>
      <names/>
    </package>
    <package importpath="github.com/smartystreets/assertions/should">
      <types/>
      <functions/>
      <names>
        <name value="Equal"/>
        <name value="NotEqual"/>
        <name value="AlmostEqual"/>
        <name value="NotAlmostEqual"/>
        <name value="Resemble"/>
        <name value="NotResemble"/>
        <name value="PointTo"/>
        <name value="NotPointTo"/>
        <name value="BeNil"/>
        <name value="NotBeNil"/>
        <name value="BeTrue"/>
        <name value="BeFalse"/>
        <name value="BeZeroValue"/>
        <name value="BeGreaterThan"/>
        <name value="BeGreaterThanOrEqualTo"/>
        <name value="BeLessThan"/>
        <name value="BeLessThanOrEqualTo"/>
        <name value="BeBetween"/>
        <name value="NotBeBetween"/>
        <name value="BeBetweenOrEqual"/>
        <name value="NotBeBetweenOrEqual"/>
        <name value="Contain"/>
        <name value="NotContain"/>
        <name value="BeIn"/>
        <name value="NotBeIn"/>
        <name value="BeEmpty"/>
        <name value="NotBeEmpty"/>
        <name value="StartWith"/>
        <name value="NotStartWith"/>
        <name value="EndWith"/>
        <name value="NotEndWith"/>
        <name value="BeBlank"/>
        <name value="NotBeBlank"/>
        <name value="ContainSubstring"/>
        <name value="NotContainSubstring"/>
        <name value="Panic"/>
        <name value="NotPanic"/>
        <name value="PanicWith"/>
        <name value="NotPanicWith"/>
        <name value="HaveSameTypeAs"/>
        <name value="NotHaveSameTypeAs"/>
        <name value="Implement"/>
        <name value="NotImplement"/>
        <name value="HappenBefore"/>
        <name value="HappenOnOrBefore"/>
        <name value="HappenAfter"/>
        <name value="HappenOnOrAfter"/>
        <name value="HappenBetween"/>
        <name value="HappenOnOrBetween"/>
        <name value="NotHappenOnOrBetween"/>
        <name value="HappenWithin"/>
        <name value="NotHappenWithin"/>
        <name value="BeChronological"/>
      </names>
    </package>
  </packages>
  <imports>
    <import path="fmt"/>
    <import path="reflect"/>
    <import path="time"/>
    <import path="strings"/>
    <import path="encoding/json"/>
    <import path="github.com/smartystreets/goconvey/convey/reporting"/>
    <import path="github.com/smartystreets/assertions/internal/oglematchers"/>
    <import path="errors"/>
    <import path="math"/>
    <import path="github.com/smartystreets/assertions"/>
    <import path="sync"/>
    <import path="github.com/smartystreets/assertions/internal/oglemock"/>
    <import path="bytes"/>
    <import path="flag"/>
    <import path="path"/>
    <import path="regexp"/>
    <import path="runtime"/>
    <import path="testing"/>
    <import path="sort"/>
    <import path="github.com/smartystreets/assertions/internal/ogletest"/>
    <import path="image/color"/>
    <import path="github.com/smartystreets/assertions/internal/ogletest/test_cases/mock_image"/>
    <import path="image"/>
    <import path="unsafe"/>
    <import path="log"/>
    <import path="io"/>
    <import path="go/ast"/>
    <import path="go/parser"/>
    <import path="go/printer"/>
    <import path="go/token"/>
    <import path="text/template"/>
    <import path="github.com/smartystreets/assertions/internal/oglemock/generate/test_cases/renamed_pkg"/>
    <import path="net"/>
    <import path="github.com/smartystreets/assertions/internal/oglemock/generate/test_cases/complicated_pkg"/>
    <import path="go/build"/>
    <import path="io/ioutil"/>
    <import path="os"/>
    <import path="os/exec"/>
    <import path="github.com/smartystreets/assertions/internal/oglemock/generate"/>
  </imports>
</project>
