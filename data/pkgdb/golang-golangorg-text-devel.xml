<?xml version='1.0' encoding='ASCII'?>
<project ipprefix="" commit="commit" nvr="golang-googlecode-text-0-0.6.hg5b2527008a4c.fc24">
  <packages>
    <package importpath="golang.org/x/text/internal/triegen">
      <types>
        <type name="Option" type="func">
          <paramsList>
            <type type="pointer">
              <type type="ident" def="builder"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </type>
        <type type="struct" name="Trie">
          <field type="pointer" name="root">
            <type type="ident" def="node"/>
          </field>
          <field type="ident" def="hiddenTrie" name=""/>
        </type>
        <type name="Compacter" type="interface">
          <method name="Size">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="uint64"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Store">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="uint64"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="uint32"/>
            </resultsList>
          </method>
          <method name="Print">
            <paramsList>
              <type type="selector">
                <prefix value="io"/>
                <item value="Writer"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Handler">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="Compact">
          <recvList/>
          <paramsList>
            <type type="ident" def="Compacter"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Option"/>
          </resultsList>
        </function>
        <function name="Gen">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="pointer">
                <type type="ident" def="Trie"/>
              </elmtype>
            </type>
            <type type="ellipsis">
              <type type="ident" def="Option"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewTrie">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Trie"/>
            </type>
          </resultsList>
        </function>
        <function name="Gen">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Trie"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ellipsis">
              <type type="ident" def="Option"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Insert">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Trie"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="rune"/>
            <type type="ident" def="uint64"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Size">
          <recvList>
            <type type="pointer">
              <type type="ident" def="builder"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Size">
          <recvList>
            <type type="pointer">
              <type type="ident" def="simpleCompacter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="uint64"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Store">
          <recvList>
            <type type="pointer">
              <type type="ident" def="simpleCompacter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="uint64"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="Print">
          <recvList>
            <type type="pointer">
              <type type="ident" def="simpleCompacter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Handler">
          <recvList>
            <type type="pointer">
              <type type="ident" def="simpleCompacter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/text/encoding">
      <types>
        <type name="Encoding" type="interface">
          <method name="NewDecoder">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="transform"/>
                <item value="Transformer"/>
              </type>
            </resultsList>
          </method>
          <method name="NewEncoder">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="transform"/>
                <item value="Transformer"/>
              </type>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="NewDecoder">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="NewEncoder">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="NewDecoder">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="NewEncoder">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ASCIISub"/>
        <name value="Nop"/>
        <name value="Replacement"/>
        <name value="ErrInvalidUTF8"/>
        <name value="UTF8Validator"/>
      </names>
    </package>
    <package importpath="golang.org/x/text/encoding/korean">
      <types/>
      <functions>
        <function name="NewDecoder">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="NewEncoder">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="EUCKR"/>
      </names>
    </package>
    <package importpath="golang.org/x/text/encoding/simplifiedchinese">
      <types/>
      <functions>
        <function name="NewDecoder">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="NewEncoder">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="hzGB2312Decoder"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Transform">
          <recvList>
            <type type="pointer">
              <type type="ident" def="hzGB2312Decoder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="hzGB2312Encoder"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Transform">
          <recvList>
            <type type="pointer">
              <type type="ident" def="hzGB2312Encoder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewDecoder">
          <recvList>
            <type type="ident" def="gbk"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="NewEncoder">
          <recvList>
            <type type="ident" def="gbk"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="gbk"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList>
            <type type="ident" def="gbkDecoder"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList>
            <type type="ident" def="gbkEncoder"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="HZGB2312"/>
        <name value="GB18030"/>
        <name value="GBK"/>
      </names>
    </package>
    <package importpath="golang.org/x/text/display">
      <types>
        <type name="Namer" type="interface">
          <method name="Name">
            <paramsList>
              <type type="interface"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Dictionary">
          <field type="pointer" name="parent">
            <type type="ident" def="Dictionary"/>
          </field>
          <field type="ident" def="header" name="lang"/>
          <field type="ident" def="header" name="script"/>
          <field type="ident" def="header" name="region"/>
        </type>
        <type type="struct" name="SelfNamer">
          <field type="selector" name="Supported">
            <prefix value="language"/>
            <item value="Coverage"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Tags">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tagSet"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="language"/>
                <item value="Tag"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="Languages">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="language"/>
              <item value="Tag"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Namer"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="languageNamer"/>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Scripts">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="language"/>
              <item value="Tag"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Namer"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="scriptNamer"/>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Regions">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="language"/>
              <item value="Tag"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Namer"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="regionNamer"/>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Tags">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="language"/>
              <item value="Tag"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Namer"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="tagNamer"/>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Tags">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Dictionary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Namer"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="dictTags"/>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Languages">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Dictionary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Namer"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="dictLanguages"/>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Scripts">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Dictionary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Namer"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="dictScripts"/>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Regions">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Dictionary"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Namer"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="dictRegions"/>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="SelfNamer"/>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Version"/>
        <name value="Supported"/>
        <name value="Values"/>
        <name value="Self"/>
        <name value="Afrikaans"/>
        <name value="Amharic"/>
        <name value="Arabic"/>
        <name value="ModernStandardArabic"/>
        <name value="Azerbaijani"/>
        <name value="Bulgarian"/>
        <name value="Bengali"/>
        <name value="Catalan"/>
        <name value="Czech"/>
        <name value="Danish"/>
        <name value="German"/>
        <name value="Greek"/>
        <name value="English"/>
        <name value="AmericanEnglish"/>
        <name value="BritishEnglish"/>
        <name value="Spanish"/>
        <name value="EuropeanSpanish"/>
        <name value="LatinAmericanSpanish"/>
        <name value="Estonian"/>
        <name value="Persian"/>
        <name value="Finnish"/>
        <name value="Filipino"/>
        <name value="French"/>
        <name value="Gujarati"/>
        <name value="Hebrew"/>
        <name value="Hindi"/>
        <name value="Croatian"/>
        <name value="Hungarian"/>
        <name value="Armenian"/>
        <name value="Indonesian"/>
        <name value="Icelandic"/>
        <name value="Italian"/>
        <name value="Japanese"/>
        <name value="Georgian"/>
        <name value="Kazakh"/>
        <name value="Khmer"/>
        <name value="Kannada"/>
        <name value="Korean"/>
        <name value="Kirghiz"/>
        <name value="Lao"/>
        <name value="Lithuanian"/>
        <name value="Latvian"/>
        <name value="Macedonian"/>
        <name value="Malayalam"/>
        <name value="Mongolian"/>
        <name value="Marathi"/>
        <name value="Malay"/>
        <name value="Burmese"/>
        <name value="Nepali"/>
        <name value="Dutch"/>
        <name value="Norwegian"/>
        <name value="Punjabi"/>
        <name value="Polish"/>
        <name value="Portuguese"/>
        <name value="BrazilianPortuguese"/>
        <name value="EuropeanPortuguese"/>
        <name value="Romanian"/>
        <name value="Russian"/>
        <name value="Sinhala"/>
        <name value="Slovak"/>
        <name value="Slovenian"/>
        <name value="Albanian"/>
        <name value="Serbian"/>
        <name value="Swedish"/>
        <name value="Swahili"/>
        <name value="Tamil"/>
        <name value="Telugu"/>
        <name value="Thai"/>
        <name value="Turkish"/>
        <name value="Ukrainian"/>
        <name value="Urdu"/>
        <name value="Uzbek"/>
        <name value="Vietnamese"/>
        <name value="Chinese"/>
        <name value="SimplifiedChinese"/>
        <name value="TraditionalChinese"/>
        <name value="Zulu"/>
      </names>
    </package>
    <package importpath="golang.org/x/text/encoding/unicode">
      <types>
        <type name="BOMPolicy" type="ident">
          <type type="ident" def="bool"/>
        </type>
        <type name="Endianness" type="ident">
          <type type="ident" def="bool"/>
        </type>
      </types>
      <functions>
        <function name="UTF16">
          <recvList/>
          <paramsList>
            <type type="ident" def="Endianness"/>
            <type type="ident" def="BOMPolicy"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="encoding"/>
              <item value="Encoding"/>
            </type>
          </resultsList>
        </function>
        <function name="NewDecoder">
          <recvList>
            <type type="ident" def="utf16Encoding"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="NewEncoder">
          <recvList>
            <type type="ident" def="utf16Encoding"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="utf16Encoding"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="utf16Decoder"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Transform">
          <recvList>
            <type type="pointer">
              <type type="ident" def="utf16Decoder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="utf16Encoder"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Transform">
          <recvList>
            <type type="pointer">
              <type type="ident" def="utf16Encoder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="IgnoreBOM"/>
        <name value="ExpectBOM"/>
        <name value="BigEndian"/>
        <name value="LittleEndian"/>
        <name value="ErrMissingBOM"/>
      </names>
    </package>
    <package importpath="golang.org/x/text/language">
      <types>
        <type type="struct" name="ValueError">
          <field type="array" name="v">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type name="Matcher" type="interface">
          <method name="Match">
            <paramsList>
              <type type="ellipsis">
                <type type="ident" def="Tag"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="Tag"/>
              <type type="ident" def="int"/>
              <type type="ident" def="Confidence"/>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Tag">
          <field type="ident" def="langID" name="lang"/>
          <field type="ident" def="regionID" name="region"/>
          <field type="ident" def="scriptID" name="script"/>
          <field type="ident" def="byte" name="pVariant"/>
          <field type="ident" def="uint16" name="pExt"/>
          <field type="ident" def="string" name="str"/>
        </type>
        <type name="CanonType" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type name="Confidence" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="Extension">
          <field type="ident" def="string" name="s"/>
        </type>
        <type type="struct" name="Base">
          <field type="ident" def="langID" name=""/>
        </type>
        <type type="struct" name="Script">
          <field type="ident" def="scriptID" name=""/>
        </type>
        <type type="struct" name="Region">
          <field type="ident" def="regionID" name=""/>
        </type>
        <type type="struct" name="Variant">
          <field type="ident" def="string" name="variant"/>
        </type>
        <type type="struct" name="Currency">
          <field type="ident" def="currencyID" name=""/>
        </type>
        <type name="Coverage" type="interface">
          <method name="Tags">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="Tag"/>
              </type>
            </resultsList>
          </method>
          <method name="BaseLanguages">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="Base"/>
              </type>
            </resultsList>
          </method>
          <method name="Scripts">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="Script"/>
              </type>
            </resultsList>
          </method>
          <method name="Regions">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="Region"/>
              </type>
            </resultsList>
          </method>
        </type>
      </types>
      <functions>
        <function name="MustParse">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Tag"/>
          </resultsList>
        </function>
        <function name="MustParse">
          <recvList>
            <type type="ident" def="CanonType"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Tag"/>
          </resultsList>
        </function>
        <function name="MustParseBase">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Base"/>
          </resultsList>
        </function>
        <function name="MustParseScript">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Script"/>
          </resultsList>
        </function>
        <function name="MustParseRegion">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Region"/>
          </resultsList>
        </function>
        <function name="MustParseCurrency">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Currency"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="ValueError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Subtag">
          <recvList>
            <type type="ident" def="ValueError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Parse">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Tag"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Parse">
          <recvList>
            <type type="ident" def="CanonType"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Tag"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="variantsSort"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="variantsSort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="variantsSort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="bytesSort"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="bytesSort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="bytesSort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Compose">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Tag"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Compose">
          <recvList>
            <type type="ident" def="CanonType"/>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Tag"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="sortVariant"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="sortVariant"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="sortVariant"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="ParseAcceptLanguage">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Tag"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="float32"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tagSort"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tagSort"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="pointer">
              <type type="ident" def="tagSort"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ComprehensibleTo">
          <recvList>
            <type type="ident" def="Tag"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Tag"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Confidence"/>
          </resultsList>
        </function>
        <function name="NewMatcher">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="Tag"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Match">
          <recvList>
            <type type="pointer">
              <type type="ident" def="matcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="Tag"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Tag"/>
            <type type="ident" def="int"/>
            <type type="ident" def="Confidence"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="langID"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ISO3">
          <recvList>
            <type type="ident" def="langID"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="IsPrivateUse">
          <recvList>
            <type type="ident" def="langID"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="regionID"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ISO3">
          <recvList>
            <type type="ident" def="regionID"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="M49">
          <recvList>
            <type type="ident" def="regionID"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="IsPrivateUse">
          <recvList>
            <type type="ident" def="regionID"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="scriptID"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="IsPrivateUse">
          <recvList>
            <type type="ident" def="scriptID"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="currencyID"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Make">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Tag"/>
          </resultsList>
        </function>
        <function name="Make">
          <recvList>
            <type type="ident" def="CanonType"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Tag"/>
          </resultsList>
        </function>
        <function name="Raw">
          <recvList>
            <type type="ident" def="Tag"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Base"/>
            <type type="ident" def="Script"/>
            <type type="ident" def="Region"/>
          </resultsList>
        </function>
        <function name="IsRoot">
          <recvList>
            <type type="ident" def="Tag"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Canonicalize">
          <recvList>
            <type type="ident" def="CanonType"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Tag"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Tag"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Confidence"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Tag"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Base">
          <recvList>
            <type type="ident" def="Tag"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Base"/>
            <type type="ident" def="Confidence"/>
          </resultsList>
        </function>
        <function name="Script">
          <recvList>
            <type type="ident" def="Tag"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Script"/>
            <type type="ident" def="Confidence"/>
          </resultsList>
        </function>
        <function name="Region">
          <recvList>
            <type type="ident" def="Tag"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Region"/>
            <type type="ident" def="Confidence"/>
          </resultsList>
        </function>
        <function name="Variants">
          <recvList>
            <type type="ident" def="Tag"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Variant"/>
            </type>
          </resultsList>
        </function>
        <function name="Parent">
          <recvList>
            <type type="ident" def="Tag"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Tag"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Extension"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ParseExtension">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Extension"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Type">
          <recvList>
            <type type="ident" def="Extension"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="byte"/>
          </resultsList>
        </function>
        <function name="Tokens">
          <recvList>
            <type type="ident" def="Extension"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="Extension">
          <recvList>
            <type type="ident" def="Tag"/>
          </recvList>
          <paramsList>
            <type type="ident" def="byte"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Extension"/>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Extensions">
          <recvList>
            <type type="ident" def="Tag"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Extension"/>
            </type>
          </resultsList>
        </function>
        <function name="TypeForKey">
          <recvList>
            <type type="ident" def="Tag"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="SetTypeForKey">
          <recvList>
            <type type="ident" def="Tag"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Tag"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ParseBase">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Base"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ParseScript">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Script"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="EncodeM49">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Region"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ParseRegion">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Region"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="IsCountry">
          <recvList>
            <type type="ident" def="Region"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="IsGroup">
          <recvList>
            <type type="ident" def="Region"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Contains">
          <recvList>
            <type type="ident" def="Region"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Region"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="TLD">
          <recvList>
            <type type="ident" def="Region"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Region"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Canonicalize">
          <recvList>
            <type type="ident" def="Region"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Region"/>
          </resultsList>
        </function>
        <function name="ParseVariant">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Variant"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Variant"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="ParseCurrency">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Currency"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="pointer">
              <type type="ident" def="stableSort"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="pointer">
              <type type="ident" def="stableSort"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="pointer">
              <type type="ident" def="stableSort"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Regions">
          <recvList>
            <type type="ident" def="allSubtags"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Region"/>
            </type>
          </resultsList>
        </function>
        <function name="Scripts">
          <recvList>
            <type type="ident" def="allSubtags"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Script"/>
            </type>
          </resultsList>
        </function>
        <function name="BaseLanguages">
          <recvList>
            <type type="ident" def="allSubtags"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Base"/>
            </type>
          </resultsList>
        </function>
        <function name="Tags">
          <recvList>
            <type type="ident" def="allSubtags"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Tag"/>
            </type>
          </resultsList>
        </function>
        <function name="Tags">
          <recvList>
            <type type="pointer">
              <type type="ident" def="coverage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Tag"/>
            </type>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="bases"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="bases"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="bases"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="BaseLanguages">
          <recvList>
            <type type="pointer">
              <type type="ident" def="coverage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Base"/>
            </type>
          </resultsList>
        </function>
        <function name="Scripts">
          <recvList>
            <type type="pointer">
              <type type="ident" def="coverage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Script"/>
            </type>
          </resultsList>
        </function>
        <function name="Regions">
          <recvList>
            <type type="pointer">
              <type type="ident" def="coverage"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Region"/>
            </type>
          </resultsList>
        </function>
        <function name="NewCoverage">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Coverage"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Und"/>
        <name value="Afrikaans"/>
        <name value="Amharic"/>
        <name value="Arabic"/>
        <name value="ModernStandardArabic"/>
        <name value="Azerbaijani"/>
        <name value="Bulgarian"/>
        <name value="Bengali"/>
        <name value="Catalan"/>
        <name value="Czech"/>
        <name value="Danish"/>
        <name value="German"/>
        <name value="Greek"/>
        <name value="English"/>
        <name value="AmericanEnglish"/>
        <name value="BritishEnglish"/>
        <name value="Spanish"/>
        <name value="EuropeanSpanish"/>
        <name value="LatinAmericanSpanish"/>
        <name value="Estonian"/>
        <name value="Persian"/>
        <name value="Finnish"/>
        <name value="Filipino"/>
        <name value="French"/>
        <name value="CanadianFrench"/>
        <name value="Gujarati"/>
        <name value="Hebrew"/>
        <name value="Hindi"/>
        <name value="Croatian"/>
        <name value="Hungarian"/>
        <name value="Armenian"/>
        <name value="Indonesian"/>
        <name value="Icelandic"/>
        <name value="Italian"/>
        <name value="Japanese"/>
        <name value="Georgian"/>
        <name value="Kazakh"/>
        <name value="Khmer"/>
        <name value="Kannada"/>
        <name value="Korean"/>
        <name value="Kirghiz"/>
        <name value="Lao"/>
        <name value="Lithuanian"/>
        <name value="Latvian"/>
        <name value="Macedonian"/>
        <name value="Malayalam"/>
        <name value="Mongolian"/>
        <name value="Marathi"/>
        <name value="Malay"/>
        <name value="Burmese"/>
        <name value="Nepali"/>
        <name value="Dutch"/>
        <name value="Norwegian"/>
        <name value="Punjabi"/>
        <name value="Polish"/>
        <name value="Portuguese"/>
        <name value="BrazilianPortuguese"/>
        <name value="EuropeanPortuguese"/>
        <name value="Romanian"/>
        <name value="Russian"/>
        <name value="Sinhala"/>
        <name value="Slovak"/>
        <name value="Slovenian"/>
        <name value="Albanian"/>
        <name value="Serbian"/>
        <name value="Swedish"/>
        <name value="Swahili"/>
        <name value="Tamil"/>
        <name value="Telugu"/>
        <name value="Thai"/>
        <name value="Turkish"/>
        <name value="Ukrainian"/>
        <name value="Urdu"/>
        <name value="Uzbek"/>
        <name value="Vietnamese"/>
        <name value="Chinese"/>
        <name value="SimplifiedChinese"/>
        <name value="TraditionalChinese"/>
        <name value="Zulu"/>
        <name value="Version"/>
        <name value="ErrMissingLikelyTagsData"/>
        <name value="DeprecatedBase"/>
        <name value="DeprecatedScript"/>
        <name value="DeprecatedRegion"/>
        <name value="SuppressScript"/>
        <name value="Legacy"/>
        <name value="Macro"/>
        <name value="CLDR"/>
        <name value="Raw"/>
        <name value="Deprecated"/>
        <name value="BCP47"/>
        <name value="All"/>
        <name value="Default"/>
        <name value="No"/>
        <name value="Low"/>
        <name value="High"/>
        <name value="Exact"/>
        <name value="Supported"/>
      </names>
    </package>
    <package importpath="golang.org/x/text/internal/ucd">
      <types>
        <type name="Option" type="func">
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </paramsList>
          <resultsList/>
        </type>
        <type type="struct" name="Parser">
          <field type="pointer" name="scanner">
            <type type="selector">
              <prefix value="bufio"/>
              <item value="Scanner"/>
            </type>
          </field>
          <field type="ident" def="bool" name="keepRanges"/>
          <field type="ident" def="error" name="err"/>
          <field type="slice" name="comment">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="field">
            <elmtype type="slice">
              <elmtype type="ident" def="byte"/>
            </elmtype>
          </field>
          <field type="ident" def="bool" name="parsedRange"/>
          <field type="ident" def="rune" name="rangeStart"/>
          <field type="ident" def="rune" name="rangeEnd"/>
          <field type="func" name="partHandler">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="Parser"/>
              </type>
            </paramsList>
            <resultsList/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Part">
          <recvList/>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="pointer">
                  <type type="ident" def="Parser"/>
                </type>
              </paramsList>
              <resultsList/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Option"/>
          </resultsList>
        </function>
        <function name="Err">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ellipsis">
              <type type="ident" def="Option"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Rune">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="rune"/>
          </resultsList>
        </function>
        <function name="Runes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="rune"/>
            </type>
          </resultsList>
        </function>
        <function name="Range">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="rune"/>
            <type type="ident" def="rune"/>
          </resultsList>
        </function>
        <function name="Bool">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Int">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Uint">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint"/>
          </resultsList>
        </function>
        <function name="Float">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="float64"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Strings">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="Comment">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Enum">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="CodePoint"/>
        <name value="Name"/>
        <name value="GeneralCategory"/>
        <name value="CanonicalCombiningClass"/>
        <name value="BidiClass"/>
        <name value="DecompMapping"/>
        <name value="DecimalValue"/>
        <name value="DigitValue"/>
        <name value="NumericValue"/>
        <name value="BidiMirrored"/>
        <name value="Unicode1Name"/>
        <name value="ISOComment"/>
        <name value="SimpleUppercaseMapping"/>
        <name value="SimpleLowercaseMapping"/>
        <name value="SimpleTitlecaseMapping"/>
        <name value="KeepRanges"/>
      </names>
    </package>
    <package importpath="golang.org/x/text/cldr">
      <types>
        <type type="struct" name="LDMLBCP47">
          <field type="ident" def="Common" name=""/>
          <field type="pointer" name="Version">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="ident" def="string" name="Number"/>
            </type>
          </field>
          <field type="pointer" name="Generation">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="ident" def="string" name="Date"/>
            </type>
          </field>
          <field type="slice" name="Keyword">
            <elmtype type="pointer">
              <type type="struct" name="">
                <field type="ident" def="Common" name=""/>
                <field type="slice" name="Key">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="Extension"/>
                      <field type="ident" def="string" name="Name"/>
                      <field type="ident" def="string" name="Description"/>
                      <field type="ident" def="string" name="Deprecated"/>
                      <field type="ident" def="string" name="Preferred"/>
                      <field type="ident" def="string" name="Alias"/>
                      <field type="ident" def="string" name="Since"/>
                      <field type="slice" name="Type">
                        <elmtype type="pointer">
                          <type type="struct" name="">
                            <field type="ident" def="Common" name=""/>
                            <field type="ident" def="string" name="Name"/>
                            <field type="ident" def="string" name="Description"/>
                            <field type="ident" def="string" name="Deprecated"/>
                            <field type="ident" def="string" name="Preferred"/>
                            <field type="ident" def="string" name="Alias"/>
                            <field type="ident" def="string" name="Since"/>
                          </type>
                        </elmtype>
                      </field>
                    </type>
                  </elmtype>
                </field>
              </type>
            </elmtype>
          </field>
          <field type="slice" name="Attribute">
            <elmtype type="pointer">
              <type type="struct" name="">
                <field type="ident" def="Common" name=""/>
                <field type="ident" def="string" name="Name"/>
                <field type="ident" def="string" name="Description"/>
                <field type="ident" def="string" name="Deprecated"/>
                <field type="ident" def="string" name="Preferred"/>
                <field type="ident" def="string" name="Since"/>
              </type>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="SupplementalData">
          <field type="ident" def="Common" name=""/>
          <field type="pointer" name="Version">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="ident" def="string" name="Number"/>
            </type>
          </field>
          <field type="pointer" name="Generation">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="ident" def="string" name="Date"/>
            </type>
          </field>
          <field type="pointer" name="CurrencyData">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Fractions">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="Info">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="Iso4217"/>
                          <field type="ident" def="string" name="Digits"/>
                          <field type="ident" def="string" name="Rounding"/>
                          <field type="ident" def="string" name="CashDigits"/>
                          <field type="ident" def="string" name="CashRounding"/>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="Region">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Iso3166"/>
                    <field type="slice" name="Currency">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="Before"/>
                          <field type="ident" def="string" name="From"/>
                          <field type="ident" def="string" name="To"/>
                          <field type="ident" def="string" name="Iso4217"/>
                          <field type="ident" def="string" name="Digits"/>
                          <field type="ident" def="string" name="Rounding"/>
                          <field type="ident" def="string" name="CashRounding"/>
                          <field type="ident" def="string" name="Tender"/>
                          <field type="slice" name="Alternate">
                            <elmtype type="pointer">
                              <type type="struct" name="">
                                <field type="ident" def="Common" name=""/>
                                <field type="ident" def="string" name="Iso4217"/>
                              </type>
                            </elmtype>
                          </field>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="TerritoryContainment">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Group">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Contains"/>
                    <field type="ident" def="string" name="Grouping"/>
                    <field type="ident" def="string" name="Status"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="LanguageData">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Language">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Scripts"/>
                    <field type="ident" def="string" name="Territories"/>
                    <field type="ident" def="string" name="Variants"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="TerritoryInfo">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Territory">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Gdp"/>
                    <field type="ident" def="string" name="LiteracyPercent"/>
                    <field type="ident" def="string" name="Population"/>
                    <field type="slice" name="LanguagePopulation">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="WritingPercent"/>
                          <field type="ident" def="string" name="PopulationPercent"/>
                          <field type="ident" def="string" name="OfficialStatus"/>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="PostalCodeData">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="PostCodeRegex">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="TerritoryId"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="CalendarData">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Calendar">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Territories"/>
                    <field type="pointer" name="CalendarSystem">
                      <type type="ident" def="Common"/>
                    </field>
                    <field type="pointer" name="Eras">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="slice" name="Era">
                          <elmtype type="pointer">
                            <type type="struct" name="">
                              <field type="ident" def="Common" name=""/>
                              <field type="ident" def="string" name="Start"/>
                              <field type="ident" def="string" name="End"/>
                            </type>
                          </elmtype>
                        </field>
                      </type>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="CalendarPreferenceData">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="CalendarPreference">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Territories"/>
                    <field type="ident" def="string" name="Ordering"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="WeekData">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="MinDays">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Count"/>
                    <field type="ident" def="string" name="Territories"/>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="FirstDay">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Day"/>
                    <field type="ident" def="string" name="Territories"/>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="WeekendStart">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Day"/>
                    <field type="ident" def="string" name="Territories"/>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="WeekendEnd">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Day"/>
                    <field type="ident" def="string" name="Territories"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="TimeData">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Hours">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Allowed"/>
                    <field type="ident" def="string" name="Preferred"/>
                    <field type="ident" def="string" name="Regions"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="MeasurementData">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="MeasurementSystem">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Territories"/>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="PaperSize">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Territories"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="TimezoneData">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="MapTimezones">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="OtherVersion"/>
                    <field type="ident" def="string" name="TypeVersion"/>
                    <field type="slice" name="MapZone">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="Other"/>
                          <field type="ident" def="string" name="Territory"/>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="ZoneFormatting">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Multizone"/>
                    <field type="ident" def="string" name="TzidVersion"/>
                    <field type="slice" name="ZoneItem">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="Territory"/>
                          <field type="ident" def="string" name="Aliases"/>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Characters">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="CharacterFallback">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="Character">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="Value"/>
                          <field type="slice" name="Substitute">
                            <elmtype type="pointer">
                              <type type="ident" def="Common"/>
                            </elmtype>
                          </field>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Transforms">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Transform">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Source"/>
                    <field type="ident" def="string" name="Target"/>
                    <field type="ident" def="string" name="Variant"/>
                    <field type="ident" def="string" name="Direction"/>
                    <field type="ident" def="string" name="Visibility"/>
                    <field type="slice" name="Comment">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                    <field type="slice" name="TRule">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Metadata">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="pointer" name="AttributeOrder">
                <type type="ident" def="Common"/>
              </field>
              <field type="pointer" name="ElementOrder">
                <type type="ident" def="Common"/>
              </field>
              <field type="pointer" name="SerialElements">
                <type type="ident" def="Common"/>
              </field>
              <field type="pointer" name="Suppress">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="slice" name="Attributes">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Element"/>
                        <field type="ident" def="string" name="Attribute"/>
                        <field type="ident" def="string" name="AttributeValue"/>
                      </type>
                    </elmtype>
                  </field>
                </type>
              </field>
              <field type="pointer" name="Validity">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="slice" name="Variable">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Id"/>
                      </type>
                    </elmtype>
                  </field>
                  <field type="slice" name="AttributeValues">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Elements"/>
                        <field type="ident" def="string" name="Attributes"/>
                        <field type="ident" def="string" name="Order"/>
                      </type>
                    </elmtype>
                  </field>
                </type>
              </field>
              <field type="pointer" name="Alias">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="slice" name="LanguageAlias">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Replacement"/>
                        <field type="ident" def="string" name="Reason"/>
                      </type>
                    </elmtype>
                  </field>
                  <field type="slice" name="ScriptAlias">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Replacement"/>
                        <field type="ident" def="string" name="Reason"/>
                      </type>
                    </elmtype>
                  </field>
                  <field type="slice" name="TerritoryAlias">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Replacement"/>
                        <field type="ident" def="string" name="Reason"/>
                      </type>
                    </elmtype>
                  </field>
                  <field type="slice" name="VariantAlias">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Replacement"/>
                        <field type="ident" def="string" name="Reason"/>
                      </type>
                    </elmtype>
                  </field>
                  <field type="slice" name="ZoneAlias">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Replacement"/>
                        <field type="ident" def="string" name="Reason"/>
                      </type>
                    </elmtype>
                  </field>
                </type>
              </field>
              <field type="pointer" name="Deprecated">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="slice" name="DeprecatedItems">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Elements"/>
                        <field type="ident" def="string" name="Attributes"/>
                        <field type="ident" def="string" name="Values"/>
                      </type>
                    </elmtype>
                  </field>
                </type>
              </field>
              <field type="pointer" name="Distinguishing">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="slice" name="DistinguishingItems">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Exclude"/>
                        <field type="ident" def="string" name="Elements"/>
                        <field type="ident" def="string" name="Attributes"/>
                      </type>
                    </elmtype>
                  </field>
                </type>
              </field>
              <field type="pointer" name="Blocking">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="slice" name="BlockingItems">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Elements"/>
                      </type>
                    </elmtype>
                  </field>
                </type>
              </field>
              <field type="pointer" name="CoverageAdditions">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="slice" name="LanguageCoverage">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Values"/>
                      </type>
                    </elmtype>
                  </field>
                  <field type="slice" name="ScriptCoverage">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Values"/>
                      </type>
                    </elmtype>
                  </field>
                  <field type="slice" name="TerritoryCoverage">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Values"/>
                      </type>
                    </elmtype>
                  </field>
                  <field type="slice" name="CurrencyCoverage">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Values"/>
                      </type>
                    </elmtype>
                  </field>
                  <field type="slice" name="TimezoneCoverage">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Values"/>
                      </type>
                    </elmtype>
                  </field>
                </type>
              </field>
              <field type="pointer" name="SkipDefaultLocale">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="ident" def="string" name="Services"/>
                </type>
              </field>
              <field type="pointer" name="DefaultContent">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="ident" def="string" name="Locales"/>
                </type>
              </field>
            </type>
          </field>
          <field type="pointer" name="CodeMappings">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="LanguageCodes">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Alpha3"/>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="TerritoryCodes">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Numeric"/>
                    <field type="ident" def="string" name="Alpha3"/>
                    <field type="ident" def="string" name="Fips10"/>
                    <field type="ident" def="string" name="Internet"/>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="CurrencyCodes">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Numeric"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="ParentLocales">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="ParentLocale">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Parent"/>
                    <field type="ident" def="string" name="Locales"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="LikelySubtags">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="LikelySubtag">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="From"/>
                    <field type="ident" def="string" name="To"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="MetazoneInfo">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Timezone">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="UsesMetazone">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="From"/>
                          <field type="ident" def="string" name="To"/>
                          <field type="ident" def="string" name="Mzone"/>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="slice" name="Plurals">
            <elmtype type="pointer">
              <type type="struct" name="">
                <field type="ident" def="Common" name=""/>
                <field type="slice" name="PluralRules">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="Locales"/>
                      <field type="slice" name="PluralRule">
                        <elmtype type="pointer">
                          <type type="struct" name="">
                            <field type="ident" def="Common" name=""/>
                            <field type="ident" def="string" name="Count"/>
                          </type>
                        </elmtype>
                      </field>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="PluralRanges">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="Locales"/>
                      <field type="slice" name="PluralRange">
                        <elmtype type="pointer">
                          <type type="struct" name="">
                            <field type="ident" def="Common" name=""/>
                            <field type="ident" def="string" name="Start"/>
                            <field type="ident" def="string" name="End"/>
                            <field type="ident" def="string" name="Result"/>
                          </type>
                        </elmtype>
                      </field>
                    </type>
                  </elmtype>
                </field>
              </type>
            </elmtype>
          </field>
          <field type="pointer" name="TelephoneCodeData">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="CodesByTerritory">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Territory"/>
                    <field type="slice" name="TelephoneCountryCode">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="Code"/>
                          <field type="ident" def="string" name="From"/>
                          <field type="ident" def="string" name="To"/>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="NumberingSystems">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="NumberingSystem">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Id"/>
                    <field type="ident" def="string" name="Radix"/>
                    <field type="ident" def="string" name="Digits"/>
                    <field type="ident" def="string" name="Rules"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Bcp47KeywordMappings">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="pointer" name="MapKeys">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="slice" name="KeyMap">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Bcp47"/>
                      </type>
                    </elmtype>
                  </field>
                </type>
              </field>
              <field type="slice" name="MapTypes">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="TypeMap">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="Bcp47"/>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Gender">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="PersonList">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Locales"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="References">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Reference">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Uri"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="LanguageMatching">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="LanguageMatches">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="LanguageMatch">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="Desired"/>
                          <field type="ident" def="string" name="Oneway"/>
                          <field type="ident" def="string" name="Percent"/>
                          <field type="ident" def="string" name="Supported"/>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="DayPeriodRuleSet">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="DayPeriodRules">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Locales"/>
                    <field type="slice" name="DayPeriodRule">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="At"/>
                          <field type="ident" def="string" name="After"/>
                          <field type="ident" def="string" name="Before"/>
                          <field type="ident" def="string" name="From"/>
                          <field type="ident" def="string" name="To"/>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="MetaZones">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="pointer" name="MetazoneInfo">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="slice" name="Timezone">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="slice" name="UsesMetazone">
                          <elmtype type="pointer">
                            <type type="struct" name="">
                              <field type="ident" def="Common" name=""/>
                              <field type="ident" def="string" name="From"/>
                              <field type="ident" def="string" name="To"/>
                              <field type="ident" def="string" name="Mzone"/>
                            </type>
                          </elmtype>
                        </field>
                      </type>
                    </elmtype>
                  </field>
                </type>
              </field>
              <field type="pointer" name="MapTimezones">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="ident" def="string" name="OtherVersion"/>
                  <field type="ident" def="string" name="TypeVersion"/>
                  <field type="slice" name="MapZone">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Other"/>
                        <field type="ident" def="string" name="Territory"/>
                      </type>
                    </elmtype>
                  </field>
                </type>
              </field>
            </type>
          </field>
          <field type="pointer" name="PrimaryZones">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="PrimaryZone">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Iso3166"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="WindowsZones">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="pointer" name="MapTimezones">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="ident" def="string" name="OtherVersion"/>
                  <field type="ident" def="string" name="TypeVersion"/>
                  <field type="slice" name="MapZone">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Other"/>
                        <field type="ident" def="string" name="Territory"/>
                      </type>
                    </elmtype>
                  </field>
                </type>
              </field>
            </type>
          </field>
          <field type="pointer" name="CoverageLevels">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="pointer" name="ApprovalRequirements">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="slice" name="ApprovalRequirement">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Votes"/>
                        <field type="ident" def="string" name="Locales"/>
                        <field type="ident" def="string" name="Paths"/>
                      </type>
                    </elmtype>
                  </field>
                </type>
              </field>
              <field type="slice" name="CoverageVariable">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Key"/>
                    <field type="ident" def="string" name="Value"/>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="CoverageLevel">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="InLanguage"/>
                    <field type="ident" def="string" name="InScript"/>
                    <field type="ident" def="string" name="InTerritory"/>
                    <field type="ident" def="string" name="Value"/>
                    <field type="ident" def="string" name="Match"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
        </type>
        <type type="struct" name="LDML">
          <field type="ident" def="Common" name=""/>
          <field type="pointer" name="Identity">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="pointer" name="Version">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="ident" def="string" name="Number"/>
                </type>
              </field>
              <field type="pointer" name="Generation">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="ident" def="string" name="Date"/>
                </type>
              </field>
              <field type="pointer" name="Language">
                <type type="ident" def="Common"/>
              </field>
              <field type="pointer" name="Script">
                <type type="ident" def="Common"/>
              </field>
              <field type="pointer" name="Territory">
                <type type="ident" def="Common"/>
              </field>
              <field type="pointer" name="Variant">
                <type type="ident" def="Common"/>
              </field>
            </type>
          </field>
          <field type="pointer" name="LocaleDisplayNames">
            <type type="ident" def="LocaleDisplayNames"/>
          </field>
          <field type="pointer" name="Layout">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Orientation">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Characters"/>
                    <field type="ident" def="string" name="Lines"/>
                    <field type="slice" name="CharacterOrder">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                    <field type="slice" name="LineOrder">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="InList">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Casing"/>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="InText">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="ContextTransforms">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="ContextTransformUsage">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="ContextTransform">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Characters">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="ExemplarCharacters">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
              <field type="slice" name="Ellipsis">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
              <field type="slice" name="MoreInformation">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
              <field type="slice" name="Stopwords">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="StopwordList">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="IndexLabels">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="IndexSeparator">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                    <field type="slice" name="CompressedIndexSeparator">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                    <field type="slice" name="IndexRangePattern">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                    <field type="slice" name="IndexLabelBefore">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                    <field type="slice" name="IndexLabelAfter">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                    <field type="slice" name="IndexLabel">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="IndexSource"/>
                          <field type="ident" def="string" name="Priority"/>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="Mapping">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Registry"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Delimiters">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="QuotationStart">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
              <field type="slice" name="QuotationEnd">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
              <field type="slice" name="AlternateQuotationStart">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
              <field type="slice" name="AlternateQuotationEnd">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Measurement">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="MeasurementSystem">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
              <field type="slice" name="PaperSize">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="Height">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                    <field type="slice" name="Width">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Dates">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="LocalizedPatternChars">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
              <field type="slice" name="DateRangePattern">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
              <field type="pointer" name="Calendars">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="slice" name="Calendar">
                    <elmtype type="pointer">
                      <type type="ident" def="Calendar"/>
                    </elmtype>
                  </field>
                </type>
              </field>
              <field type="pointer" name="Fields">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="slice" name="Field">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="slice" name="DisplayName">
                          <elmtype type="pointer">
                            <type type="struct" name="">
                              <field type="ident" def="Common" name=""/>
                              <field type="ident" def="string" name="Count"/>
                            </type>
                          </elmtype>
                        </field>
                        <field type="slice" name="Relative">
                          <elmtype type="pointer">
                            <type type="ident" def="Common"/>
                          </elmtype>
                        </field>
                        <field type="slice" name="RelativeTime">
                          <elmtype type="pointer">
                            <type type="struct" name="">
                              <field type="ident" def="Common" name=""/>
                              <field type="slice" name="RelativeTimePattern">
                                <elmtype type="pointer">
                                  <type type="struct" name="">
                                    <field type="ident" def="Common" name=""/>
                                    <field type="ident" def="string" name="Count"/>
                                  </type>
                                </elmtype>
                              </field>
                            </type>
                          </elmtype>
                        </field>
                      </type>
                    </elmtype>
                  </field>
                </type>
              </field>
              <field type="pointer" name="TimeZoneNames">
                <type type="ident" def="TimeZoneNames"/>
              </field>
            </type>
          </field>
          <field type="pointer" name="Numbers">
            <type type="ident" def="Numbers"/>
          </field>
          <field type="pointer" name="Units">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Unit">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="DisplayName">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="Count"/>
                        </type>
                      </elmtype>
                    </field>
                    <field type="slice" name="UnitPattern">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="Count"/>
                        </type>
                      </elmtype>
                    </field>
                    <field type="slice" name="PerUnitPattern">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="UnitLength">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="CompoundUnit">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="slice" name="CompoundUnitPattern">
                            <elmtype type="pointer">
                              <type type="ident" def="Common"/>
                            </elmtype>
                          </field>
                        </type>
                      </elmtype>
                    </field>
                    <field type="slice" name="Unit">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="slice" name="DisplayName">
                            <elmtype type="pointer">
                              <type type="struct" name="">
                                <field type="ident" def="Common" name=""/>
                                <field type="ident" def="string" name="Count"/>
                              </type>
                            </elmtype>
                          </field>
                          <field type="slice" name="UnitPattern">
                            <elmtype type="pointer">
                              <type type="struct" name="">
                                <field type="ident" def="Common" name=""/>
                                <field type="ident" def="string" name="Count"/>
                              </type>
                            </elmtype>
                          </field>
                          <field type="slice" name="PerUnitPattern">
                            <elmtype type="pointer">
                              <type type="ident" def="Common"/>
                            </elmtype>
                          </field>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="DurationUnit">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="DurationUnitPattern">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="ListPatterns">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="ListPattern">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="ListPatternPart">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Collations">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="ident" def="string" name="Version"/>
              <field type="pointer" name="DefaultCollation">
                <type type="ident" def="Common"/>
              </field>
              <field type="slice" name="Collation">
                <elmtype type="pointer">
                  <type type="ident" def="Collation"/>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Posix">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Messages">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="Yesstr">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                    <field type="slice" name="Nostr">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                    <field type="slice" name="Yesexpr">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                    <field type="slice" name="Noexpr">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Segmentations">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Segmentation">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="pointer" name="Variables">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="slice" name="Variable">
                          <elmtype type="pointer">
                            <type type="struct" name="">
                              <field type="ident" def="Common" name=""/>
                              <field type="ident" def="string" name="Id"/>
                            </type>
                          </elmtype>
                        </field>
                      </type>
                    </field>
                    <field type="pointer" name="SegmentRules">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="slice" name="Rule">
                          <elmtype type="pointer">
                            <type type="struct" name="">
                              <field type="ident" def="Common" name=""/>
                              <field type="ident" def="string" name="Id"/>
                            </type>
                          </elmtype>
                        </field>
                      </type>
                    </field>
                    <field type="pointer" name="Exceptions">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="slice" name="Exception">
                          <elmtype type="pointer">
                            <type type="ident" def="Common"/>
                          </elmtype>
                        </field>
                      </type>
                    </field>
                    <field type="pointer" name="Suppressions">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="slice" name="Suppression">
                          <elmtype type="pointer">
                            <type type="ident" def="Common"/>
                          </elmtype>
                        </field>
                      </type>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Rbnf">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="RulesetGrouping">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="Ruleset">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="Access"/>
                          <field type="ident" def="string" name="AllowsParsing"/>
                          <field type="slice" name="Rbnfrule">
                            <elmtype type="pointer">
                              <type type="struct" name="">
                                <field type="ident" def="Common" name=""/>
                                <field type="ident" def="string" name="Value"/>
                                <field type="ident" def="string" name="Radix"/>
                                <field type="ident" def="string" name="Decexp"/>
                              </type>
                            </elmtype>
                          </field>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Metadata">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="pointer" name="CasingData">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="slice" name="CasingItem">
                    <elmtype type="pointer">
                      <type type="struct" name="">
                        <field type="ident" def="Common" name=""/>
                        <field type="ident" def="string" name="Override"/>
                      </type>
                    </elmtype>
                  </field>
                </type>
              </field>
            </type>
          </field>
          <field type="pointer" name="References">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Reference">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Uri"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
        </type>
        <type type="struct" name="Collation">
          <field type="ident" def="Common" name=""/>
          <field type="ident" def="string" name="Visibility"/>
          <field type="pointer" name="Base">
            <type type="ident" def="Common"/>
          </field>
          <field type="slice" name="Import">
            <elmtype type="pointer">
              <type type="struct" name="">
                <field type="ident" def="Common" name=""/>
                <field type="ident" def="string" name="Source"/>
              </type>
            </elmtype>
          </field>
          <field type="pointer" name="Settings">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="ident" def="string" name="Strength"/>
              <field type="ident" def="string" name="Alternate"/>
              <field type="ident" def="string" name="Backwards"/>
              <field type="ident" def="string" name="Normalization"/>
              <field type="ident" def="string" name="CaseLevel"/>
              <field type="ident" def="string" name="CaseFirst"/>
              <field type="ident" def="string" name="HiraganaQuaternary"/>
              <field type="ident" def="string" name="MaxVariable"/>
              <field type="ident" def="string" name="Numeric"/>
              <field type="ident" def="string" name="Private"/>
              <field type="ident" def="string" name="VariableTop"/>
              <field type="ident" def="string" name="Reorder"/>
            </type>
          </field>
          <field type="pointer" name="SuppressContractions">
            <type type="ident" def="Common"/>
          </field>
          <field type="pointer" name="Optimize">
            <type type="ident" def="Common"/>
          </field>
          <field type="slice" name="Cr">
            <elmtype type="pointer">
              <type type="ident" def="Common"/>
            </elmtype>
          </field>
          <field type="ident" def="rulesElem" name=""/>
        </type>
        <type type="struct" name="Calendar">
          <field type="ident" def="Common" name=""/>
          <field type="pointer" name="Months">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="MonthContext">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="MonthWidth">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="slice" name="Month">
                            <elmtype type="pointer">
                              <type type="struct" name="">
                                <field type="ident" def="Common" name=""/>
                                <field type="ident" def="string" name="Yeartype"/>
                              </type>
                            </elmtype>
                          </field>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="MonthNames">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Month">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Yeartype"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="MonthAbbr">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Month">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Yeartype"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="MonthPatterns">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="MonthPatternContext">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="MonthPatternWidth">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="slice" name="MonthPattern">
                            <elmtype type="pointer">
                              <type type="ident" def="Common"/>
                            </elmtype>
                          </field>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Days">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="DayContext">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="DayWidth">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="slice" name="Day">
                            <elmtype type="pointer">
                              <type type="ident" def="Common"/>
                            </elmtype>
                          </field>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="DayNames">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Day">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="DayAbbr">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Day">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Quarters">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="QuarterContext">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="QuarterWidth">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="slice" name="Quarter">
                            <elmtype type="pointer">
                              <type type="ident" def="Common"/>
                            </elmtype>
                          </field>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Week">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="MinDays">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Count"/>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="FirstDay">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Day"/>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="WeekendStart">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Day"/>
                    <field type="ident" def="string" name="Time"/>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="WeekendEnd">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Day"/>
                    <field type="ident" def="string" name="Time"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="slice" name="Am">
            <elmtype type="pointer">
              <type type="ident" def="Common"/>
            </elmtype>
          </field>
          <field type="slice" name="Pm">
            <elmtype type="pointer">
              <type type="ident" def="Common"/>
            </elmtype>
          </field>
          <field type="pointer" name="DayPeriods">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="DayPeriodContext">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="DayPeriodWidth">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="slice" name="DayPeriod">
                            <elmtype type="pointer">
                              <type type="ident" def="Common"/>
                            </elmtype>
                          </field>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Eras">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="pointer" name="EraNames">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="slice" name="Era">
                    <elmtype type="pointer">
                      <type type="ident" def="Common"/>
                    </elmtype>
                  </field>
                </type>
              </field>
              <field type="pointer" name="EraAbbr">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="slice" name="Era">
                    <elmtype type="pointer">
                      <type type="ident" def="Common"/>
                    </elmtype>
                  </field>
                </type>
              </field>
              <field type="pointer" name="EraNarrow">
                <type type="struct" name="">
                  <field type="ident" def="Common" name=""/>
                  <field type="slice" name="Era">
                    <elmtype type="pointer">
                      <type type="ident" def="Common"/>
                    </elmtype>
                  </field>
                </type>
              </field>
            </type>
          </field>
          <field type="pointer" name="CyclicNameSets">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="CyclicNameSet">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="CyclicNameContext">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="slice" name="CyclicNameWidth">
                            <elmtype type="pointer">
                              <type type="struct" name="">
                                <field type="ident" def="Common" name=""/>
                                <field type="slice" name="CyclicName">
                                  <elmtype type="pointer">
                                    <type type="ident" def="Common"/>
                                  </elmtype>
                                </field>
                              </type>
                            </elmtype>
                          </field>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="DateFormats">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="DateFormatLength">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="DateFormat">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="slice" name="Pattern">
                            <elmtype type="pointer">
                              <type type="struct" name="">
                                <field type="ident" def="Common" name=""/>
                                <field type="ident" def="string" name="Numbers"/>
                                <field type="ident" def="string" name="Count"/>
                              </type>
                            </elmtype>
                          </field>
                          <field type="slice" name="DisplayName">
                            <elmtype type="pointer">
                              <type type="struct" name="">
                                <field type="ident" def="Common" name=""/>
                                <field type="ident" def="string" name="Count"/>
                              </type>
                            </elmtype>
                          </field>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="TimeFormats">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="TimeFormatLength">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="TimeFormat">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="slice" name="Pattern">
                            <elmtype type="pointer">
                              <type type="struct" name="">
                                <field type="ident" def="Common" name=""/>
                                <field type="ident" def="string" name="Numbers"/>
                                <field type="ident" def="string" name="Count"/>
                              </type>
                            </elmtype>
                          </field>
                          <field type="slice" name="DisplayName">
                            <elmtype type="pointer">
                              <type type="struct" name="">
                                <field type="ident" def="Common" name=""/>
                                <field type="ident" def="string" name="Count"/>
                              </type>
                            </elmtype>
                          </field>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="DateTimeFormats">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="DateTimeFormatLength">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="DateTimeFormat">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="slice" name="Pattern">
                            <elmtype type="pointer">
                              <type type="struct" name="">
                                <field type="ident" def="Common" name=""/>
                                <field type="ident" def="string" name="Numbers"/>
                                <field type="ident" def="string" name="Count"/>
                              </type>
                            </elmtype>
                          </field>
                          <field type="slice" name="DisplayName">
                            <elmtype type="pointer">
                              <type type="struct" name="">
                                <field type="ident" def="Common" name=""/>
                                <field type="ident" def="string" name="Count"/>
                              </type>
                            </elmtype>
                          </field>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="AvailableFormats">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="DateFormatItem">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="Id"/>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="AppendItems">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="AppendItem">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="Request"/>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
              <field type="slice" name="IntervalFormats">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="IntervalFormatFallback">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                    <field type="slice" name="IntervalFormatItem">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="Id"/>
                          <field type="slice" name="GreatestDifference">
                            <elmtype type="pointer">
                              <type type="struct" name="">
                                <field type="ident" def="Common" name=""/>
                                <field type="ident" def="string" name="Id"/>
                              </type>
                            </elmtype>
                          </field>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="slice" name="Fields">
            <elmtype type="pointer">
              <type type="struct" name="">
                <field type="ident" def="Common" name=""/>
                <field type="slice" name="Field">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="slice" name="DisplayName">
                        <elmtype type="pointer">
                          <type type="struct" name="">
                            <field type="ident" def="Common" name=""/>
                            <field type="ident" def="string" name="Count"/>
                          </type>
                        </elmtype>
                      </field>
                      <field type="slice" name="Relative">
                        <elmtype type="pointer">
                          <type type="ident" def="Common"/>
                        </elmtype>
                      </field>
                      <field type="slice" name="RelativeTime">
                        <elmtype type="pointer">
                          <type type="struct" name="">
                            <field type="ident" def="Common" name=""/>
                            <field type="slice" name="RelativeTimePattern">
                              <elmtype type="pointer">
                                <type type="struct" name="">
                                  <field type="ident" def="Common" name=""/>
                                  <field type="ident" def="string" name="Count"/>
                                </type>
                              </elmtype>
                            </field>
                          </type>
                        </elmtype>
                      </field>
                    </type>
                  </elmtype>
                </field>
              </type>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="TimeZoneNames">
          <field type="ident" def="Common" name=""/>
          <field type="slice" name="HourFormat">
            <elmtype type="pointer">
              <type type="ident" def="Common"/>
            </elmtype>
          </field>
          <field type="slice" name="HoursFormat">
            <elmtype type="pointer">
              <type type="ident" def="Common"/>
            </elmtype>
          </field>
          <field type="slice" name="GmtFormat">
            <elmtype type="pointer">
              <type type="ident" def="Common"/>
            </elmtype>
          </field>
          <field type="slice" name="GmtZeroFormat">
            <elmtype type="pointer">
              <type type="ident" def="Common"/>
            </elmtype>
          </field>
          <field type="slice" name="RegionFormat">
            <elmtype type="pointer">
              <type type="ident" def="Common"/>
            </elmtype>
          </field>
          <field type="slice" name="FallbackFormat">
            <elmtype type="pointer">
              <type type="ident" def="Common"/>
            </elmtype>
          </field>
          <field type="slice" name="FallbackRegionFormat">
            <elmtype type="pointer">
              <type type="ident" def="Common"/>
            </elmtype>
          </field>
          <field type="slice" name="AbbreviationFallback">
            <elmtype type="pointer">
              <type type="ident" def="Common"/>
            </elmtype>
          </field>
          <field type="slice" name="PreferenceOrdering">
            <elmtype type="pointer">
              <type type="ident" def="Common"/>
            </elmtype>
          </field>
          <field type="slice" name="SingleCountries">
            <elmtype type="pointer">
              <type type="struct" name="">
                <field type="ident" def="Common" name=""/>
                <field type="ident" def="string" name="List"/>
              </type>
            </elmtype>
          </field>
          <field type="slice" name="Zone">
            <elmtype type="pointer">
              <type type="struct" name="">
                <field type="ident" def="Common" name=""/>
                <field type="slice" name="Long">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="slice" name="Generic">
                        <elmtype type="pointer">
                          <type type="ident" def="Common"/>
                        </elmtype>
                      </field>
                      <field type="slice" name="Standard">
                        <elmtype type="pointer">
                          <type type="ident" def="Common"/>
                        </elmtype>
                      </field>
                      <field type="slice" name="Daylight">
                        <elmtype type="pointer">
                          <type type="ident" def="Common"/>
                        </elmtype>
                      </field>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="Short">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="slice" name="Generic">
                        <elmtype type="pointer">
                          <type type="ident" def="Common"/>
                        </elmtype>
                      </field>
                      <field type="slice" name="Standard">
                        <elmtype type="pointer">
                          <type type="ident" def="Common"/>
                        </elmtype>
                      </field>
                      <field type="slice" name="Daylight">
                        <elmtype type="pointer">
                          <type type="ident" def="Common"/>
                        </elmtype>
                      </field>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="CommonlyUsed">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="Used"/>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="ExemplarCity">
                  <elmtype type="pointer">
                    <type type="ident" def="Common"/>
                  </elmtype>
                </field>
              </type>
            </elmtype>
          </field>
          <field type="slice" name="Metazone">
            <elmtype type="pointer">
              <type type="struct" name="">
                <field type="ident" def="Common" name=""/>
                <field type="slice" name="Long">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="slice" name="Generic">
                        <elmtype type="pointer">
                          <type type="ident" def="Common"/>
                        </elmtype>
                      </field>
                      <field type="slice" name="Standard">
                        <elmtype type="pointer">
                          <type type="ident" def="Common"/>
                        </elmtype>
                      </field>
                      <field type="slice" name="Daylight">
                        <elmtype type="pointer">
                          <type type="ident" def="Common"/>
                        </elmtype>
                      </field>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="Short">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="slice" name="Generic">
                        <elmtype type="pointer">
                          <type type="ident" def="Common"/>
                        </elmtype>
                      </field>
                      <field type="slice" name="Standard">
                        <elmtype type="pointer">
                          <type type="ident" def="Common"/>
                        </elmtype>
                      </field>
                      <field type="slice" name="Daylight">
                        <elmtype type="pointer">
                          <type type="ident" def="Common"/>
                        </elmtype>
                      </field>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="CommonlyUsed">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="Used"/>
                    </type>
                  </elmtype>
                </field>
              </type>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="LocaleDisplayNames">
          <field type="ident" def="Common" name=""/>
          <field type="pointer" name="LocaleDisplayPattern">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="LocalePattern">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
              <field type="slice" name="LocaleSeparator">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
              <field type="slice" name="LocaleKeyTypePattern">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Languages">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Language">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Scripts">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Script">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Territories">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Territory">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Variants">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Variant">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Keys">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Key">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="Types">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Type">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="ident" def="string" name="Key"/>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="TransformNames">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="TransformName">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="MeasurementSystemNames">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="MeasurementSystemName">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="pointer" name="CodePatterns">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="CodePattern">
                <elmtype type="pointer">
                  <type type="ident" def="Common"/>
                </elmtype>
              </field>
            </type>
          </field>
        </type>
        <type type="struct" name="Numbers">
          <field type="ident" def="Common" name=""/>
          <field type="slice" name="DefaultNumberingSystem">
            <elmtype type="pointer">
              <type type="ident" def="Common"/>
            </elmtype>
          </field>
          <field type="slice" name="OtherNumberingSystems">
            <elmtype type="pointer">
              <type type="struct" name="">
                <field type="ident" def="Common" name=""/>
                <field type="slice" name="Native">
                  <elmtype type="pointer">
                    <type type="ident" def="Common"/>
                  </elmtype>
                </field>
                <field type="slice" name="Traditional">
                  <elmtype type="pointer">
                    <type type="ident" def="Common"/>
                  </elmtype>
                </field>
                <field type="slice" name="Finance">
                  <elmtype type="pointer">
                    <type type="ident" def="Common"/>
                  </elmtype>
                </field>
              </type>
            </elmtype>
          </field>
          <field type="slice" name="MinimumGroupingDigits">
            <elmtype type="pointer">
              <type type="ident" def="Common"/>
            </elmtype>
          </field>
          <field type="slice" name="Symbols">
            <elmtype type="pointer">
              <type type="struct" name="">
                <field type="ident" def="Common" name=""/>
                <field type="ident" def="string" name="NumberSystem"/>
                <field type="slice" name="Decimal">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="NumberSystem"/>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="Group">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="NumberSystem"/>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="List">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="NumberSystem"/>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="PercentSign">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="NumberSystem"/>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="NativeZeroDigit">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="NumberSystem"/>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="PatternDigit">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="NumberSystem"/>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="PlusSign">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="NumberSystem"/>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="MinusSign">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="NumberSystem"/>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="Exponential">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="NumberSystem"/>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="SuperscriptingExponent">
                  <elmtype type="pointer">
                    <type type="ident" def="Common"/>
                  </elmtype>
                </field>
                <field type="slice" name="PerMille">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="NumberSystem"/>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="Infinity">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="NumberSystem"/>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="Nan">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="NumberSystem"/>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="CurrencyDecimal">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="NumberSystem"/>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="CurrencyGroup">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="NumberSystem"/>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="TimeSeparator">
                  <elmtype type="pointer">
                    <type type="ident" def="Common"/>
                  </elmtype>
                </field>
              </type>
            </elmtype>
          </field>
          <field type="slice" name="DecimalFormats">
            <elmtype type="pointer">
              <type type="struct" name="">
                <field type="ident" def="Common" name=""/>
                <field type="ident" def="string" name="NumberSystem"/>
                <field type="slice" name="DecimalFormatLength">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="slice" name="DecimalFormat">
                        <elmtype type="pointer">
                          <type type="struct" name="">
                            <field type="ident" def="Common" name=""/>
                            <field type="slice" name="Pattern">
                              <elmtype type="pointer">
                                <type type="struct" name="">
                                  <field type="ident" def="Common" name=""/>
                                  <field type="ident" def="string" name="Numbers"/>
                                  <field type="ident" def="string" name="Count"/>
                                </type>
                              </elmtype>
                            </field>
                          </type>
                        </elmtype>
                      </field>
                    </type>
                  </elmtype>
                </field>
              </type>
            </elmtype>
          </field>
          <field type="slice" name="ScientificFormats">
            <elmtype type="pointer">
              <type type="struct" name="">
                <field type="ident" def="Common" name=""/>
                <field type="ident" def="string" name="NumberSystem"/>
                <field type="slice" name="ScientificFormatLength">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="slice" name="ScientificFormat">
                        <elmtype type="pointer">
                          <type type="struct" name="">
                            <field type="ident" def="Common" name=""/>
                            <field type="slice" name="Pattern">
                              <elmtype type="pointer">
                                <type type="struct" name="">
                                  <field type="ident" def="Common" name=""/>
                                  <field type="ident" def="string" name="Numbers"/>
                                  <field type="ident" def="string" name="Count"/>
                                </type>
                              </elmtype>
                            </field>
                          </type>
                        </elmtype>
                      </field>
                    </type>
                  </elmtype>
                </field>
              </type>
            </elmtype>
          </field>
          <field type="slice" name="PercentFormats">
            <elmtype type="pointer">
              <type type="struct" name="">
                <field type="ident" def="Common" name=""/>
                <field type="ident" def="string" name="NumberSystem"/>
                <field type="slice" name="PercentFormatLength">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="slice" name="PercentFormat">
                        <elmtype type="pointer">
                          <type type="struct" name="">
                            <field type="ident" def="Common" name=""/>
                            <field type="slice" name="Pattern">
                              <elmtype type="pointer">
                                <type type="struct" name="">
                                  <field type="ident" def="Common" name=""/>
                                  <field type="ident" def="string" name="Numbers"/>
                                  <field type="ident" def="string" name="Count"/>
                                </type>
                              </elmtype>
                            </field>
                          </type>
                        </elmtype>
                      </field>
                    </type>
                  </elmtype>
                </field>
              </type>
            </elmtype>
          </field>
          <field type="slice" name="CurrencyFormats">
            <elmtype type="pointer">
              <type type="struct" name="">
                <field type="ident" def="Common" name=""/>
                <field type="ident" def="string" name="NumberSystem"/>
                <field type="slice" name="CurrencySpacing">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="slice" name="BeforeCurrency">
                        <elmtype type="pointer">
                          <type type="struct" name="">
                            <field type="ident" def="Common" name=""/>
                            <field type="slice" name="CurrencyMatch">
                              <elmtype type="pointer">
                                <type type="ident" def="Common"/>
                              </elmtype>
                            </field>
                            <field type="slice" name="SurroundingMatch">
                              <elmtype type="pointer">
                                <type type="ident" def="Common"/>
                              </elmtype>
                            </field>
                            <field type="slice" name="InsertBetween">
                              <elmtype type="pointer">
                                <type type="ident" def="Common"/>
                              </elmtype>
                            </field>
                          </type>
                        </elmtype>
                      </field>
                      <field type="slice" name="AfterCurrency">
                        <elmtype type="pointer">
                          <type type="struct" name="">
                            <field type="ident" def="Common" name=""/>
                            <field type="slice" name="CurrencyMatch">
                              <elmtype type="pointer">
                                <type type="ident" def="Common"/>
                              </elmtype>
                            </field>
                            <field type="slice" name="SurroundingMatch">
                              <elmtype type="pointer">
                                <type type="ident" def="Common"/>
                              </elmtype>
                            </field>
                            <field type="slice" name="InsertBetween">
                              <elmtype type="pointer">
                                <type type="ident" def="Common"/>
                              </elmtype>
                            </field>
                          </type>
                        </elmtype>
                      </field>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="CurrencyFormatLength">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="slice" name="CurrencyFormat">
                        <elmtype type="pointer">
                          <type type="struct" name="">
                            <field type="ident" def="Common" name=""/>
                            <field type="slice" name="Pattern">
                              <elmtype type="pointer">
                                <type type="struct" name="">
                                  <field type="ident" def="Common" name=""/>
                                  <field type="ident" def="string" name="Numbers"/>
                                  <field type="ident" def="string" name="Count"/>
                                </type>
                              </elmtype>
                            </field>
                          </type>
                        </elmtype>
                      </field>
                    </type>
                  </elmtype>
                </field>
                <field type="slice" name="UnitPattern">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="Count"/>
                    </type>
                  </elmtype>
                </field>
              </type>
            </elmtype>
          </field>
          <field type="pointer" name="Currencies">
            <type type="struct" name="">
              <field type="ident" def="Common" name=""/>
              <field type="slice" name="Currency">
                <elmtype type="pointer">
                  <type type="struct" name="">
                    <field type="ident" def="Common" name=""/>
                    <field type="slice" name="Pattern">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="Numbers"/>
                          <field type="ident" def="string" name="Count"/>
                        </type>
                      </elmtype>
                    </field>
                    <field type="slice" name="DisplayName">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="Count"/>
                        </type>
                      </elmtype>
                    </field>
                    <field type="slice" name="Symbol">
                      <elmtype type="pointer">
                        <type type="ident" def="Common"/>
                      </elmtype>
                    </field>
                    <field type="slice" name="Decimal">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="NumberSystem"/>
                        </type>
                      </elmtype>
                    </field>
                    <field type="slice" name="Group">
                      <elmtype type="pointer">
                        <type type="struct" name="">
                          <field type="ident" def="Common" name=""/>
                          <field type="ident" def="string" name="NumberSystem"/>
                        </type>
                      </elmtype>
                    </field>
                  </type>
                </elmtype>
              </field>
            </type>
          </field>
          <field type="slice" name="MiscPatterns">
            <elmtype type="pointer">
              <type type="struct" name="">
                <field type="ident" def="Common" name=""/>
                <field type="ident" def="string" name="NumberSystem"/>
                <field type="slice" name="Pattern">
                  <elmtype type="pointer">
                    <type type="struct" name="">
                      <field type="ident" def="Common" name=""/>
                      <field type="ident" def="string" name="Numbers"/>
                      <field type="ident" def="string" name="Count"/>
                    </type>
                  </elmtype>
                </field>
              </type>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="Slice">
          <field type="selector" name="ptr">
            <prefix value="reflect"/>
            <item value="Value"/>
          </field>
          <field type="selector" name="typ">
            <prefix value="reflect"/>
            <item value="Type"/>
          </field>
        </type>
        <type type="struct" name="Decoder">
          <field type="slice" name="dirFilter">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="slice" name="sectionFilter">
            <elmtype type="ident" def="string"/>
          </field>
          <field type="ident" def="Loader" name="loader"/>
          <field type="pointer" name="cldr">
            <type type="ident" def="CLDR"/>
          </field>
          <field type="ident" def="string" name="curLocale"/>
        </type>
        <type name="Loader" type="interface">
          <method name="Len">
            <paramsList/>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
          <method name="Path">
            <paramsList>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="Reader">
            <paramsList>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="selector">
                <prefix value="io"/>
                <item value="ReadCloser"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="RuleProcessor" type="interface">
          <method name="Reset">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Insert">
            <paramsList>
              <type type="ident" def="int"/>
              <type type="ident" def="string"/>
              <type type="ident" def="string"/>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Index">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="CLDR">
          <field type="map" name="parent">
            <keytype type="ident" def="string"/>
            <valtype type="slice">
              <elmtype type="ident" def="string"/>
            </valtype>
          </field>
          <field type="map" name="locale">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="LDML"/>
            </valtype>
          </field>
          <field type="map" name="resolved">
            <keytype type="ident" def="string"/>
            <valtype type="pointer">
              <type type="ident" def="LDML"/>
            </valtype>
          </field>
          <field type="pointer" name="bcp47">
            <type type="ident" def="LDMLBCP47"/>
          </field>
          <field type="pointer" name="supp">
            <type type="ident" def="SupplementalData"/>
          </field>
        </type>
        <type name="Draft" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type name="Elem" type="interface">
          <method name="setEnclosing">
            <paramsList>
              <type type="ident" def="Elem"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="setName">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="enclosing">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Elem"/>
            </resultsList>
          </method>
          <method name="GetCommon">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="ident" def="Common"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Common">
          <field type="selector" name="XMLName">
            <prefix value="xml"/>
            <item value="Name"/>
          </field>
          <field type="ident" def="string" name="name"/>
          <field type="ident" def="Elem" name="enclElem"/>
          <field type="ident" def="string" name="Type"/>
          <field type="ident" def="string" name="Reference"/>
          <field type="ident" def="string" name="Alt"/>
          <field type="ident" def="string" name="ValidSubLocales"/>
          <field type="ident" def="string" name="Draft"/>
          <field type="ident" def="hidden" name=""/>
        </type>
      </types>
      <functions>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Slice"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="reflect"/>
              <item value="Value"/>
            </type>
          </resultsList>
        </function>
        <function name="MakeSlice">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Slice"/>
          </resultsList>
        </function>
        <function name="Filter">
          <recvList>
            <type type="ident" def="Slice"/>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="Elem"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="bool"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Group">
          <recvList>
            <type type="ident" def="Slice"/>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="Elem"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="string"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Slice"/>
            </type>
          </resultsList>
        </function>
        <function name="SelectAnyOf">
          <recvList>
            <type type="ident" def="Slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SelectOnePerGroup">
          <recvList>
            <type type="ident" def="Slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SelectDraft">
          <recvList>
            <type type="ident" def="Slice"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Draft"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Key">
          <recvList/>
          <paramsList>
            <type type="ident" def="Elem"/>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="SetSectionFilter">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Decoder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetDirFilter">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Decoder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Decode">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Decoder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Loader"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CLDR"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="pathLoader"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Path">
          <recvList>
            <type type="ident" def="pathLoader"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reader">
          <recvList>
            <type type="ident" def="pathLoader"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="ReadCloser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodePath">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Decoder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CLDR"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="zipLoader"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Path">
          <recvList>
            <type type="ident" def="zipLoader"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reader">
          <recvList>
            <type type="ident" def="zipLoader"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="ReadCloser"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DecodeZip">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Decoder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="CLDR"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Process">
          <recvList>
            <type type="ident" def="Collation"/>
          </recvList>
          <paramsList>
            <type type="ident" def="RuleProcessor"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="BCP47">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CLDR"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="LDMLBCP47"/>
            </type>
          </resultsList>
        </function>
        <function name="ParseDraft">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Draft"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Draft"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="SetDraftLevel">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CLDR"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Draft"/>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="RawLDML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CLDR"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="LDML"/>
            </type>
          </resultsList>
        </function>
        <function name="LDML">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CLDR"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="LDML"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Supplemental">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CLDR"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="SupplementalData"/>
            </type>
          </resultsList>
        </function>
        <function name="Locales">
          <recvList>
            <type type="pointer">
              <type type="ident" def="CLDR"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="Get">
          <recvList/>
          <paramsList>
            <type type="ident" def="Elem"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Elem"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Default">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Common"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="GetCommon">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Common"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Common"/>
            </type>
          </resultsList>
        </function>
        <function name="Data">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Common"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Version"/>
        <name value="Approved"/>
        <name value="Contributed"/>
        <name value="Provisional"/>
        <name value="Unconfirmed"/>
      </names>
    </package>
    <package importpath="golang.org/x/text/collate/colltab">
      <types>
        <type name="Weigher" type="interface">
          <method name="Start">
            <paramsList>
              <type type="ident" def="int"/>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
          <method name="StartString">
            <paramsList>
              <type type="ident" def="int"/>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
          <method name="AppendNext">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="Elem"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="Elem"/>
              </type>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
          <method name="AppendNextString">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="Elem"/>
              </type>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="Elem"/>
              </type>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
          <method name="Domain">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="string"/>
              </type>
            </resultsList>
          </method>
          <method name="Top">
            <paramsList/>
            <resultsList>
              <type type="ident" def="uint32"/>
            </resultsList>
          </method>
        </type>
        <type name="Level" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type name="Elem" type="ident">
          <type type="ident" def="uint32"/>
        </type>
      </types>
      <functions>
        <function name="AppendNext">
          <recvList>
            <type type="pointer">
              <type type="ident" def="table"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="Elem"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Elem"/>
            </type>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="AppendNextString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="table"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="Elem"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="Elem"/>
            </type>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Start">
          <recvList>
            <type type="pointer">
              <type type="ident" def="table"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="StartString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="table"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Domain">
          <recvList>
            <type type="pointer">
              <type type="ident" def="table"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </resultsList>
        </function>
        <function name="Top">
          <recvList>
            <type type="pointer">
              <type type="ident" def="table"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="Init">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Weigher"/>
          </resultsList>
        </function>
        <function name="MakeElem">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="uint8"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Elem"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="MakeQuaternary">
          <recvList/>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Elem"/>
          </resultsList>
        </function>
        <function name="Mask">
          <recvList>
            <type type="ident" def="Elem"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Level"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="CCC">
          <recvList>
            <type type="ident" def="Elem"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint8"/>
          </resultsList>
        </function>
        <function name="Primary">
          <recvList>
            <type type="ident" def="Elem"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Secondary">
          <recvList>
            <type type="ident" def="Elem"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Tertiary">
          <recvList>
            <type type="ident" def="Elem"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint8"/>
          </resultsList>
        </function>
        <function name="Quaternary">
          <recvList>
            <type type="ident" def="Elem"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Weight">
          <recvList>
            <type type="ident" def="Elem"/>
          </recvList>
          <paramsList>
            <type type="ident" def="Level"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Primary"/>
        <name value="Secondary"/>
        <name value="Tertiary"/>
        <name value="Quaternary"/>
        <name value="Identity"/>
        <name value="NumLevels"/>
        <name value="MaxQuaternary"/>
        <name value="PrivateUse"/>
        <name value="Ignore"/>
      </names>
    </package>
    <package importpath="golang.org/x/text/cases">
      <types>
        <type type="struct" name="Caser">
          <field type="selector" name="t">
            <prefix value="transform"/>
            <item value="Transformer"/>
          </field>
        </type>
        <type name="Option" type="func">
          <paramsList>
            <type type="pointer">
              <type type="ident" def="options"/>
            </type>
          </paramsList>
          <resultsList/>
        </type>
      </types>
      <functions>
        <function name="Transform">
          <recvList>
            <type type="pointer">
              <type type="ident" def="undUpperCaser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList>
            <type type="pointer">
              <type type="ident" def="simpleCaser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList>
            <type type="pointer">
              <type type="ident" def="lowerCaser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList>
            <type type="pointer">
              <type type="ident" def="titleCaser"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="context"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Bytes">
          <recvList>
            <type type="ident" def="Caser"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Caser"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="ident" def="Caser"/>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Transform">
          <recvList>
            <type type="ident" def="Caser"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Upper">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="language"/>
              <item value="Tag"/>
            </type>
            <type type="ellipsis">
              <type type="ident" def="Option"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Caser"/>
          </resultsList>
        </function>
        <function name="Lower">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="language"/>
              <item value="Tag"/>
            </type>
            <type type="ellipsis">
              <type type="ident" def="Option"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Caser"/>
          </resultsList>
        </function>
        <function name="Title">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="language"/>
              <item value="Tag"/>
            </type>
            <type type="ellipsis">
              <type type="ident" def="Option"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Caser"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Supported"/>
        <name value="NoLower"/>
      </names>
    </package>
    <package importpath="golang.org/x/text/encoding/traditionalchinese">
      <types/>
      <functions>
        <function name="NewDecoder">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="NewEncoder">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Big5"/>
      </names>
    </package>
    <package importpath="golang.org/x/text/collate/build">
      <types>
        <type type="struct" name="Builder">
          <field type="pointer" name="index">
            <type type="ident" def="trieBuilder"/>
          </field>
          <field type="ident" def="ordering" name="root"/>
          <field type="slice" name="locale">
            <elmtype type="pointer">
              <type type="ident" def="Tailoring"/>
            </elmtype>
          </field>
          <field type="pointer" name="t">
            <type type="ident" def="table"/>
          </field>
          <field type="ident" def="error" name="err"/>
          <field type="ident" def="bool" name="built"/>
          <field type="ident" def="int" name="minNonVar"/>
          <field type="ident" def="int" name="varTop"/>
          <field type="map" name="expIndex">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="int"/>
          </field>
          <field type="map" name="ctHandle">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="ctHandle"/>
          </field>
          <field type="map" name="ctElem">
            <keytype type="ident" def="string"/>
            <valtype type="ident" def="int"/>
          </field>
        </type>
        <type type="struct" name="Tailoring">
          <field type="ident" def="string" name="id"/>
          <field type="pointer" name="builder">
            <type type="ident" def="Builder"/>
          </field>
          <field type="pointer" name="index">
            <type type="ident" def="ordering"/>
          </field>
          <field type="pointer" name="anchor">
            <type type="ident" def="entry"/>
          </field>
          <field type="ident" def="bool" name="before"/>
        </type>
      </types>
      <functions>
        <function name="TrieIndex">
          <recvList>
            <type type="pointer">
              <type type="ident" def="table"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint16"/>
            </type>
          </resultsList>
        </function>
        <function name="TrieValues">
          <recvList>
            <type type="pointer">
              <type type="ident" def="table"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="FirstBlockOffsets">
          <recvList>
            <type type="pointer">
              <type type="ident" def="table"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint16"/>
            <type type="ident" def="uint16"/>
          </resultsList>
        </function>
        <function name="ExpandElems">
          <recvList>
            <type type="pointer">
              <type type="ident" def="table"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="ContractTries">
          <recvList>
            <type type="pointer">
              <type type="ident" def="table"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="struct" name="">
                <field type="ident" def="uint8" name="l"/>
                <field type="ident" def="uint8" name="h"/>
                <field type="ident" def="uint8" name="n"/>
                <field type="ident" def="uint8" name="i"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="ContractElems">
          <recvList>
            <type type="pointer">
              <type type="ident" def="table"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="MaxContractLen">
          <recvList>
            <type type="pointer">
              <type type="ident" def="table"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="VariableTop">
          <recvList>
            <type type="pointer">
              <type type="ident" def="table"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="entry"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="sortedEntries"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="sortedEntries"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="sortedEntries"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="entrySort"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="entrySort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="entrySort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="offsetSort"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="offsetSort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="offsetSort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="genidxSort"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="genidxSort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="genidxSort"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewBuilder">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Builder"/>
            </type>
          </resultsList>
        </function>
        <function name="Tailoring">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Builder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="language"/>
              <item value="Tag"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Tailoring"/>
            </type>
          </resultsList>
        </function>
        <function name="Add">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Builder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="rune"/>
            </type>
            <type type="slice">
              <elmtype type="slice">
                <elmtype type="ident" def="int"/>
              </elmtype>
            </type>
            <type type="slice">
              <elmtype type="ident" def="int"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetAnchor">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Tailoring"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="SetAnchorBefore">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Tailoring"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Insert">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Tailoring"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="colltab"/>
              <item value="Level"/>
            </type>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Build">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Builder"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="colltab"/>
              <item value="Weigher"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Build">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Tailoring"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="colltab"/>
              <item value="Weigher"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Print">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Builder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="golang.org/x/text/collate">
      <types>
        <type name="Lister" type="interface">
          <method name="Len">
            <paramsList/>
            <resultsList>
              <type type="ident" def="int"/>
            </resultsList>
          </method>
          <method name="Swap">
            <paramsList>
              <type type="ident" def="int"/>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Bytes">
            <paramsList>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
        </type>
        <type type="struct" name="Option">
          <field type="ident" def="int" name="priority"/>
          <field type="func" name="f">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="options"/>
              </type>
            </paramsList>
            <resultsList/>
          </field>
        </type>
        <type type="struct" name="Collator">
          <field type="ident" def="options" name=""/>
          <field type="ident" def="sorter" name="sorter"/>
          <field type="array" name="_iter">
            <elmtype type="ident" def="iter"/>
          </field>
        </type>
        <type type="struct" name="Buffer">
          <field type="array" name="buf">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="key">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="Len">
          <recvList>
            <type type="ident" def="sorter"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="sorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="sorter"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Sort">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Collator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Lister"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SortStrings">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Collator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Len">
          <recvList>
            <type type="ident" def="prioritizedOptions"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Swap">
          <recvList>
            <type type="ident" def="prioritizedOptions"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Less">
          <recvList>
            <type type="ident" def="prioritizedOptions"/>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="OptionsFromTag">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="language"/>
              <item value="Tag"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Option"/>
          </resultsList>
        </function>
        <function name="Reorder">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Option"/>
          </resultsList>
        </function>
        <function name="TrieIndex">
          <recvList>
            <type type="ident" def="tableIndex"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint16"/>
            </type>
          </resultsList>
        </function>
        <function name="TrieValues">
          <recvList>
            <type type="ident" def="tableIndex"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="FirstBlockOffsets">
          <recvList>
            <type type="ident" def="tableIndex"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint16"/>
            <type type="ident" def="uint16"/>
          </resultsList>
        </function>
        <function name="ExpandElems">
          <recvList>
            <type type="ident" def="tableIndex"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="ContractTries">
          <recvList>
            <type type="ident" def="tableIndex"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="struct" name="">
                <field type="ident" def="uint8" name="l"/>
                <field type="ident" def="uint8" name="h"/>
                <field type="ident" def="uint8" name="n"/>
                <field type="ident" def="uint8" name="i"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="ContractElems">
          <recvList>
            <type type="ident" def="tableIndex"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="uint32"/>
            </type>
          </resultsList>
        </function>
        <function name="MaxContractLen">
          <recvList>
            <type type="ident" def="tableIndex"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="VariableTop">
          <recvList>
            <type type="ident" def="tableIndex"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint32"/>
          </resultsList>
        </function>
        <function name="Supported">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="language"/>
                <item value="Tag"/>
              </elmtype>
            </type>
          </resultsList>
        </function>
        <function name="New">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="language"/>
              <item value="Tag"/>
            </type>
            <type type="ellipsis">
              <type type="ident" def="Option"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Collator"/>
            </type>
          </resultsList>
        </function>
        <function name="NewFromTable">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="colltab"/>
              <item value="Weigher"/>
            </type>
            <type type="ellipsis">
              <type type="ident" def="Option"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Collator"/>
            </type>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Compare">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Collator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="CompareString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Collator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Collator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="KeyFromString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Collator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Buffer"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="IgnoreCase"/>
        <name value="IgnoreDiacritics"/>
        <name value="IgnoreWidth"/>
        <name value="Loose"/>
        <name value="Force"/>
        <name value="Numeric"/>
      </names>
    </package>
    <package importpath="golang.org/x/text/encoding/japanese">
      <types/>
      <functions>
        <function name="NewDecoder">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="NewEncoder">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewDecoder">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="NewEncoder">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="iso2022JPDecoder"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Transform">
          <recvList>
            <type type="pointer">
              <type type="ident" def="iso2022JPDecoder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="iso2022JPEncoder"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Transform">
          <recvList>
            <type type="pointer">
              <type type="ident" def="iso2022JPEncoder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewDecoder">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="NewEncoder">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ShiftJIS"/>
        <name value="ISO2022JP"/>
        <name value="EUCJP"/>
      </names>
    </package>
    <package importpath="golang.org/x/text/encoding/charmap">
      <types/>
      <functions>
        <function name="NewDecoder">
          <recvList>
            <type type="pointer">
              <type type="ident" def="charmap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="NewEncoder">
          <recvList>
            <type type="pointer">
              <type type="ident" def="charmap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="transform"/>
              <item value="Transformer"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="charmap"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList>
            <type type="ident" def="charmapDecoder"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList>
            <type type="ident" def="charmapEncoder"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="CodePage437"/>
        <name value="CodePage866"/>
        <name value="ISO8859_2"/>
        <name value="ISO8859_3"/>
        <name value="ISO8859_4"/>
        <name value="ISO8859_5"/>
        <name value="ISO8859_6"/>
        <name value="ISO8859_7"/>
        <name value="ISO8859_8"/>
        <name value="ISO8859_10"/>
        <name value="ISO8859_13"/>
        <name value="ISO8859_14"/>
        <name value="ISO8859_15"/>
        <name value="ISO8859_16"/>
        <name value="KOI8R"/>
        <name value="KOI8U"/>
        <name value="Macintosh"/>
        <name value="MacintoshCyrillic"/>
        <name value="Windows874"/>
        <name value="Windows1250"/>
        <name value="Windows1251"/>
        <name value="Windows1252"/>
        <name value="Windows1253"/>
        <name value="Windows1254"/>
        <name value="Windows1255"/>
        <name value="Windows1256"/>
        <name value="Windows1257"/>
        <name value="Windows1258"/>
        <name value="XUserDefined"/>
      </names>
    </package>
    <package importpath="golang.org/x/text/transform">
      <types>
        <type name="Transformer" type="interface">
          <method name="Transform">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="bool"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="int"/>
              <type type="ident" def="int"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Reset">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="NopResetter"/>
        <type type="struct" name="Reader">
          <field type="selector" name="r">
            <prefix value="io"/>
            <item value="Reader"/>
          </field>
          <field type="ident" def="Transformer" name="t"/>
          <field type="ident" def="error" name="err"/>
          <field type="slice" name="dst">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="int" name="dst0"/>
          <field type="ident" def="int" name="dst1"/>
          <field type="slice" name="src">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="int" name="src0"/>
          <field type="ident" def="int" name="src1"/>
          <field type="ident" def="bool" name="transformComplete"/>
        </type>
        <type type="struct" name="Writer">
          <field type="selector" name="w">
            <prefix value="io"/>
            <item value="Writer"/>
          </field>
          <field type="ident" def="Transformer" name="t"/>
          <field type="slice" name="dst">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="src">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="int" name="n"/>
        </type>
      </types>
      <functions>
        <function name="Reset">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="NewReader">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
            <type type="ident" def="Transformer"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Reader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NewWriter">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
            <type type="ident" def="Transformer"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Writer"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Transform">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Chain">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="Transformer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Transformer"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList>
            <type type="pointer">
              <type type="ident" def="chain"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Transform">
          <recvList>
            <type type="pointer">
              <type type="ident" def="chain"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="RemoveFunc">
          <recvList/>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="ident" def="rune"/>
              </paramsList>
              <resultsList>
                <type type="ident" def="bool"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Transformer"/>
          </resultsList>
        </function>
        <function name="Reset">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Transform">
          <recvList>
            <type type="ident" def="removeF"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList/>
          <paramsList>
            <type type="ident" def="Transformer"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Bytes">
          <recvList/>
          <paramsList>
            <type type="ident" def="Transformer"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ErrShortDst"/>
        <name value="ErrShortSrc"/>
        <name value="Discard"/>
        <name value="Nop"/>
      </names>
    </package>
    <package importpath="golang.org/x/text/unicode/norm">
      <types>
        <type name="Form" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="Iter">
          <field type="ident" def="reorderBuffer" name="rb"/>
          <field type="array" name="buf">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="ident" def="Properties" name="info"/>
          <field type="ident" def="iterFunc" name="next"/>
          <field type="ident" def="iterFunc" name="asciiF"/>
          <field type="ident" def="int" name="p"/>
          <field type="slice" name="multiSeg">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type type="struct" name="Properties">
          <field type="ident" def="uint8" name="pos"/>
          <field type="ident" def="uint8" name="size"/>
          <field type="ident" def="uint8" name="ccc"/>
          <field type="ident" def="uint8" name="tccc"/>
          <field type="ident" def="uint8" name="nLead"/>
          <field type="ident" def="qcInfo" name="flags"/>
          <field type="ident" def="uint16" name="index"/>
        </type>
      </types>
      <functions>
        <function name="Reset">
          <recvList/>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Transform">
          <recvList>
            <type type="ident" def="Form"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="normWriter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="normWriter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Writer">
          <recvList>
            <type type="ident" def="Form"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="WriteCloser"/>
            </type>
          </resultsList>
        </function>
        <function name="Read">
          <recvList>
            <type type="pointer">
              <type type="ident" def="normReader"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Reader">
          <recvList>
            <type type="ident" def="Form"/>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Reader"/>
            </type>
          </resultsList>
        </function>
        <function name="Bytes">
          <recvList>
            <type type="ident" def="Form"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="Form"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="IsNormal">
          <recvList>
            <type type="ident" def="Form"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="IsNormalString">
          <recvList>
            <type type="ident" def="Form"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Append">
          <recvList>
            <type type="ident" def="Form"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ellipsis">
              <type type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="AppendString">
          <recvList>
            <type type="ident" def="Form"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="QuickSpan">
          <recvList>
            <type type="ident" def="Form"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="QuickSpanString">
          <recvList>
            <type type="ident" def="Form"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="FirstBoundary">
          <recvList>
            <type type="ident" def="Form"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="FirstBoundaryInString">
          <recvList>
            <type type="ident" def="Form"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="LastBoundary">
          <recvList>
            <type type="ident" def="Form"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Init">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Iter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Form"/>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="InitString">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Iter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="Form"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Iter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int64"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Pos">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Iter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="Done">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Iter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Iter"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="BoundaryBefore">
          <recvList>
            <type type="ident" def="Properties"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="BoundaryAfter">
          <recvList>
            <type type="ident" def="Properties"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Decomposition">
          <recvList>
            <type type="ident" def="Properties"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Size">
          <recvList>
            <type type="ident" def="Properties"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
        <function name="CCC">
          <recvList>
            <type type="ident" def="Properties"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint8"/>
          </resultsList>
        </function>
        <function name="LeadCCC">
          <recvList>
            <type type="ident" def="Properties"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint8"/>
          </resultsList>
        </function>
        <function name="TrailCCC">
          <recvList>
            <type type="ident" def="Properties"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="uint8"/>
          </resultsList>
        </function>
        <function name="Properties">
          <recvList>
            <type type="ident" def="Form"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="Properties"/>
          </resultsList>
        </function>
        <function name="PropertiesString">
          <recvList>
            <type type="ident" def="Form"/>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Properties"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="Version"/>
        <name value="MaxTransformChunkSize"/>
        <name value="NFC"/>
        <name value="NFD"/>
        <name value="NFKC"/>
        <name value="NFKD"/>
        <name value="MaxSegmentSize"/>
        <name value="GraphemeJoiner"/>
      </names>
    </package>
  </packages>
  <imports>
    <import path="fmt"/>
    <import path="io"/>
    <import path="testing"/>
    <import path="golang.org/x/text/transform"/>
    <import path="unicode/utf8"/>
    <import path="bytes"/>
    <import path="bufio"/>
    <import path="flag"/>
    <import path="log"/>
    <import path="net/http"/>
    <import path="os"/>
    <import path="path"/>
    <import path="regexp"/>
    <import path="runtime"/>
    <import path="strconv"/>
    <import path="strings"/>
    <import path="time"/>
    <import path="unicode"/>
    <import path="golang.org/x/text/unicode/norm"/>
    <import path="sort"/>
    <import path="golang.org/x/text/internal/triegen"/>
    <import path="golang.org/x/text/internal/ucd"/>
    <import path="errors"/>
    <import path="io/ioutil"/>
    <import path="golang.org/x/text/cldr"/>
    <import path="hash"/>
    <import path="hash/fnv"/>
    <import path="math"/>
    <import path="os/exec"/>
    <import path="reflect"/>
    <import path="golang.org/x/text/language"/>
    <import path="encoding/binary"/>
    <import path="hash/crc64"/>
    <import path="text/template"/>
    <import path="math/rand"/>
    <import path="golang.org/x/text/encoding"/>
    <import path="golang.org/x/text/encoding/charmap"/>
    <import path="golang.org/x/text/encoding/japanese"/>
    <import path="golang.org/x/text/encoding/korean"/>
    <import path="golang.org/x/text/encoding/simplifiedchinese"/>
    <import path="golang.org/x/text/encoding/traditionalchinese"/>
    <import path="golang.org/x/text/encoding/unicode"/>
    <import path="unicode/utf16"/>
    <import path="go/format"/>
    <import path="path/filepath"/>
    <import path="golang.org/x/text/display"/>
    <import path="golang.org/x/text/collate/build"/>
    <import path="golang.org/x/text/collate/colltab"/>
    <import path="golang.org/x/text/collate"/>
    <import path="archive/zip"/>
    <import path="C"/>
    <import path="unsafe"/>
    <import path="runtime/pprof"/>
    <import path="encoding/xml"/>
    <import path="golang.org/x/text/cases"/>
  </imports>
</project>
