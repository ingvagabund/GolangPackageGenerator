<?xml version='1.0' encoding='ASCII'?>
<project ipprefix="" commit="commit" nvr="golang-googlecode-gomock-0-0.4.gitd581abf.fc24">
  <packages>
    <package importpath="github.com/golang/mock/sample/imp4">
      <types>
        <type type="struct" name="Imp4"/>
      </types>
      <functions/>
      <names/>
    </package>
    <package importpath="github.com/golang/mock/sample">
      <types>
        <type name="Index" type="interface">
          <method name="Get">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="interface"/>
            </resultsList>
          </method>
          <method name="GetTwo">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="interface"/>
              <type type="interface"/>
            </resultsList>
          </method>
          <method name="Put">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="interface"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Summary">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="btz"/>
                  <item value="Buffer"/>
                </type>
              </type>
              <type type="selector">
                <prefix value="io"/>
                <item value="Writer"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Other">
            <paramsList/>
            <resultsList>
              <type type="selector">
                <prefix value="hash"/>
                <item value="Hash"/>
              </type>
            </resultsList>
          </method>
          <method name="Templates">
            <paramsList>
              <type type="selector">
                <prefix value="t1"/>
                <item value="CSS"/>
              </type>
              <type type="selector">
                <prefix value="t2"/>
                <item value="FuncMap"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Anon">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="ForeignOne">
            <paramsList>
              <type type="selector">
                <prefix value="imp1"/>
                <item value="Imp1"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="ForeignTwo">
            <paramsList>
              <type type="selector">
                <prefix value="renamed2"/>
                <item value="Imp2"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="ForeignThree">
            <paramsList>
              <type type="ident" def="Imp3"/>
            </paramsList>
            <resultsList/>
          </method>
          <method name="ForeignFour">
            <paramsList>
              <type type="selector">
                <prefix value="imp_four"/>
                <item value="Imp4"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="NillableRet">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="ConcreteRet">
            <paramsList/>
            <resultsList>
              <type type="channel" dir="1">
                <type type="ident" def="bool"/>
              </type>
            </resultsList>
          </method>
          <method name="Ellip">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="EllipOnly">
            <paramsList>
              <type type="ellipsis">
                <type type="ident" def="string"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Ptr">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="int"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Slice">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="int"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="array">
                <elmtype type="ident" def="int"/>
              </type>
            </resultsList>
          </method>
          <method name="Chan">
            <paramsList>
              <type type="channel" dir="3">
                <type type="ident" def="int"/>
              </type>
              <type type="channel" dir="1">
                <type type="selector">
                  <prefix value="hash"/>
                  <item value="Hash"/>
                </type>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Func">
            <paramsList>
              <type type="func">
                <paramsList>
                  <type type="selector">
                    <prefix value="http"/>
                    <item value="Request"/>
                  </type>
                </paramsList>
                <resultsList>
                  <type type="ident" def="int"/>
                  <type type="ident" def="bool"/>
                </resultsList>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Map">
            <paramsList>
              <type type="map">
                <keytype type="ident" def="int"/>
                <valtype type="selector">
                  <prefix value="hash"/>
                  <item value="Hash"/>
                </valtype>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type name="Embed" type="interface">
          <method name="RegularMethod">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
        <type name="Embedded" type="interface">
          <method name="EmbeddedMethod">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
      </types>
      <functions>
        <function name="Remember">
          <recvList/>
          <paramsList>
            <type type="ident" def="Index"/>
            <type type="slice">
              <elmtype type="ident" def="string"/>
            </type>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="GrabPointer">
          <recvList/>
          <paramsList>
            <type type="ident" def="Index"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="int"/>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/golang/mock/gomock">
      <types>
        <type name="Matcher" type="interface">
          <method name="Matches">
            <paramsList>
              <type type="interface"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="String">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
        </type>
        <type name="TestReporter" type="interface">
          <method name="Errorf">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Fatalf">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ellipsis">
                <type type="interface"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="Controller">
          <field type="selector" name="mu">
            <prefix value="sync"/>
            <item value="Mutex"/>
          </field>
          <field type="ident" def="TestReporter" name="t"/>
          <field type="ident" def="callSet" name="expectedCalls"/>
        </type>
        <type type="struct" name="Call">
          <field type="ident" def="TestReporter" name="t"/>
          <field type="interface" name="receiver"/>
          <field type="ident" def="string" name="method"/>
          <field type="slice" name="args">
            <elmtype type="ident" def="Matcher"/>
          </field>
          <field type="slice" name="rets">
            <elmtype type="interface"/>
          </field>
          <field type="slice" name="preReqs">
            <elmtype type="pointer">
              <type type="ident" def="Call"/>
            </elmtype>
          </field>
          <field type="ident" def="int" name="minCalls"/>
          <field type="ident" def="int" name="maxCalls"/>
          <field type="ident" def="int" name="numCalls"/>
          <field type="selector" name="doFunc">
            <prefix value="reflect"/>
            <item value="Value"/>
          </field>
          <field type="map" name="setArgs">
            <keytype type="ident" def="int"/>
            <valtype type="selector">
              <prefix value="reflect"/>
              <item value="Value"/>
            </valtype>
          </field>
        </type>
      </types>
      <functions>
        <function name="Matches">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="ident" def="eqMatcher"/>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="eqMatcher"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="ident" def="notMatcher"/>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="notMatcher"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Any">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Eq">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Nil">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="Not">
          <recvList/>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Matcher"/>
          </resultsList>
        </function>
        <function name="NewController">
          <recvList/>
          <paramsList>
            <type type="ident" def="TestReporter"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Controller"/>
            </type>
          </resultsList>
        </function>
        <function name="RecordCall">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Controller"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </resultsList>
        </function>
        <function name="Call">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Controller"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
          </resultsList>
        </function>
        <function name="Finish">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Controller"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Add">
          <recvList>
            <type type="ident" def="callSet"/>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Remove">
          <recvList>
            <type type="ident" def="callSet"/>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="FindMatch">
          <recvList>
            <type type="ident" def="callSet"/>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </resultsList>
        </function>
        <function name="AnyTimes">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </resultsList>
        </function>
        <function name="Do">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </resultsList>
        </function>
        <function name="Return">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </resultsList>
        </function>
        <function name="Times">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </resultsList>
        </function>
        <function name="SetArg">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="int"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </resultsList>
        </function>
        <function name="After">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Call"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="InOrder">
          <recvList/>
          <paramsList>
            <type type="ellipsis">
              <type type="pointer">
                <type type="ident" def="Call"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/golang/mock/mockgen/model">
      <types>
        <type type="struct" name="Package">
          <field type="ident" def="string" name="Name"/>
          <field type="slice" name="Interfaces">
            <elmtype type="pointer">
              <type type="ident" def="Interface"/>
            </elmtype>
          </field>
          <field type="slice" name="DotImports">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="Interface">
          <field type="ident" def="string" name="Name"/>
          <field type="slice" name="Methods">
            <elmtype type="pointer">
              <type type="ident" def="Method"/>
            </elmtype>
          </field>
        </type>
        <type type="struct" name="Method">
          <field type="ident" def="string" name="Name"/>
          <field type="slice" name="In">
            <elmtype type="pointer">
              <type type="ident" def="Parameter"/>
            </elmtype>
          </field>
          <field type="slice" name="Out">
            <elmtype type="pointer">
              <type type="ident" def="Parameter"/>
            </elmtype>
          </field>
          <field type="pointer" name="Variadic">
            <type type="ident" def="Parameter"/>
          </field>
        </type>
        <type type="struct" name="Parameter">
          <field type="ident" def="string" name="Name"/>
          <field type="ident" def="Type" name="Type"/>
        </type>
        <type name="Type" type="interface">
          <method name="String">
            <paramsList>
              <type type="map">
                <keytype type="ident" def="string"/>
                <valtype type="ident" def="string"/>
              </type>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="addImports">
            <paramsList>
              <type type="map">
                <keytype type="ident" def="string"/>
                <valtype type="ident" def="bool"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
        <type type="struct" name="ArrayType">
          <field type="ident" def="int" name="Len"/>
          <field type="ident" def="Type" name="Type"/>
        </type>
        <type type="struct" name="ChanType">
          <field type="ident" def="ChanDir" name="Dir"/>
          <field type="ident" def="Type" name="Type"/>
        </type>
        <type name="ChanDir" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type type="struct" name="FuncType">
          <field type="slice" name="In">
            <elmtype type="pointer">
              <type type="ident" def="Parameter"/>
            </elmtype>
          </field>
          <field type="slice" name="Out">
            <elmtype type="pointer">
              <type type="ident" def="Parameter"/>
            </elmtype>
          </field>
          <field type="pointer" name="Variadic">
            <type type="ident" def="Parameter"/>
          </field>
        </type>
        <type type="struct" name="MapType">
          <field type="ident" def="Type" name="Key"/>
          <field type="ident" def="Type" name="Value"/>
        </type>
        <type type="struct" name="NamedType">
          <field type="ident" def="string" name="Package"/>
          <field type="ident" def="string" name="Type"/>
        </type>
        <type type="struct" name="PointerType">
          <field type="ident" def="Type" name="Type"/>
        </type>
        <type name="PredeclaredType" type="ident">
          <type type="ident" def="string"/>
        </type>
      </types>
      <functions>
        <function name="Print">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Imports">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Package"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="Print">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Interface"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Print">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Method"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Print">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Parameter"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ArrayType"/>
            </type>
          </recvList>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="string"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ChanType"/>
            </type>
          </recvList>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="string"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="FuncType"/>
            </type>
          </recvList>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="string"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MapType"/>
            </type>
          </recvList>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="string"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="NamedType"/>
            </type>
          </recvList>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="string"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PointerType"/>
            </type>
          </recvList>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="string"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="PredeclaredType"/>
          </recvList>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="string"/>
              <valtype type="ident" def="string"/>
            </type>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="InterfaceFromInterfaceType">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="reflect"/>
              <item value="Type"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Interface"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="RecvDir"/>
        <name value="SendDir"/>
      </names>
    </package>
    <package importpath="github.com/golang/mock/sample/mock_user">
      <types>
        <type type="struct" name="MockIndex">
          <field type="pointer" name="ctrl">
            <type type="selector">
              <prefix value="gomock"/>
              <item value="Controller"/>
            </type>
          </field>
          <field type="pointer" name="recorder">
            <type type="ident" def="_MockIndexRecorder"/>
          </field>
        </type>
        <type type="struct" name="MockEmbed">
          <field type="pointer" name="ctrl">
            <type type="selector">
              <prefix value="gomock"/>
              <item value="Controller"/>
            </type>
          </field>
          <field type="pointer" name="recorder">
            <type type="ident" def="_MockEmbedRecorder"/>
          </field>
        </type>
        <type type="struct" name="MockEmbedded">
          <field type="pointer" name="ctrl">
            <type type="selector">
              <prefix value="gomock"/>
              <item value="Controller"/>
            </type>
          </field>
          <field type="pointer" name="recorder">
            <type type="ident" def="_MockEmbeddedRecorder"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewMockIndex">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Controller"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </resultsList>
        </function>
        <function name="EXPECT">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </resultsList>
        </function>
        <function name="Anon">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Anon">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Chan">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="channel" dir="3">
              <type type="ident" def="int"/>
            </type>
            <type type="channel" dir="1">
              <type type="selector">
                <prefix value="hash"/>
                <item value="Hash"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Chan">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="ConcreteRet">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="channel" dir="1">
              <type type="ident" def="bool"/>
            </type>
          </resultsList>
        </function>
        <function name="ConcreteRet">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Ellip">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Ellip">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="EllipOnly">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="ident" def="string"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="EllipOnly">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ellipsis">
              <type type="interface"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="ForeignFour">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="imp4"/>
              <item value="Imp4"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ForeignFour">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="ForeignOne">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="imp1"/>
              <item value="Imp1"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ForeignOne">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="ForeignThree">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="imp3"/>
              <item value="Imp3"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ForeignThree">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="ForeignTwo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="imp2"/>
              <item value="Imp2"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ForeignTwo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Func">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="func">
              <paramsList>
                <type type="selector">
                  <prefix value="http"/>
                  <item value="Request"/>
                </type>
              </paramsList>
              <resultsList>
                <type type="ident" def="int"/>
                <type type="ident" def="bool"/>
              </resultsList>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Func">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="GetTwo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="interface"/>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="GetTwo">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Map">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="map">
              <keytype type="ident" def="int"/>
              <valtype type="selector">
                <prefix value="hash"/>
                <item value="Hash"/>
              </valtype>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Map">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="NillableRet">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="NillableRet">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Other">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="selector">
              <prefix value="hash"/>
              <item value="Hash"/>
            </type>
          </resultsList>
        </function>
        <function name="Other">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Ptr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="ident" def="int"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Ptr">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Put">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Slice">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="int"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="array">
              <elmtype type="ident" def="int"/>
            </type>
          </resultsList>
        </function>
        <function name="Slice">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Summary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="bytes"/>
                <item value="Buffer"/>
              </type>
            </type>
            <type type="selector">
              <prefix value="io"/>
              <item value="Writer"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Summary">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Templates">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockIndex"/>
            </type>
          </recvList>
          <paramsList>
            <type type="selector">
              <prefix value="template0"/>
              <item value="CSS"/>
            </type>
            <type type="selector">
              <prefix value="template"/>
              <item value="FuncMap"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Templates">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockIndexRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="NewMockEmbed">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Controller"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="MockEmbed"/>
            </type>
          </resultsList>
        </function>
        <function name="EXPECT">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockEmbed"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="_MockEmbedRecorder"/>
            </type>
          </resultsList>
        </function>
        <function name="EmbeddedMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockEmbed"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="EmbeddedMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockEmbedRecorder"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="ForeignEmbeddedMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockEmbed"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="bufio"/>
                <item value="Reader"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="ForeignEmbeddedMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockEmbedRecorder"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="ImplicitPackage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockEmbed"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="selector">
              <prefix value="imp1"/>
              <item value="ImpT"/>
            </type>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="imp1"/>
                <item value="ImpT"/>
              </elmtype>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="imp1"/>
                <item value="ImpT"/>
              </type>
            </type>
            <type type="channel" dir="3">
              <type type="selector">
                <prefix value="imp1"/>
                <item value="ImpT"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="ImplicitPackage">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockEmbedRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
            <type type="interface"/>
            <type type="interface"/>
            <type type="interface"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="RegularMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockEmbed"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="RegularMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockEmbedRecorder"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="NewMockEmbedded">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Controller"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="MockEmbedded"/>
            </type>
          </resultsList>
        </function>
        <function name="EXPECT">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockEmbedded"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="_MockEmbeddedRecorder"/>
            </type>
          </resultsList>
        </function>
        <function name="EmbeddedMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockEmbedded"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="EmbeddedMethod">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockEmbeddedRecorder"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/golang/mock/sample/imp3">
      <types>
        <type type="struct" name="Imp3"/>
      </types>
      <functions/>
      <names/>
    </package>
    <package importpath="github.com/golang/mock/sample/imp1">
      <types>
        <type type="struct" name="Imp1"/>
        <type name="ImpT" type="ident">
          <type type="ident" def="int"/>
        </type>
        <type name="ForeignEmbedded" type="interface">
          <method name="ForeignEmbeddedMethod">
            <paramsList/>
            <resultsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="bufio"/>
                  <item value="Reader"/>
                </type>
              </type>
            </resultsList>
          </method>
          <method name="ImplicitPackage">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ident" def="ImpT"/>
              <type type="slice">
                <elmtype type="ident" def="ImpT"/>
              </type>
              <type type="pointer">
                <type type="ident" def="ImpT"/>
              </type>
              <type type="channel" dir="3">
                <type type="ident" def="ImpT"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
        </type>
      </types>
      <functions/>
      <names/>
    </package>
    <package importpath="github.com/golang/mock/gomock/mock_matcher">
      <types>
        <type type="struct" name="MockMatcher">
          <field type="pointer" name="ctrl">
            <type type="selector">
              <prefix value="gomock"/>
              <item value="Controller"/>
            </type>
          </field>
          <field type="pointer" name="recorder">
            <type type="ident" def="_MockMatcherRecorder"/>
          </field>
        </type>
      </types>
      <functions>
        <function name="NewMockMatcher">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Controller"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="MockMatcher"/>
            </type>
          </resultsList>
        </function>
        <function name="EXPECT">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="_MockMatcherRecorder"/>
            </type>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockMatcher"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Matches">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockMatcherRecorder"/>
            </type>
          </recvList>
          <paramsList>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MockMatcher"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="pointer">
              <type type="ident" def="_MockMatcherRecorder"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="gomock"/>
                <item value="Call"/>
              </type>
            </type>
          </resultsList>
        </function>
      </functions>
      <names/>
    </package>
    <package importpath="github.com/golang/mock/sample/imp2">
      <types>
        <type type="struct" name="Imp2"/>
      </types>
      <functions/>
      <names/>
    </package>
  </packages>
  <imports>
    <import path="io"/>
    <import path="bytes"/>
    <import path="hash"/>
    <import path="log"/>
    <import path="net"/>
    <import path="net/http"/>
    <import path="html/template"/>
    <import path="text/template"/>
    <import path="github.com/golang/mock/sample/imp1"/>
    <import path="github.com/golang/mock/sample/imp2"/>
    <import path="github.com/golang/mock/sample/imp3"/>
    <import path="github.com/golang/mock/sample/imp4"/>
    <import path="bufio"/>
    <import path="github.com/golang/mock/gomock"/>
    <import path="encoding/gob"/>
    <import path="flag"/>
    <import path="io/ioutil"/>
    <import path="os"/>
    <import path="os/exec"/>
    <import path="path/filepath"/>
    <import path="runtime"/>
    <import path="github.com/golang/mock/mockgen/model"/>
    <import path="fmt"/>
    <import path="go/ast"/>
    <import path="go/parser"/>
    <import path="go/token"/>
    <import path="path"/>
    <import path="strconv"/>
    <import path="strings"/>
    <import path="go/format"/>
    <import path="unicode"/>
    <import path="reflect"/>
    <import path="sync"/>
  </imports>
</project>
