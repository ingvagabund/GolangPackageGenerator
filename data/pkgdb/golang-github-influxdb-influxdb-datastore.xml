<?xml version='1.0' encoding='ASCII'?>
<project ipprefix="" commit="commit" nvr="golang-github-influxdb-influxdb-0.8.5-0.4.git9485e99.fc24">
  <packages>
    <package importpath="github.com/influxdb/influxdb/datastore/storage">
      <types>
        <type type="struct" name="RocksDBConfiguration">
          <field type="ident" def="int" name="MaxOpenFiles"/>
          <field type="selector" name="LruCacheSize">
            <prefix value="configuration"/>
            <item value="Size"/>
          </field>
        </type>
        <type type="struct" name="RocksDB">
          <field type="pointer" name="db">
            <type type="selector">
              <prefix value="rocksdb"/>
              <item value="DB"/>
            </type>
          </field>
          <field type="pointer" name="opts">
            <type type="selector">
              <prefix value="rocksdb"/>
              <item value="Options"/>
            </type>
          </field>
          <field type="pointer" name="bopts">
            <type type="selector">
              <prefix value="rocksdb"/>
              <item value="BlockBasedOptions"/>
            </type>
          </field>
          <field type="pointer" name="wopts">
            <type type="selector">
              <prefix value="rocksdb"/>
              <item value="WriteOptions"/>
            </type>
          </field>
          <field type="pointer" name="ropts">
            <type type="selector">
              <prefix value="rocksdb"/>
              <item value="ReadOptions"/>
            </type>
          </field>
          <field type="ident" def="string" name="path"/>
        </type>
        <type type="struct" name="RocksDBIterator">
          <field type="pointer" name="_itr">
            <type type="selector">
              <prefix value="rocksdb"/>
              <item value="Iterator"/>
            </type>
          </field>
          <field type="ident" def="error" name="err"/>
        </type>
        <type type="struct" name="Initializer">
          <field type="func" name="NewConfig">
            <paramsList/>
            <resultsList>
              <type type="interface"/>
            </resultsList>
          </field>
          <field type="func" name="Initialize">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="interface"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="Engine"/>
              <type type="ident" def="error"/>
            </resultsList>
          </field>
        </type>
        <type type="struct" name="MDBConfiguration">
          <field type="selector" name="MapSize">
            <prefix value="configuration"/>
            <item value="Size"/>
          </field>
        </type>
        <type type="struct" name="MDB">
          <field type="pointer" name="env">
            <type type="selector">
              <prefix value="mdb"/>
              <item value="Env"/>
            </type>
          </field>
          <field type="selector" name="db">
            <prefix value="mdb"/>
            <item value="DBI"/>
          </field>
          <field type="ident" def="string" name="path"/>
        </type>
        <type type="struct" name="MDBIterator">
          <field type="slice" name="key">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="value">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="pointer" name="c">
            <type type="selector">
              <prefix value="mdb"/>
              <item value="Cursor"/>
            </type>
          </field>
          <field type="pointer" name="tx">
            <type type="selector">
              <prefix value="mdb"/>
              <item value="Txn"/>
            </type>
          </field>
          <field type="ident" def="bool" name="valid"/>
          <field type="ident" def="error" name="err"/>
        </type>
        <type type="struct" name="LevelDbConfiguration">
          <field type="ident" def="int" name="MaxOpenFiles"/>
          <field type="selector" name="LruCacheSize">
            <prefix value="configuration"/>
            <item value="Size"/>
          </field>
        </type>
        <type type="struct" name="LevelDB">
          <field type="pointer" name="db">
            <type type="selector">
              <prefix value="levigo"/>
              <item value="DB"/>
            </type>
          </field>
          <field type="pointer" name="opts">
            <type type="selector">
              <prefix value="levigo"/>
              <item value="Options"/>
            </type>
          </field>
          <field type="pointer" name="wopts">
            <type type="selector">
              <prefix value="levigo"/>
              <item value="WriteOptions"/>
            </type>
          </field>
          <field type="pointer" name="ropts">
            <type type="selector">
              <prefix value="levigo"/>
              <item value="ReadOptions"/>
            </type>
          </field>
          <field type="ident" def="string" name="path"/>
        </type>
        <type type="struct" name="LevelDbIterator">
          <field type="pointer" name="_itr">
            <type type="selector">
              <prefix value="levigo"/>
              <item value="Iterator"/>
            </type>
          </field>
          <field type="ident" def="error" name="err"/>
        </type>
        <type type="struct" name="HyperlevelDBConfiguration">
          <field type="ident" def="int" name="MaxOpenFiles"/>
          <field type="selector" name="LruCacheSize">
            <prefix value="configuration"/>
            <item value="Size"/>
          </field>
        </type>
        <type type="struct" name="HyperlevelDB">
          <field type="pointer" name="db">
            <type type="selector">
              <prefix value="hyperleveldb"/>
              <item value="DB"/>
            </type>
          </field>
          <field type="pointer" name="opts">
            <type type="selector">
              <prefix value="hyperleveldb"/>
              <item value="Options"/>
            </type>
          </field>
          <field type="pointer" name="wopts">
            <type type="selector">
              <prefix value="hyperleveldb"/>
              <item value="WriteOptions"/>
            </type>
          </field>
          <field type="pointer" name="ropts">
            <type type="selector">
              <prefix value="hyperleveldb"/>
              <item value="ReadOptions"/>
            </type>
          </field>
          <field type="ident" def="string" name="path"/>
        </type>
        <type type="struct" name="HyperlevelDBIterator">
          <field type="pointer" name="_itr">
            <type type="selector">
              <prefix value="hyperleveldb"/>
              <item value="Iterator"/>
            </type>
          </field>
          <field type="ident" def="error" name="err"/>
        </type>
        <type type="struct" name="Write">
          <field type="slice" name="Key">
            <elmtype type="ident" def="byte"/>
          </field>
          <field type="slice" name="Value">
            <elmtype type="ident" def="byte"/>
          </field>
        </type>
        <type name="Iterator" type="interface">
          <method name="Seek">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList/>
          </method>
          <method name="Key">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
          <method name="Value">
            <paramsList/>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </resultsList>
          </method>
          <method name="Next">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Prev">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Valid">
            <paramsList/>
            <resultsList>
              <type type="ident" def="bool"/>
            </resultsList>
          </method>
          <method name="Error">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Close">
            <paramsList/>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
        </type>
        <type name="Engine" type="interface">
          <method name="Name">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="Path">
            <paramsList/>
            <resultsList>
              <type type="ident" def="string"/>
            </resultsList>
          </method>
          <method name="Put">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Get">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="BatchPut">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="Write"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Del">
            <paramsList>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
              <type type="slice">
                <elmtype type="ident" def="byte"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Iterator">
            <paramsList/>
            <resultsList>
              <type type="ident" def="Iterator"/>
            </resultsList>
          </method>
          <method name="Compact">
            <paramsList/>
            <resultsList/>
          </method>
          <method name="Close">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
      </types>
      <functions>
        <function name="NewRocksDBConfig">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="NewRocksDB">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Engine"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Compact">
          <recvList>
            <type type="ident" def="RocksDB"/>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="RocksDB"/>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Put">
          <recvList>
            <type type="ident" def="RocksDB"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="ident" def="RocksDB"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="RocksDB"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Path">
          <recvList>
            <type type="ident" def="RocksDB"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="BatchPut">
          <recvList>
            <type type="ident" def="RocksDB"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="Write"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Del">
          <recvList>
            <type type="ident" def="RocksDB"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RocksDBIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RocksDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RocksDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RocksDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RocksDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RocksDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RocksDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="RocksDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Iterator">
          <recvList>
            <type type="ident" def="RocksDB"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Iterator"/>
          </resultsList>
        </function>
        <function name="GetInitializer">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Initializer"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="DefaultPredicate">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="func">
              <paramsList>
                <type type="slice">
                  <elmtype type="ident" def="byte"/>
                </type>
              </paramsList>
              <resultsList>
                <type type="ident" def="bool"/>
              </resultsList>
            </type>
          </resultsList>
        </function>
        <function name="NewMDBConfiguration">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="NewMDB">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Engine"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Put">
          <recvList>
            <type type="ident" def="MDB"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="BatchPut">
          <recvList>
            <type type="ident" def="MDB"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="Write"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="ident" def="MDB"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Del">
          <recvList>
            <type type="ident" def="MDB"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MDBIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="MDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="MDB"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Path">
          <recvList>
            <type type="ident" def="MDB"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Iterator">
          <recvList>
            <type type="ident" def="MDB"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Iterator"/>
          </resultsList>
        </function>
        <function name="Compact">
          <recvList>
            <type type="ident" def="MDB"/>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="MDB"/>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="NewLevelDBConfig">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="NewLevelDB">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Engine"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Compact">
          <recvList>
            <type type="ident" def="LevelDB"/>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="LevelDB"/>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Put">
          <recvList>
            <type type="ident" def="LevelDB"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="ident" def="LevelDB"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="LevelDB"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Path">
          <recvList>
            <type type="ident" def="LevelDB"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="BatchPut">
          <recvList>
            <type type="ident" def="LevelDB"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="Write"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Del">
          <recvList>
            <type type="ident" def="LevelDB"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDbIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDbIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDbIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDbIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDbIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDbIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDbIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="LevelDbIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Iterator">
          <recvList>
            <type type="ident" def="LevelDB"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Iterator"/>
          </resultsList>
        </function>
        <function name="NewHyperlevelDBConfig">
          <recvList/>
          <paramsList/>
          <resultsList>
            <type type="interface"/>
          </resultsList>
        </function>
        <function name="NewHyperlevelDB">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="interface"/>
          </paramsList>
          <resultsList>
            <type type="ident" def="Engine"/>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Compact">
          <recvList>
            <type type="ident" def="HyperlevelDB"/>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Close">
          <recvList>
            <type type="ident" def="HyperlevelDB"/>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Put">
          <recvList>
            <type type="ident" def="HyperlevelDB"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Get">
          <recvList>
            <type type="ident" def="HyperlevelDB"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Name">
          <recvList>
            <type type="ident" def="HyperlevelDB"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="Path">
          <recvList>
            <type type="ident" def="HyperlevelDB"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="BatchPut">
          <recvList>
            <type type="ident" def="HyperlevelDB"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="Write"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Del">
          <recvList>
            <type type="ident" def="HyperlevelDB"/>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Seek">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HyperlevelDBIterator"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HyperlevelDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Prev">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HyperlevelDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HyperlevelDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HyperlevelDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Key">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HyperlevelDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Value">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HyperlevelDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="slice">
              <elmtype type="ident" def="byte"/>
            </type>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="HyperlevelDBIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Iterator">
          <recvList>
            <type type="ident" def="HyperlevelDB"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="Iterator"/>
          </resultsList>
        </function>
      </functions>
      <names>
        <name value="ROCKSDB_NAME"/>
        <name value="MDB_NAME"/>
        <name value="LEVELDB_NAME"/>
        <name value="HYPERLEVELDB_NAME"/>
      </names>
    </package>
    <package importpath="github.com/influxdb/influxdb/datastore">
      <types>
        <type type="struct" name="ShardDatastore">
          <field type="ident" def="string" name="baseDbDir"/>
          <field type="pointer" name="config">
            <type type="selector">
              <prefix value="configuration"/>
              <item value="Configuration"/>
            </type>
          </field>
          <field type="map" name="shards">
            <keytype type="ident" def="uint32"/>
            <valtype type="pointer">
              <type type="ident" def="Shard"/>
            </valtype>
          </field>
          <field type="map" name="lastAccess">
            <keytype type="ident" def="uint32"/>
            <valtype type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </valtype>
          </field>
          <field type="map" name="shardRefCounts">
            <keytype type="ident" def="uint32"/>
            <valtype type="ident" def="int"/>
          </field>
          <field type="map" name="shardsToClose">
            <keytype type="ident" def="uint32"/>
            <valtype type="ident" def="bool"/>
          </field>
          <field type="map" name="shardsToDelete">
            <keytype type="ident" def="uint32"/>
            <valtype type="struct" name=""/>
          </field>
          <field type="selector" name="shardsLock">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
          <field type="pointer" name="writeBuffer">
            <type type="selector">
              <prefix value="cluster"/>
              <item value="WriteBuffer"/>
            </type>
          </field>
          <field type="ident" def="int" name="maxOpenShards"/>
          <field type="ident" def="int" name="pointBatchSize"/>
          <field type="ident" def="int" name="writeBatchSize"/>
          <field type="pointer" name="metaStore">
            <type type="selector">
              <prefix value="metastore"/>
              <item value="Store"/>
            </type>
          </field>
        </type>
        <type type="struct" name="FieldLookupError">
          <field type="ident" def="string" name="message"/>
        </type>
        <type type="struct" name="Shard">
          <field type="selector" name="db">
            <prefix value="storage"/>
            <item value="Engine"/>
          </field>
          <field type="ident" def="bool" name="closed"/>
          <field type="ident" def="int" name="pointBatchSize"/>
          <field type="ident" def="int" name="writeBatchSize"/>
          <field type="pointer" name="metaStore">
            <type type="selector">
              <prefix value="metastore"/>
              <item value="Store"/>
            </type>
          </field>
          <field type="selector" name="closeLock">
            <prefix value="sync"/>
            <item value="RWMutex"/>
          </field>
        </type>
        <type type="struct" name="PointIteratorStream">
          <field type="pointer" name="pi">
            <type type="ident" def="PointIterator"/>
          </field>
          <field type="ident" def="string" name="name"/>
          <field type="slice" name="fields">
            <elmtype type="ident" def="string"/>
          </field>
        </type>
        <type type="struct" name="PointIterator">
          <field type="slice" name="itrs">
            <elmtype type="selector">
              <prefix value="storage"/>
              <item value="Iterator"/>
            </elmtype>
          </field>
          <field type="slice" name="fields">
            <elmtype type="pointer">
              <type type="selector">
                <prefix value="metastore"/>
                <item value="Field"/>
              </type>
            </elmtype>
          </field>
          <field type="selector" name="startTime">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="selector" name="endTime">
            <prefix value="time"/>
            <item value="Time"/>
          </field>
          <field type="slice" name="rawColumnValues">
            <elmtype type="ident" def="rawColumnValue"/>
          </field>
          <field type="ident" def="bool" name="valid"/>
          <field type="ident" def="error" name="err"/>
          <field type="pointer" name="point">
            <type type="selector">
              <prefix value="protocol"/>
              <item value="Point"/>
            </type>
          </field>
          <field type="ident" def="bool" name="asc"/>
        </type>
        <type name="Datastore" type="interface">
          <method name="ExecuteQuery">
            <paramsList>
              <type type="selector">
                <prefix value="common"/>
                <item value="User"/>
              </type>
              <type type="ident" def="string"/>
              <type type="pointer">
                <type type="selector">
                  <prefix value="parser"/>
                  <item value="SelectQuery"/>
                </type>
              </type>
              <type type="func">
                <paramsList>
                  <type type="pointer">
                    <type type="selector">
                      <prefix value="protocol"/>
                      <item value="Series"/>
                    </type>
                  </type>
                </paramsList>
                <resultsList>
                  <type type="ident" def="error"/>
                </resultsList>
              </type>
              <type type="func">
                <paramsList>
                  <type type="pointer">
                    <type type="ident" def="string"/>
                  </type>
                  <type type="pointer">
                    <type type="ident" def="string"/>
                  </type>
                  <type type="pointer">
                    <type type="ident" def="int64"/>
                  </type>
                </paramsList>
                <resultsList>
                  <type type="ident" def="bool"/>
                </resultsList>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="LogRequestAndAssignSequenceNumber">
            <paramsList>
              <type type="pointer">
                <type type="selector">
                  <prefix value="protocol"/>
                  <item value="Request"/>
                </type>
              </type>
              <type type="pointer">
                <type type="ident" def="uint8"/>
              </type>
              <type type="pointer">
                <type type="ident" def="uint32"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="CurrentSequenceNumber">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="uint32"/>
              </type>
              <type type="pointer">
                <type type="ident" def="uint8"/>
              </type>
              <type type="pointer">
                <type type="ident" def="uint32"/>
              </type>
              <type type="pointer">
                <type type="ident" def="uint32"/>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="uint64"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="ReplayRequestsFromSequenceNumber">
            <paramsList>
              <type type="pointer">
                <type type="ident" def="uint32"/>
              </type>
              <type type="pointer">
                <type type="ident" def="uint32"/>
              </type>
              <type type="pointer">
                <type type="ident" def="uint32"/>
              </type>
              <type type="pointer">
                <type type="ident" def="uint8"/>
              </type>
              <type type="pointer">
                <type type="ident" def="uint64"/>
              </type>
              <type type="func">
                <paramsList>
                  <type type="pointer">
                    <type type="slice">
                      <elmtype type="ident" def="byte"/>
                    </type>
                  </type>
                </paramsList>
                <resultsList>
                  <type type="ident" def="error"/>
                </resultsList>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="AtomicIncrement">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ident" def="int"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="uint64"/>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="WriteSeriesData">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="pointer">
                <type type="selector">
                  <prefix value="protocol"/>
                  <item value="Series"/>
                </type>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="DeleteSeriesData">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="pointer">
                <type type="selector">
                  <prefix value="parser"/>
                  <item value="DeleteQuery"/>
                </type>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="GetSeriesForDatabase">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="func">
                <paramsList>
                  <type type="ident" def="string"/>
                </paramsList>
                <resultsList>
                  <type type="ident" def="error"/>
                </resultsList>
              </type>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="DropDatabase">
            <paramsList>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="DropSeries">
            <paramsList>
              <type type="ident" def="string"/>
              <type type="ident" def="string"/>
            </paramsList>
            <resultsList>
              <type type="ident" def="error"/>
            </resultsList>
          </method>
          <method name="Close">
            <paramsList/>
            <resultsList/>
          </method>
        </type>
      </types>
      <functions>
        <function name="NewShardDatastore">
          <recvList/>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="configuration"/>
                <item value="Configuration"/>
              </type>
            </type>
            <type type="pointer">
              <type type="selector">
                <prefix value="metastore"/>
                <item value="Store"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="ShardDatastore"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ShardDatastore"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="GetOrCreateShard">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ShardDatastore"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint32"/>
          </paramsList>
          <resultsList>
            <type type="selector">
              <prefix value="cluster"/>
              <item value="LocalShardDb"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="ReturnShard">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ShardDatastore"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint32"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ShardDatastore"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="protocol"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="BufferWrite">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ShardDatastore"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="protocol"/>
                <item value="Request"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="SetWriteBuffer">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ShardDatastore"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="cluster"/>
                <item value="WriteBuffer"/>
              </type>
            </type>
          </paramsList>
          <resultsList/>
        </function>
        <function name="DeleteShard">
          <recvList>
            <type type="pointer">
              <type type="ident" def="ShardDatastore"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="uint32"/>
          </paramsList>
          <resultsList/>
        </function>
        <function name="NewFieldLookupError">
          <recvList/>
          <paramsList>
            <type type="ident" def="string"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="FieldLookupError"/>
            </type>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="ident" def="FieldLookupError"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="NewShard">
          <recvList/>
          <paramsList>
            <type type="selector">
              <prefix value="storage"/>
              <item value="Engine"/>
            </type>
            <type type="ident" def="int"/>
            <type type="ident" def="int"/>
            <type type="pointer">
              <type type="selector">
                <prefix value="metastore"/>
                <item value="Store"/>
              </type>
            </type>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="Shard"/>
            </type>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Write">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Shard"/>
            </type>
          </recvList>
          <paramsList>
            <type type="ident" def="string"/>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="protocol"/>
                  <item value="Series"/>
                </type>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Query">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Shard"/>
            </type>
          </recvList>
          <paramsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="parser"/>
                <item value="QuerySpec"/>
              </type>
            </type>
            <type type="selector">
              <prefix value="engine"/>
              <item value="Processor"/>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="IsClosed">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Shard"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="DropFields">
          <recvList>
            <type type="pointer">
              <type type="ident" def="Shard"/>
            </type>
          </recvList>
          <paramsList>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="metastore"/>
                  <item value="Field"/>
                </type>
              </elmtype>
            </type>
          </paramsList>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="String">
          <recvList>
            <type type="ident" def="rawColumnValue"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="string"/>
          </resultsList>
        </function>
        <function name="HasPoint">
          <recvList>
            <type type="ident" def="PointIteratorStream"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="ident" def="PointIteratorStream"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="protocol"/>
                <item value="Series"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Closed">
          <recvList>
            <type type="ident" def="PointIteratorStream"/>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="NewPointIterator">
          <recvList/>
          <paramsList>
            <type type="slice">
              <elmtype type="selector">
                <prefix value="storage"/>
                <item value="Iterator"/>
              </elmtype>
            </type>
            <type type="slice">
              <elmtype type="pointer">
                <type type="selector">
                  <prefix value="metastore"/>
                  <item value="Field"/>
                </type>
              </elmtype>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
            <type type="selector">
              <prefix value="time"/>
              <item value="Time"/>
            </type>
            <type type="ident" def="bool"/>
          </paramsList>
          <resultsList>
            <type type="pointer">
              <type type="ident" def="PointIterator"/>
            </type>
          </resultsList>
        </function>
        <function name="Next">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PointIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
        <function name="Valid">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PointIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="bool"/>
          </resultsList>
        </function>
        <function name="Point">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PointIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="pointer">
              <type type="selector">
                <prefix value="protocol"/>
                <item value="Point"/>
              </type>
            </type>
          </resultsList>
        </function>
        <function name="Error">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PointIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList>
            <type type="ident" def="error"/>
          </resultsList>
        </function>
        <function name="Close">
          <recvList>
            <type type="pointer">
              <type type="ident" def="PointIterator"/>
            </type>
          </recvList>
          <paramsList/>
          <resultsList/>
        </function>
      </functions>
      <names>
        <name value="ONE_KILOBYTE"/>
        <name value="ONE_MEGABYTE"/>
        <name value="SHARD_BLOOM_FILTER_BITS_PER_KEY"/>
        <name value="SHARD_DATABASE_DIR"/>
        <name value="ATOMIC_INCREMENT_PREFIX"/>
        <name value="NEXT_ID_KEY"/>
        <name value="SERIES_COLUMN_INDEX_PREFIX"/>
        <name value="DATABASE_SERIES_INDEX_PREFIX"/>
        <name value="MAX_SEQUENCE"/>
        <name value="TRUE"/>
      </names>
    </package>
  </packages>
  <imports>
    <import path="code.google.com/p/goprotobuf/proto"/>
    <import path="code.google.com/p/log4go"/>
    <import path="github.com/influxdb/influxdb/engine"/>
    <import path="github.com/influxdb/influxdb/protocol"/>
    <import path="bytes"/>
    <import path="encoding/binary"/>
    <import path="fmt"/>
    <import path="math"/>
    <import path="time"/>
    <import path="github.com/influxdb/influxdb/common"/>
    <import path="io/ioutil"/>
    <import path="os"/>
    <import path="path"/>
    <import path="path/filepath"/>
    <import path="sync"/>
    <import path="github.com/BurntSushi/toml"/>
    <import path="github.com/influxdb/influxdb/cluster"/>
    <import path="github.com/influxdb/influxdb/configuration"/>
    <import path="github.com/influxdb/influxdb/datastore/storage"/>
    <import path="github.com/influxdb/influxdb/metastore"/>
    <import path="errors"/>
    <import path="regexp"/>
    <import path="github.com/influxdb/influxdb/parser"/>
    <import path="runtime"/>
    <import path="github.com/influxdb/rocksdb"/>
    <import path="strings"/>
    <import path="github.com/influxdb/gomdb"/>
    <import path="github.com/jmhodges/levigo"/>
    <import path="github.com/influxdb/hyperleveldb-go"/>
  </imports>
</project>
